<?xml version="1.0" encoding="UTF-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl">
    <binding id="wBaseBlockToolbar">
        <implementation>

            <method name="getElementById">
                <parameter name="id"/>
                <body><![CDATA[
                    return document.getAnonymousElementByAttribute(this, "anonid", id);
                ]]></body>
            </method>
            
            
            <field name="_blockHandler"><![CDATA[
                undefined
            ]]></field>

            <field name="_updating"><![CDATA[
                false
            ]]></field>

            <field name="_initialized"><![CDATA[
                false
             ]]></field>

            <property name="type">
                <getter><![CDATA[
                    return this.getAttribute("type");
                ]]></getter>
                <setter><![CDATA[
                    this.setAttribute("type", trim(val));
                ]]></setter>
            </property>

            <property name="container" readonly="true">
                <getter><![CDATA[
                    return this.getElementById("container");
                ]]></getter>
            </property>  
            
            <property name="editor" readonly="true">
                <getter><![CDATA[
                	return $(this).parents("clayouteditor").get(0);
                ]]></getter>
            </property>

            <property name="blockHandler">
                <getter><![CDATA[
                    return this._blockHandler;
                ]]></getter>
                <setter><![CDATA[
                    this._blockHandler = val;
                ]]></setter>
            </property>

            <property name="updating">
                <getter><![CDATA[
                    return this._updating;
                ]]></getter>
                <setter><![CDATA[
                    this._updating = val;
                ]]></setter>
            </property>

            <constructor><![CDATA[
                this._initialized = false;
                var editor = $("clayouteditor").get(0);
                var currentHandler = this.parentNode.parentNode.parentNode.currentHandler
                if (editor != undefined)
                {
                	currentHandler = editor.focusedElement;
                }
                this.initialize(currentHandler);
            ]]></constructor>

            <method name="initialize">
                <parameter name="handler"/>
                <body><![CDATA[
                    try
                    {
                        this.blockHandler = handler;
                        if (this.blockHandler)
                        {
                            if (!this._initialized)
                            {
                                this._initialized = true;
                                this.onInitialize();
                            }
                            else
                            {
                                this.update(handler);
                            }
                        }
                    }
                    catch (e)
                    {
                        wCore.error("wBaseBlockToolbar.initialize", [handler], e);
                    }
                ]]></body>
            </method>

            <method name="onInitialize">
                <body><![CDATA[
                ]]></body>
            </method>

            <method name="update">
                <parameter name="handler"/>
                <body><![CDATA[
                    try
                    {
                        this.blockHandler = handler;
                        if (this.blockHandler && !this.updating)
                        {
                            this.updating = true;
                            this.onUpdate();
                            this.updating = false;
                        }
                    }
                    catch (e)
                    {
                        wCore.error("wBaseBlockToolbar.update", [handler], e);
                    }
                ]]></body>
            </method>

            <method name="onUpdate">
                <body><![CDATA[
                ]]></body>
            </method>

            <method name="setBlockAttribute">
                <parameter name="attribute"/>
                <parameter name="parameter"/>
                <parameter name="value"/>
                <body><![CDATA[
                    try
                    {
                        this.blockHandler.block.setBlockAttribute(attribute, parameter, value);
                    }
                    catch (e)
                    {
                        wCore.error("wBaseBlockToolbar.setBlockAttribute", [attribute, parameter, value], e);
                    }
                ]]></body>
            </method>

            <method name="getBlockAttribute">
                <parameter name="attribute"/>
                <parameter name="parameter"/>
                <body><![CDATA[
                    try
                    {
                        return this.blockHandler.block.getBlockAttribute(attribute, parameter);
                    }
                    catch (e)
                    {
                        wCore.error("wBaseBlockToolbar.getBlockAttribute", [attribute, parameter], e);
                    }
                ]]></body>
            </method>

            <method name="refreshBlock">
                <body><![CDATA[
                    try
                    {
                        this.blockHandler.block.loadContent();
                    }
                    catch (e)
                    {
                        wCore.error("wBaseBlockToolbar.refreshBlock", [], e);
                    }
                ]]></body>
            </method>

        </implementation>

    </binding>

    <binding id="wBlockToolbar" extends="layout.cLayoutToolbars#wBaseBlockToolbar">

        <implementation>

            <method name="onInitialize">
                <body><![CDATA[
                ]]></body>
            </method>

            <method name="onUpdate">
                <body><![CDATA[
                ]]></body>
            </method>

        </implementation>

        <xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
            <toolbar anonid="toolbar" flex="1" class="change-toolbar">
            </toolbar>
        </xbl:content>

    </binding>

    <binding id="wEmptyToolbar" extends="layout.cLayoutToolbars#wBaseBlockToolbar">
        <implementation>

            <method name="onInitialize">
                <body><![CDATA[
                    try
                    {
                        this.onUpdate();
                    }
                    catch (e)
                    {
                        wCore.error("wEmptyToolbar.onInitialize", [], e);
                    }
                ]]></body>
            </method>

            <method name="onUpdate">
                <body><![CDATA[
                    try
                    {
                        var display = this.blockHandler.block.getDisplay();
                        var height = '';
                        if (display && display.height)
                        {
                            var height = display.height;
                        }
                        if (document.getElementById("height"))
                        {
                            document.getElementById("height").value = this.getPixelValueAsInt(height);
                        }
                    }
                    catch (e)
                    {
                        wCore.error("wEmptyToolbar.onUpdate", [], e);
                    }
                ]]></body>
            </method>

            <method name="applyHeight">
                <parameter name="height"/>
                <body><![CDATA[
                    try
                    {
                        height = parseInt(height) + "px";
                        this.setBlockAttribute('display', 'height', height);
                        this.blockHandler.style.height = height;
                        this.blockHandler.setAttribute("height", height);
                    }
                    catch (e)
                    {
                        wCore.error("wEmptyToolbar.applyHeight", [height], e);
                    }
                ]]></body>
            </method>
            
            <method name="getPixelValueAsInt">
				<parameter name="value" />
				<body><![CDATA[
					var lastIndex = value.lastIndexOf("px");
					if (typeof value == 'string' && lastIndex > 0)
					{
						return parseInt(value.substring(0, lastIndex));
					}
					return value;
				]]></body>
			</method>

        </implementation>

        <xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml" orient="vertical">
            <toolbar anonid="toolbar" flex="1" class="change-toolbar">
                <toolbaritem align="center">
                    <textbox id="height" anonid="heightTextbox" size="10" onchange="applyHeight(this.value);" tooltiptext="&amp;modules.uixul.bo.layout.BlockHeight-help;" />
                </toolbaritem>
            </toolbar>
        </xbl:content>
    </binding>

	<binding id="cLayoutToolbar">
		<implementation>
		
            <method name="getElementById">
                <parameter name="id"/>
                <body><![CDATA[
                    return document.getAnonymousElementByAttribute(this, "anonid", id);
                ]]></body>
            </method>
            
			<field name="columnCount">0</field>
			
			<field name="cLayoutInstance">0</field>
			
			<method name="initialize">
				<parameter name="cLayoutInstance" />
				<body><![CDATA[
					this.columnCount = cLayoutInstance._columnCount;
					this.cLayoutInstance = cLayoutInstance;
					var mainToolbar = this.getElementById("mainToolbar");
					if (cLayoutInstance._columnCount == 1)
					{
						return;
					}
					for (var i = 0 ; i < cLayoutInstance._columnCount ; i++)
					{
						var textbox = this.getElementById('widthTextbox_' +i);
						var label = this.getElementById('labelTextbox_' +i);
						if (textbox != undefined && label != undefined)
						{
							textbox.removeAttribute("hidden");
							label.removeAttribute("hidden");
							textbox.setAttribute("class", 'col-width');
							textbox.setAttribute('value', cLayoutInstance.getLayoutElement(i).getAttribute("widthPercentage"));
						}
					}
				]]>
				</body>
			</method>
			<method name="resizeLayoutElement">
				<parameter name="index" />
				<body><![CDATA[
					if (this.columnCount == 2)
					{
						nextIndex = (index+1)%2;
						nextTextbox = this.getElementById('widthTextbox_' +nextIndex);
						currentTextbox = this.getElementById('widthTextbox_' +index);
						var newValue = Math.min(Math.max(10, currentTextbox.value), 90);
						currentTextbox.value = newValue;
						nextTextbox.value = 100.0 - newValue;
						this.cLayoutInstance.resizeColumn(index, newValue/100.0);
					}
					this.cLayoutInstance.layoutEditor.setIsModified(true);
				]]></body>
			</method>
		</implementation>
		<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
			<toolbar anonid="mainToolbar" flex="1" class="change-toolbar">
				<vbox flex="1" pack="center">
					<label anonid="labelTextbox_0" hidden="true">col. 1</label>
				</vbox>
				<textbox anonid="widthTextbox_0" size="4" maxlength="3" hidden="true" onchange="resizeLayoutElement(0);"
					tooltiptext="&amp;modules.uixul.bo.layout.ColWidthWidth-help;" />
				<vbox flex="1" pack="center">
					<label anonid="labelTextbox_1" hidden="true">col. 2</label>
				</vbox>
				<textbox anonid="widthTextbox_1" size="4" maxlength="3" hidden="true" onchange="resizeLayoutElement(1);"
					tooltiptext="&amp;modules.uixul.bo.layout.ColWidthWidth-help;" />
				<label anonid="labelTextbox_2" hidden="true">col. 3</label>
				<textbox anonid="widthTextbox_2" size="4" maxlength="3" hidden="true" onchange="resizeLayoutElement(2);"
					tooltiptext="&amp;modules.uixul.bo.layout.ColWidthWidth-help;" />
			</toolbar>
		</xbl:content>
	</binding>
</bindings>