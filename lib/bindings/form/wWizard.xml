<?xml version="1.0" encoding="utf-8"?>
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:xbl="http://www.mozilla.org/xbl">


	<binding id="wWizard" inheritstyle="true" extends="form.wForm#wForm">


		<implementation>

<!-- FIELDS -->

			<field name="panels">[ ]</field>
			<field name="panelIds">[ ]</field>
			<field name="deck">null</field>

<!-- PROPERTIES -->

			<property name="backButton">
				<getter><![CDATA[
					return this.getElementById('backButton');
				]]></getter>
			</property>


			<property name="nextButton">
				<getter><![CDATA[
					return this.getElementById('nextButton');
				]]></getter>
			</property>


			<property name="submitButton">
				<getter><![CDATA[
					return this.getElementById('submitButton');
				]]></getter>
			</property>


<!-- CONSTRUCTOR -->

			<constructor><![CDATA[
				this.deck = this.getElementById('deck');
				if (this.hasAttribute('standalone') && (this.getAttribute('standalone') == 'true'))
				{
					this.PANEL_CONTENT = 0;
				}
			]]></constructor>


<!-- METHODS -->

			<method name="goBack">
				<body><![CDATA[
					var cp = this.getCurrentPanel();
					var newPanelIndex = null;
					if ('previousPanel' in cp)
					{
						newPanelIndex = cp.previousPanel();
						if (typeof(newPanelIndex) == 'string')
						{
							newPanelIndex = this.getPanelById(newPanelIndex);
						}
					}
					if (newPanelIndex === null)
					{
						newPanelIndex = this.getCurrentPanelIndex() - 1;
					}
					if (this.deck.selectedIndex > 0)
					{
						this.showPanel(newPanelIndex);
					}
				]]></body>
			</method>


			<method name="goNext">
				<body><![CDATA[
					var cp = this.getCurrentPanel();
					var newPanelIndex = null;
					if ('nextPanel' in cp)
					{
						newPanelIndex = cp.nextPanel();
						if (typeof(newPanelIndex) == 'string')
						{
							newPanelIndex = this.getPanelById(newPanelIndex);
						}
					}
					if (newPanelIndex === null)
					{
						newPanelIndex = this.getCurrentPanelIndex() + 1;
					}
					if (this.deck.selectedIndex < (this.getPanelsCount() - 1))
					{
						this.showPanel(newPanelIndex);
					}
				]]></body>
			</method>


			<method name="getPanelById">
				<parameter name="panelName" />
				<body><![CDATA[
					for (var i=0 ; i<this.panelIds.length ; i++)
					{
						if (panelName == this.panelIds[i])
						{
							return i;
						}
					}
					return null;
				]]></body>
			</method>


			<method name="registerPanel">
				<parameter name="panel" />
				<body><![CDATA[
					var panels = this.getElementsByTagName('wwizardpanel');
					for (var i = 0; i < panels.length; i++)
					{
						if (panels[i].panelId == panel.panelId)
						{
							break;
						}
					}
					this.panels[i] = panel;
					this.panelIds[i] = panel.panelId;
					this.updateButtons();
					this.updateStepLabel();
				]]></body>
			</method>


			<method name="getPanelsCount">
				<body><![CDATA[
					return this.panels.length;
				]]></body>
			</method>


			<method name="getCurrentPanelIndex">
				<body><![CDATA[
					return parseInt(this.deck.selectedIndex);
				]]></body>
			</method>


			<method name="getCurrentPanel">
				<body><![CDATA[
					return this.panels[this.getCurrentPanelIndex()];
				]]></body>
			</method>


			<method name="disableNavigationForPanel">
				<parameter name="panel" />
				<body><![CDATA[
					if (this.getCurrentPanel() === panel)
					{
						this.disableButton('back');
						this.disableButton('next');
					}
				]]></body>
			</method>


			<method name="disableNextForPanel">
				<parameter name="panel" />
				<body><![CDATA[
					if (this.getCurrentPanel() === panel)
					{
						this.disableButton('next');
					}
				]]></body>
			</method>


			<method name="disableBackForPanel">
				<parameter name="panel" />
				<body><![CDATA[
					if (this.getCurrentPanel() === panel)
					{
						this.disableButton('back');
					}
				]]></body>
			</method>


			<method name="enableNavigationForPanel">
				<parameter name="panel" />
				<body><![CDATA[
					if (this.getCurrentPanel() === panel)
					{
						this.enableButton('back');
						this.enableButton('next');
					}
				]]></body>
			</method>


			<method name="enableNextForPanel">
				<parameter name="panel" />
				<body><![CDATA[
					if (this.getCurrentPanel() === panel)
					{
						this.enableButton('next');
					}
				]]></body>
			</method>


			<method name="enableBackForPanel">
				<parameter name="panel" />
				<body><![CDATA[
					if (this.getCurrentPanel() === panel)
					{
						this.enableButton('back');
					}
				]]></body>
			</method>


            <method name="getElementById">
                <parameter name="id"/>
                <body><![CDATA[
                    try
                    {
						return document.getAnonymousElementByAttribute(this, "anonid", id);
                    }
                    catch (e)
                    {
                    	wCore.error("wWizard.getElementById", [id], e);
                    	return null;
                    }
                ]]></body>
            </method>


            <method name="updateButtons">
				<body><![CDATA[
					if (this.getCurrentPanelIndex() == 0)
					{
						this.disableButton('back');
					}
					else
					{
						this.enableButton('back');
					}

					if (this.getCurrentPanelIndex() >= this.getPanelsCount() - 1)
					{
						this.disableButton('next');
					}
					else
					{
						this.enableButton('next');
					}

					if (this.getCurrentPanelIndex() == this.getPanelsCount() - 1)
					{
						this.enableButton('submit');
					}
					else
					{
						this.disableButton('submit');
					}
				]]></body>
			</method>


			<method name="updateStepLabel">
				<body><![CDATA[
					this.getElementById('stepLabel').setAttribute('value', '&modules.uixul.bo.wizard.Step; '+(this.getCurrentPanelIndex()+1)+' &modules.uixul.bo.wizard.of; '+this.getPanelsCount());
				]]></body>
			</method>


			<method name="enableButton">
				<parameter name="button" />
				<body><![CDATA[
					if (this[button+'Button']
						&& (button != 'back' || this.getCurrentPanelIndex() > 0)
						&& (button != 'next' || this.getCurrentPanelIndex() < (this.getPanelsCount()-1)))
					{
						this[button+'Button'].removeAttribute('disabled');
					}
				]]></body>
			</method>


			<method name="disableButton">
				<parameter name="button" />
				<body><![CDATA[
					if (this[button+'Button'])
					{
						this[button+'Button'].setAttribute('disabled', 'true');
					}
				]]></body>
			</method>


			<method name="showPanel">
				<parameter name="panelIndex" />
				<body><![CDATA[
					if (this.getCurrentPanelIndex() != panelIndex)
					{
						this.dispatchEvent('hide', this.getCurrentPanel());
						this.deck.selectedIndex = panelIndex;
						this.updateButtons();
						this.updateStepLabel();
						this.dispatchEvent('show', this.getCurrentPanel());
						this.getCurrentPanel().revalidate();
					}
				]]></body>
			</method>


			<method name="dispatchEvent">
				<parameter name="eventName" />
				<parameter name="element" />
				<body><![CDATA[
					if (typeof(element) == "object")
					{
						var evt = document.createEvent("HTMLEvents");
						evt.initEvent(eventName, true, true);
						try
						{
	    					if ( 'dispatchUserEvent' in element)
	    					{
	    						element.dispatchUserEvent(evt);
	    					}
	    					element.dispatchEvent(evt);
	    			    }
	    			    catch (e)
	    			    {
	    			    	wCore.error("wWizard.dispatchEvent", [eventName, element], e);
	    			    }
	    			}
	    			else
	    			{
	    				wCore.warn("Unable to wWizard.dispatchEvent : " + eventName + " on a no object element");
	    			}
	    			
				]]></body>
			</method>


		</implementation>


		<xbl:content
			xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
			xmlns:xbl="http://www.mozilla.org/xbl">
			<vbox xbl:inherits="flex,width,height">
				<label xbl:inherits="value=title" class="wizardTitle" />
				<spacer height="2" class="separator" />
				<deck flex="1" anonid="deck" selectedIndex="0">
					<xbl:children includes="wwizardpanel" />
				</deck>
				<spacer height="2" class="separator" />
				<hbox anonid="buttonsContainer" pack="start">
					<label anonid="stepLabel" class="stepLabel" />
					<button disabled="true" anonid="backButton" label="&amp;modules.uixul.bo.wizard.BackSpaced;" image="{IconsBase}/small/shadow/arrow_left_green.png" oncommand="goBack()" />
					<button disabled="true" anonid="nextButton" dir="reverse" label="&amp;modules.uixul.bo.wizard.NextSpaced;" image="{IconsBase}/small/shadow/arrow_right_green.png" oncommand="goNext()" />
					<button disabled="true" anonid="submitButton" dir="reverse" label="&amp;modules.uixul.bo.wizard.SubmitSpaced;" image="{IconsBase}/small/shadow/check2.png" oncommand="submit()" />
				</hbox>
			</vbox>
		</xbl:content>

	</binding>


</bindings>
