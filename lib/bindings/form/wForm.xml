<?xml version="1.0"?>
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<!--
################################################################################
## wForm                                                                      ##
################################################################################
-->

	<binding id="wForm" extends="form.wFormBase#wFormBase">

		<implementation>

			<field name="_is_wanting_to_load">false</field>

			<field name="close_after_save_success">false</field>
			<field name="createnew_after_save_success">false</field>
			<field name="load_after_save_success">null</field>


			<!-- Panels index -->
			<field name="PANEL_LOADING">0</field>
			<field name="PANEL_CONTENT">1</field>
			<field name="PANEL_CONFIRM_CLOSE">2</field>
			<field name="PANEL_CONFIRM_CREATENEW">3</field>
			<field name="PANEL_CONFIRM_LOAD">4</field>
			<field name="PANEL_CONFIRM_OBSOLETE">5</field>
			<field name="PANEL_CONFIRM_CREATENEWFROM">6</field>

			<field name="_working_language">null</field>

			<field name="_use_document_version_lock">false</field>

			<field name="_document_version_locked">false</field>

			<field name="oldSaveActionName">undefined</field>
			<field name="oldLoadActionName">undefined</field>

			<field name="_help_text">null</field>

			<field name="_originatedWidget">undefined</field>

			<!-- Explicit working language. -->
			<property name="workingLanguage">
				<getter><![CDATA[
					return this._working_language;
				]]></getter>
				<setter><![CDATA[
					this._working_language = val;
				]]></setter>
			</property>


			<property name="loadActionName">
				<getter><![CDATA[
					if (this.hasAttribute("loadaction"))
					{
						return this.getAttribute("loadaction");
					}
					return "Load";
				]]></getter>
				<setter><![CDATA[
					this.setAttribute("loadaction", val);
				]]></setter>
			</property>


			<property name="saveActionName">
				<getter><![CDATA[
					if (this.hasAttribute("saveaction"))
					{
						return this.getAttribute("saveaction");
					}
					return "Save";
				]]></getter>
				<setter><![CDATA[
					this.setAttribute("saveaction", val);
				]]></setter>
			</property>


			<property name="httpMethod">
				<getter><![CDATA[
					if (this.hasAttribute("method") && this.getAttribute("method").toLowerCase() == "get")
					{
						return "get";
					}
					return "post";
				]]></getter>
				<setter><![CDATA[
					this.setAttribute("method", val);
				]]></setter>
			</property>


			<property name="submitWithEnterKey">
				<getter><![CDATA[
					return parseBoolean(this.getAttribute('submit-with-enter-key'));
				]]></getter>
				<setter><![CDATA[
					val = parseBoolean(val);
					this.setAttribute('submit-with-enter-key', val ? 'true' : 'false');
				]]></setter>
			</property>


			<property name="document">
				<getter><![CDATA[
					var attr = this.getAttribute('document');
					if (attr == '' || attr.indexOf(' ') == -1) {
						return null;
					}
					var t = attr.split(/\s+/);
					if (t.length != 2) {
						return null;
					}
					return { id: t[0], lang: t[1] };
				]]></getter>
			</property>


			<property name="documentModelName">
				<getter><![CDATA[
					if (this.isBoundToDocumentModel)
					{
						return 'modules_'+this.getAttribute('module')+'/'+this.getAttribute('document-type');
					}
					return null;
				]]></getter>
			</property>


			<property name="isLoading">
				<setter><![CDATA[
					this._is_loading = val;
					this.setPanel(val == true ? this.PANEL_LOADING : this.PANEL_CONTENT);
				]]></setter>
			</property>


			<property name="isBoundToDocumentModel">
				<getter><![CDATA[
					return this.hasAttribute('module') && this.hasAttribute('document-type');
				]]></getter>
			</property>



			<property name="toolbar">
				<getter><![CDATA[
					return this.getElementById('mainToolbar');
				]]></getter>
			</property>


			<property name="helpPanel">
				<getter><![CDATA[
					return this.getElementById('helpPanel');
				]]></getter>
			</property>


			<property name="deck">
				<getter><![CDATA[
					return this.getElementById('_deck_');
				]]></getter>
			</property>


			<property name="helpText">
				<getter><![CDATA[
					if (this._help_text == null)
					{
						for (var c=0 ; c<this.childNodes.length && this._help_text == null ; c++)
						{
							if (this.childNodes[c].tagName == 'whelp' || this.childNodes[c].tagName == 'xul:whelp')
							{
								this._help_text = this.childNodes[c].textContent;
							}
						}
						if (this._help_text == null)
						{
							this._help_text = '';
						}
					}
					return this._help_text;
				]]></getter>
			</property>
			
			<method name="preInitialize">
				<body><![CDATA[
					return this.isBoundToDocumentModel || this.hasAttribute('standalone')
				]]></body>
			</method>

			<method name="postInitialize">
				<body><![CDATA[
					if (this.document == null)
					{
					    this.isLoading = false;
					}
					if (this._originatedWidget && 'onFormEditLoaded' in this._originatedWidget)
					{
					   	this._originatedWidget.onFormEditLoaded(this);
					}
					if (this.isBoundToDocumentModel && this.getAttribute('document-type') == 'preferences')
					{
						wCore.executeOnMethodExists(this.toolbar, 'hideResetButton', function(xbl){xbl.hideResetButton(); xbl.hideCreateButton()});
					}
									   
				]]></body>
			</method>


			<!--
			Enables the workflow toolbar.
			-->
			<method name="enableWorkflow">
				<body><![CDATA[
					if (this.toolbar)
					{
						this.toolbar.setAttribute('workflow', 'true');
					}
				]]></body>
			</method>


			<!--
			Disables the workflow toolbar.
			-->
			<method name="disableWorkflow">
				<body><![CDATA[
					if (this.toolbar)
					{
						this.toolbar.removeAttribute('workflow');
					}
				]]></body>
			</method>


			<!--
			Sets the panel to display.
			-->
			<method name="setPanel">
				<parameter name="panelIndex" />
				<body><![CDATA[
					if (this.deck)
					{
						this.deck.selectedIndex = panelIndex;
						if (panelIndex != this.PANEL_CONTENT && this.isMinimized)
						{
							this.maximize();
						}
					}
				]]></body>
			</method>


			<!--
			Returns the index of the panel that is currently displayed.
			-->
			<method name="getPanelIndex">
				<body><![CDATA[
					return this.deck ? this.deck.selectedIndex : 0;
				]]></body>
			</method>


			<!--
			Indicates whether the form is visible. In confirmation panels, the form is not visible.
			-->
			<method name="isFormVisible">
				<body><![CDATA[
					return this.getPanelIndex() == 1;
				]]></body>
			</method>

			<!--
			Clears all the field and the document information in order to create a new document.
			-->
			<method name="doCreateNew">
				<body><![CDATA[
				    if ( this.onBeforeCreateNew() )
				    {
				    	this._document_version_locked = false;
						for each(var field in this._fields)
						{
							field.empty();
							field.setCurrentValueAsDefault();
						}
						this.setAttribute('document', '');
						this.setPanel(this.PANEL_CONTENT);

						this.focusFirstField();
						this.focusFirstTab();

						this.showHelpText();
						this.onCreateNew();
					}
				]]></body>
			</method>


			<method name="createNew">
				<body><![CDATA[
					if (this.hasModifications)
					{
						this.setPanel(this.PANEL_CONFIRM_CREATENEW);
						this.setAttribute('disabled', 'true');
					}
					else
					{
						this.doCreateNew();
					}
				]]></body>
			</method>


			<!--
			Called when the user wants to create a new document.
			-->
			<method name="onCreateNew">
				<body><![CDATA[
				]]></body>
			</method>


			<!--
			Called when the user wants to create a new document.
			-->
			<method name="onBeforeCreateNew">
				<body><![CDATA[
					return true;
				]]></body>
			</method>

			<!--
			Clears the id in order to create a new document using the data of this one.
			-->
			<method name="doCreateNewFrom">
				<body><![CDATA[
				    if (this.onBeforeCreateNewFrom())
				    {
				    	this._document_version_locked = false;
				    	for each(var field in this._fields)
						{
							wCore.debug(field.name);
							/*field.empty();
							field.setCurrentValueAsDefault();*/
						}
						this.setAttribute('document', '');
						this.setPanel(this.PANEL_CONTENT);

						this.focusFirstField();
						this.focusFirstTab();

						this.showHelpText();
						this.onCreateNewFrom();
					}
				]]></body>
			</method>


			<method name="createNewFrom">
				<body><![CDATA[
					if (this.hasModifications)
					{
						this.setPanel(this.PANEL_CONFIRM_CREATENEWFROM);
						this.setAttribute('disabled', 'true');
					}
					else
					{
						this.doCreateNewFrom();
					}
				]]></body>
			</method>


			<!--
			Called when the user wants to create a new document from the current one.
			-->
			<method name="onCreateNewFrom">
				<body><![CDATA[
				]]></body>
			</method>


			<!--
			Called when the user wants to create a new document from the current one.
			-->
			<method name="onBeforeCreateNewFrom">
				<body><![CDATA[
					return true;
				]]></body>
			</method>

			<method name="getDestinationParentId">
				<body><![CDATA[
					if (this.isSubForm())
					{	
						var parentForm = this.getParentForm();	
						while(parentForm.isSubForm()) {parentForm = parentForm.getParentForm();}
						
						var parentModule = parentForm.getAttribute('module');
						var newModelName = 'modules_' + this.getAttribute('module') + '/' + this.getAttribute('document-type');					
						return wCore.getSubDocumentParentId(parentModule, parentForm.getAttribute('parent-id'), newModelName);
					}
					else
					{
						return this.getAttribute('parent-id');
					}
				]]></body>
			</method>

			<!--
			Submits the form's data.
			-->
			<method name="submit">
				<body><![CDATA[
					this.revalidate();
					if (this.isValid)
					{
						if (this.onBeforeSave() == true)
						{
							this.set_state(this.STATE_SAVING);

							var parameters = this.data;

							var doc = this.document;
							if (doc != null)
							{
								parameters["{K::COMPONENT_ID_ACCESSOR}"]   = doc.id;
								parameters["{K::LANG_ACCESSOR}"] = doc.lang;
							}
							else
							{
							    parameters["{K::LANG_ACCESSOR}"] =  this.getAttribute('document-lang');
							}

							parameters["{K::COMPONENT_ACCESSOR}"] = 'modules_' + this.getAttribute('module') + '/' + this.getAttribute('document-type');
							parameters["{K::PARENT_ID_ACCESSOR}"] = this.getDestinationParentId();

							var moduleName = this.getAttribute("module");
							if (this.getModule())
							{
								parameters["{K::PARENT_MODULE_ACCESSOR}"] = this.getModule().name;
							}
							
							wCore.debug("[wform::submit] query string = " + this.queryString);
							
							var params = new wControllerExecuteParameters();
							params.actionLabel = "&amp;modules.generic.backoffice.action.message.SavingDocument;";
							params.senderObject = this;
							params.module = moduleName;
							params.action = this.saveActionName;
							params.requestParameters = parameters;
							params.httpMethod = this.httpMethod;
							params.callBack = 'Save';
							this.getController().executeWithParameters(params);

						}
						else
						{
							this.set_state(this.STATE_SAVED_ERROR);
							this.toolbar.submitButton.enable();
							this.toolbar.submitAndCloseButton.enable();
							this.onSaveCancelled();
						}
					}
					else
					{
						this.debug("[wform::submit] Form is not valid!");
					}
				]]></body>
			</method>


			<!--
			Submits the form's data. deprecated use submit()
			-->
			<method name="save">
				<body><![CDATA[
					this.submit();
				]]></body>
			</method>


			<!--
			Called when a save process has been cancelled, when onBeforeSave() that returns false.
			-->
			<method name="onSaveCancelled">
				<body><![CDATA[
				]]></body>
			</method>


			<!--
			Called just before the save process is started. If this method returns false, the save process will be cancelled.
			-->
			<method name="onBeforeSave">
				<body><![CDATA[
					return true;
				]]></body>
			</method>


			<method name="isHandlingDocumentType">
				<parameter name="list" />
				<parameter name="documentType" />
				<body><![CDATA[
					if (list._dataSource && list._dataSource.components)
					{
						var listComponents = list._dataSource.components.split(/[\/,]/);
						if (listComponents.indexOf(documentType) != -1)
						{
							return true;
						}
						return false;
					}
					else
					{
						return true;
					}
				]]></body>
			</method>

			<method name="onSaveSuccess">
				<parameter name="e4x" />
				<body><![CDATA[
				    this.resetDefaultActions();

				    var lang;
					if (e4x.workinglang && e4x.workinglang != '')
					{
					   lang = e4x.workinglang;
					}
					else
					{
					   lang = e4x.lang;
					}

					if (e4x.parentref && e4x.parentref != '')
					{
					   this.setAttribute('parent-id', e4x.parentref);
					}

					// Look for attached widgets handling the current document type.
					var widgets = this.getAttachedComponents();
					var foundWidgets = new Array();
					for (var i in widgets)
					{
						var widget = widgets[i];
						wCore.debug("Widget "+i+": "+widget.id);
						if (this.isHandlingDocumentType(widget, this.getAttribute('document-type')))
						{
							wCore.debug("Widget "+i+": handles "+this.getAttribute('document-type'));
							foundWidgets.push(widget);
						}
					}

					if (this.isNew())
					{
						e4x.isNew = true;
						try
						{
							for (var i in foundWidgets)
							{
								var widget = foundWidgets[i];
								if (widget.isList())
								{
									widget.selectById(e4x.id);
								}
								else
								{
									widget.selectById(e4x.id, e4x.parentref);
								}
							}
						}
						catch (e)
						{
							wCore.error("wForm.onSaveSuccess", [e4x], e);
						}
					}
					// intportg - 2008-10-17 : I don't know what is the exact purpose of this portion of code. 
					// Maybe it is useless since all attached widgets handling the current document type are refreshed...
					else if (this._originatedWidget)
					{
						if ('onFormSaveSucces' in this._originatedWidget)
						{
							this._originatedWidget.onFormSaveSucces();
						}
						else if (!this._originatedWidget.isList())
						{
							var parentNode = this._originatedWidget.moveToParentNode();
							this._originatedWidget.refresh(parentNode);
							window.setTimeout(function (tree, id, parentid) { tree.selectById(id, parentid); }, 500, this._originatedWidget, e4x.id, e4x.parentref);
					    }
					}

					this.setAttribute('document', e4x.id + ' ' + lang);

					for each(var field in this._fields)
					{
					    field.suggestionValue = null;

						field.setCurrentValueAsDefault();
					}

					this.set_state(this.STATE_SAVED_SUCCESS);

					// intcours - 2007-08-30 - this should be done to ensure consistency :
					this.revalidate();
					
					// Refresh all attached widgets that handles the current document type.
					for (var i in foundWidgets)
					{
						var widget = foundWidgets[i];
						widget.refresh(null, true);
					}
	
					var module = this.getModule();
					try
					{
						this.onSave(e4x);
						this.onSaveSubForm(e4x);

						if (module && (e4x.action == "SavePermissions"))
						{
							window.setTimeout(function(_module){ _module.refreshAll(true); }, 500, module); 
						}

						if (this.close_after_save_success)
						{
							this.doClose();
						}
						else if (this.createnew_after_save_success)
						{
							this.doCreateNew();
						}
						else if (this.load_after_save_success != null)
						{
							this.doLoad(this.load_after_save_success);
						}
						else if (this._use_document_version_lock)
						{
							this.load(this.document.id, this.document.lang);
						}
					}
					catch (e)
					{
						wCore.error("wForm.onSaveSuccess", [e4x], e);
						throw new Error("Caught error in wform::onSave(): "+e.message);
					}
				]]></body>
			</method>


			<method name="refreshAttachedWidget">
				<body><![CDATA[
					try
					{
					    var attachedComponent = this.getAttachedComponent();
					    if (attachedComponent && 'refresh' in attachedComponent)
					    {
					    	attachedComponent.refresh(null, true);
					    }
					}
					catch (e)
					{
						wCore.error("wForm.refreshAttachedWidget", [], e);
					}
				]]></body>
			</method>


			<!--
			Called when a save process has completed successfully. You may override this method.
			-->
			<method name="onSave">
				<parameter name="e4x" />
				<body><![CDATA[
				]]></body>
			</method>


			<!--
			Called when a save process has failed. You may override this method.
			-->
			<method name="onSaveError">
				<parameter name="p" />
				<body><![CDATA[
					if (p.message.toString().match(/version.*obsolete/i))
					{
						this.setAttribute('disabled', 'true');
						this._document_version_locked = true;
						this.setPanel(this.PANEL_CONFIRM_OBSOLETE);
					}
				]]></body>
			</method>


			<!--
			Loads a document into the form by calling the 'Load' action of the module.
			-->
			<method name="load">
				<parameter name="documentId" />
				<parameter name="documentLang" />
				<body><![CDATA[
				    if (this._is_wanting_to_load)
				    {
				        return;
				    }
				    this._is_wanting_to_load = true;

					wCore.debug("[wform::load] id="+documentId+", lang="+documentLang);

					this.load_after_save_success = null;

					if (this.onBeforeLoad(documentId, documentLang) == true)
					{
						this.set_state(this.STATE_LOADING);
						var moduleName = this.getAttribute('module');
						this.isLoading = true;
						if (this.hasAttribute('curdoclabel'))
						{
							this.getElementById('documentTitle').value = this.getAttribute('curdoclabel');
							this.removeAttribute('curdoclabel');
						}
						var parentId = this.getAttribute('parent-id');

						var params = new wControllerExecuteParameters();
						params.actionLabel = "&amp;modules.generic.backoffice.action.message.LoadingDocument;";
						params.senderObject = this;
						params.module = moduleName;
						params.action = this.loadActionName;
						params.callBack = 'Load';
						if (this.getModule())
						{
							params.requestParameters =
							{
								{K::COMPONENT_ID_ACCESSOR}: documentId,
								{K::LANG_ACCESSOR}: documentLang,
								{K::PARENT_ID_ACCESSOR}: parentId,
								{K::PARENT_MODULE_ACCESSOR}: this.getModule().name
							};
						}
						else
						{
							params.requestParameters =
							{
								{K::COMPONENT_ID_ACCESSOR}: documentId,
								{K::LANG_ACCESSOR}: documentLang,
								{K::PARENT_ID_ACCESSOR}: parentId
							};
						}
						params.httpMethod = this.httpMethod;

						this.getController().executeWithParameters(params);
					}
					else
					{
					    this._is_wanting_to_load = false;
						this.set_state(this.STATE_LOADED_ERROR);
						this.onLoadCancelled(documentId, documentLang);
					}
				]]></body>
			</method>


			<!--
			Called when the load process has been cancelled.
			-->
			<method name="onLoadCancelled" >
				<parameter name="documentId" />
				<parameter name="documentLang" />
				<body><![CDATA[
				]]></body>
			</method>


			<!--
			Called just before the load process is started. If this method returns false, the load process will be cancelled.
			-->
			<method name="onBeforeLoad" >
				<parameter name="documentId" />
				<parameter name="documentLang" />
				<body><![CDATA[
					this.debug("[wform::onBeforeLoad] id="+documentId+", lang="+documentLang);
					return true;
				]]></body>
			</method>


			<!--
			Called when a load process has completed successfully. It is strongly recommended to override the onLoad() method rather than this one.
			-->
			<method name="onLoadSuccess" >
				<parameter name="e4x" />
				<body><![CDATA[
					this.isLoading = false;
					this._is_wanting_to_load = false;
					var lang = e4x.workinglang.toString();
					if (!lang.length)
					{
					   lang = e4x.lang.toString();
					}
					
					this.setFieldsValueFromE4X(e4x.document, lang);
					this.setAttribute('document', e4x.id + ' ' + lang);
					
					this.set_state(this.STATE_LOADED_SUCCESS);
					
					this.set_is_valid(true)
					
					this.handleEditOnce();

			    	this.focusFirstField();
					this.focusFirstTab();
					
					var hiddenPropsField = this.getFieldByName('hiddenprops');
					if (hiddenPropsField != null)
					{
					  // TODO : implement hide() on wField
					  if (!hiddenPropsField.hidden) this.hideField('hiddenprops');
					  // show all fields (they could have been hidden by an other document instance)
					  for each(var field in this._fields)
					  {
					    if (field.hidden && field.name != 'hiddenprops')
					    {
					      this.showField(field.name);
					    }
					  }
					   
					  if (hiddenPropsField.value)
					  {
					    var hiddenProps = hiddenPropsField.value.split(',');
					    for (var i = 0; i < hiddenProps.length; i++)
					    {
					      this.hideField(hiddenProps[i]);
					    }
					  }
					}

					this.onLoad(e4x);
				]]></body>
			</method>


			<!--
			Sets the form data from an E4X XML object.
			-->
			<method name="setFieldsValueFromE4X" >
				<parameter name="dataXml" />
			    <parameter name="lang" />
				<body><![CDATA[
				    try
					{
    					if (typeof(dataXml) == 'string')
    					{
    						dataXml = new XML(dataXml);
    					}
    					this.empty();

    					var b, val = {};

    					for each (b in dataXml.component)
    					{
    						var name = b.@name;

    						if ( ! (name in val) )
    						{
    							val[name] = {value: [], label: []};
    						}

    						val[name].value.push(b.toString());

    						if (b.@suggested == 'true')
    						{
    						    val[name].suggested = true;

    						    if (b.@label != '')
    						    {
    						        val[name].label.push(b.@label.toString());
    						    }
    						}

    						if (b.@disabled == 'true')
    						{
    						    val[name].disabled = true;
    						}
    					}

    					var value;
    											
    					for (var name in val)
    					{	
    						if (typeof(val[name]) != 'function')
    						{
    							try
    							{
    								if (name == "documentversion")
									{
										this._use_document_version_lock = true;
										this._document_version_locked = false;
									}
									
									if (typeof(this._fields[name]) == 'object')
									{
	    							    if (val[name].suggested == true)
	    							    {
	    							        if (val[name].value.length > 1)
	    							        {
	    							            this._fields[name].value = val[name].value[0];
									            this._fields[name].setCurrentValueAsDefault();
	    							        }
	
	    							        this._fields[name].suggestionValue = val[name];
	    							    }
	    							    else if (val[name].disabled == true)
	    							    {
	    							        if (val[name].value.length == 1)
	            							{
	            								value = val[name].value[0];
	            							}
	            							else
	            							{
	            								value = val[name].value;
	            							}
	    							        this._fields[name].value = value;
									        this._fields[name].setCurrentValueAsDefault();
									        this._fields[name].disable();
	    							    }
	    							    else
	    							    {
	    							        if (val[name].value.length == 1)
	            							{
	            								value = val[name].value[0];
	            							}
	            							else
	            							{
	            								value = val[name].value;
	            							}
	    							        this._fields[name].value = value;
									        this._fields[name].setCurrentValueAsDefault();
	    							    }
	    							 }
	    							 else
	    							 {
	    							 	this.debug("setFieldsValueFromE4X -> Ignore : " + name);
	    							 }	
    							}
    							catch (e)
    							{
    								wCore.error("wForm.setFieldsValueFromE4X", [dataXml,lang], e);
    							}
    							
    						}
    					}
    			     }
    			     catch (e)
					 {
    					wCore.error("wForm.setFieldsValueFromE4X", [dataXml,lang], e);
					 }
				]]></body>
			</method>


			<!--
			Called when a load process has failed. You may override this method.
			-->
			<method name="onLoadError" >
				<body><![CDATA[
					this.debug("[wform::onLoadError]");
					this.isLoading = true;
				]]></body>
			</method>


			<!--
			Called when a load process has completed successfully. You may override this method.
			-->
			<method name="onLoad" >
				<parameter name="e4x" />
				<body><![CDATA[
					this.debug("[wform::onLoad]");
				]]></body>
			</method>


			<!--
			Closes the form: remove the 'module' and 'document-type' attributes and stop all actions pending in the controller.
			-->
			<method name="close" >
				<body><![CDATA[
					if (this.onBeforeClose())
					{
						this.doClose();
					}
					else
					{
						this.onCloseCancelled();
					}
				]]></body>
			</method>


			<!--
			Called just before the forms is closed. If this method returns false, the form won't be closed and onCloseCancelled() will be invoked.
			-->
			<method name="onBeforeClose" >
				<body><![CDATA[
					var result = true;
					if (this.hasModifications)
					{
						this.setPanel(this.PANEL_CONFIRM_CLOSE);
						result = false;
					}
					return result;
				]]></body>
			</method>


			<!--
			Called just before the forms is closed. If this method returns false, the form won't be closed and onCloseCancelled() will be invoked.
			-->
			<method name="closeForm" >
				<body><![CDATA[
					var result = true;
					if (this.hasModifications)
					{
						this.setPanel(this.PANEL_CONFIRM_CLOSE);
						this.setAttribute('disabled', 'true');
					}
					else
					{
						this.close();
					}
				]]></body>
			</method>


			<!--
			Does close the form: remove attributes that binds the element to the XBL binding.
			-->
			<method name="doClose">
				<body><![CDATA[
					this.resetDefaultActions();
					var module = this.getModule();
					if (module && 'showLeftTree' in module)
					{
						this.getModule().showLeftTree('leftTree');
						this.getModule().hideRscTree('rscTree');
					}
					this.removeAttribute("document");
					this.removeAttribute("module");
					this.removeAttribute("document-type");
				
					this.onClose();
					this.onCloseSubForm();
				]]></body>
			</method>


			<!--
			Called when the form has been closed. Please not that, here, the form is not bound to a document model anymore.
			-->
			<method name="onClose" >
				<body><![CDATA[
				]]></body>
			</method>


			<!--
			Called when the load could not be closed.
			-->
			<method name="onCloseCancelled" >
				<body><![CDATA[
				]]></body>
			</method>


			<!--
			Sets the error messages for a field. This method is called by child fields widgets.
			-->
			<method name="setErrors" >
				<parameter name="field" />
				<parameter name="errors" />
				<body><![CDATA[
					this.debug("Form validation errors for field '"+field.name+"':\n - " + errors.join("\n - "));
				]]></body>
			</method>


			<!--
			Indicates whether the currently edited document is a new document that does not exist yet (true)
			or if it already exists and it is being modified (false).
			-->
			<method name="isNew" >
				<body><![CDATA[
					return this.document == null;
				]]></body>
			</method>


			<method name="doLoad">
				<parameter name="loadInfo" />
				<body><![CDATA[
					this.setAttribute('curdoclabel', loadInfo.label);
					this.setAttribute('parent-id', loadInfo.parentId);
					if (this.getAttribute('module') == loadInfo.module && this.getAttribute('document-type') == loadInfo.documentType)
					{
						this.debug('[wform::doLoad] this.load('+loadInfo.id+', '+loadInfo.lang+')');
						this.load(loadInfo.id, loadInfo.lang);
					}
					else if (loadInfo.id && loadInfo.lang)
					{
						this.debug('[wform::doLoad] setting attributes: document="'+loadInfo.id+' '+loadInfo.lang+'", module="'+loadInfo.module+'", document-type="'+loadInfo.documentType+'"');

						this.setAttribute('document', loadInfo.id+' '+loadInfo.lang);
						this.setAttribute('module', loadInfo.module);
						this.setAttribute('document-type', loadInfo.documentType);
					}
				]]></body>
			</method>


			<!--
			Handles the broadcast event.
			-->
			<method name="handleBroadcast" >
				<parameter name="observes" />
				<body><![CDATA[
					if (observes)
					{
					    this._originatedWidget = document.getElementById(observes.getAttribute('element'));
					}
					else if (!this._originatedWidget && this.getModule())
					{
						this._originatedWidget = this.getModule().getMainList(); 
					}
					

					var documents = new XML(this.getAttribute('editcomponent'));
					if (documents.document && documents.document[0])
					{
						var _document = documents.document[0];
						var typeInfo = _document.component.(@name=="type").toString().split(/_/);

						if (typeInfo.length == 3 && typeInfo[0] == 'modules')
						{
							

							var id   = _document.component.(@name=="id").toString();
							var lang = _document.component.(@name=="lang").toString();

							var currentDocument = this.document;

							if (currentDocument == null || id != currentDocument.id || lang != currentDocument.lang)
							{
								var loadInfo = {
									id           : id,
									lang         : lang,
									parentId     : _document.component.(@name=="parentid").toString(),
									module       : typeInfo[1],
									documentType : typeInfo[2],
									label        : _document.component.(@name=="label").toString()
									};
								this.debug("[wform::handleBroadcast] Wants to load another document: id="+loadInfo.id+", lang="+loadInfo.lang);
								if (this.hasModifications)
								{
									this.debug("[wform::handleBroadcast] Has modifications: show confirm panel!");
									this.load_after_save_success = loadInfo;
									this.setPanel(this.PANEL_CONFIRM_LOAD);
								}
								else
								{
									this.debug("[wform::handleBroadcast] No modifications: load id="+loadInfo.id+", lang="+loadInfo.lang);
									this.doLoad(loadInfo);
								}
							}
						}
					}
				]]></body>
			</method>


			<!-- Called from the confirmation panel. -->
			<method name="confirm_close">
				<body><![CDATA[
					this.doClose();
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="cancel_close">
				<body><![CDATA[
					this.setPanel(this.PANEL_CONTENT);
					this.removeAttribute('disabled');
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="confirm_create_new">
				<body><![CDATA[
					this.removeAttribute('disabled');
					this.doCreateNew();
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="cancel_create_new">
				<body><![CDATA[
					this.setPanel(this.PANEL_CONTENT);
					this.removeAttribute('disabled');
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="save_and_close">
				<body><![CDATA[
					this.close_after_save_success = true;
					this.submit();
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="save_and_create_new">
				<body><![CDATA[
					this.createnew_after_save_success = true;
					this.submit();
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="confirm_create_new_from">
				<body><![CDATA[
					this.removeAttribute('disabled');
					this.doCreateNewFrom();
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="cancel_create_new_from">
				<body><![CDATA[
					this.setPanel(this.PANEL_CONTENT);
					this.removeAttribute('disabled');
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="save_and_create_new_from">
				<body><![CDATA[
					this.createnewfrom_after_save_success = true;
					this.submit();
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="save_and_load">
				<body><![CDATA[
					this.submit();
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="confirm_load">
				<body><![CDATA[
					this.doLoad(this.load_after_save_success);
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="confirm_load_replace">
				<body><![CDATA[
					this.setPanel(this.PANEL_CONTENT);
					this.load(this.document.id, this.document.lang);
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="confirm_go_back">
				<body><![CDATA[
					this.setPanel(this.PANEL_CONTENT);
				]]></body>
			</method>
			<!-- Called from the confirmation panel. -->
			<method name="cancel_load">
				<body><![CDATA[
					this.load_after_save_success = null;
					// FIX: re-set save and load action names (so that permissions don't get treated as real documents)
					this.saveActionName = this.oldSaveActionName == undefined ? 'Save' : this.oldSaveActionName;
					this.loadActionName = this.oldLoadActionName == undefined ? 'Load' : this.oldLoadActionName;;
					this.setPanel(this.PANEL_CONTENT);
					this.removeAttribute('disabled');
				]]></body>
			</method>


			<method name="initData">
				<parameter name="module" />
				<parameter name="action" />
				<parameter name="serverParameters" />
				<parameter name="formParameters" />
				<body><![CDATA[
					wCore.debug("wForm.initData");
					var params = new wControllerExecuteParameters();
					params.actionLabel = "&amp;modules.generic.backoffice.action.message.Init-data;";
					params.senderObject = this;
					params.module = module;
					params.action = action;
					params.requestParameters = serverParameters;
					params.httpMethod = this.httpMethod;
					params.callBack = "InitData";
					params.callBackParameters = formParameters;
					this.getController().executeWithParameters(params);
				]]></body>
			</method>


			<method name="onInitDataSuccess">
				<parameter name="e4x" />
			    <parameter name="xmlHttp" />
				<parameter name="parameters" />
				<body><![CDATA[
					if (typeof(e4x.document) == 'xml')
					{
					    if (parameters && parameters.cmpref && parameters.lang)
					    {
					       this.setAttribute('document', parameters.cmpref + ' ' + parameters.lang);
					    }

					    if (parameters && parameters.parentref)
					    {
					       this.setAttribute('parent-id', parameters.parentref);
					    }

					    this.setFieldsValueFromE4X(e4x.document, e4x.lang);

						this.handleEditOnce();

						this.onInit();
					}
				]]></body>
			</method>


			<method name="onInitDataError">
				<parameter name="e4x" />
				<body><![CDATA[
				]]></body>
			</method>


			<method name="_closeSuggestionPannel">
				<body><![CDATA[
					this.getElementById("suggestionPannel").setAttribute("collapsed", "true");
				]]></body>
			</method>


			<method name="callMethod">
				<parameter name="methodName" />
				<body><![CDATA[
				if ( ! (methodName in this) )
				{
					throw new Error('Method "'+methodName+'" does not exist in "wForm"');
				}
				var args = [ ];
				for (var i=1 ; i<arguments.length ; i++)
				{
					args.push(arguments[i]);
				}
				// FIX 553 - Je suis pas certain de comprendre pourquoi originellement 
				// la condition ci-dessous était this.state == this.STATE_INITIALIZED ...
				// Je n'ai rien remarqué de suspect cependant :)
				if (this.state == this.STATE_INITIALIZED || this.state == this.STATE_LOADED_SUCCESS)
				{
					this[methodName].apply(this, args);
				}
				else
				{
					// intbonjf 2007-04-12:
					// Well, this variable is not declared into this binding
					// because when the object is bound to another binding,
					// all the object properties are reset. Here I set a piece
					// of data directly to the DOM node, not to the wForm binding
					// because I want this information to remain when the binding
					// changes.
					if (!this.methods_to_call)
					{
						this.methods_to_call = [];
					}
					this.methods_to_call.push( {
						name: methodName,
						arguments: args
						} );
				}
				]]></body>
			</method>


			<method name="resetDefaultActions">
				<body><![CDATA[
					this.oldSaveActionName = this.saveActionName;
					this.oldLoadActionName = this.loadActionName;
					this.saveActionName = 'Save';
					this.loadActionName = 'Load';
					this.httpMethod = 'POST';
				]]></body>
			</method>


			<method name="showFieldInfo">
				<parameter name="field" />
				<body><![CDATA[
					if (this.isReady && this.helpPanel)
					{
						this.helpPanel.showFieldInfo(field);
					}
				]]></body>
			</method>

			<method name="showHelpText">
				<parameter name="field" />
				<body><![CDATA[
					if (this.isReady && this.helpPanel)
					{
						this.helpPanel.showContent(this.helpText);
					}
				]]></body>
			</method>
			
			<method name="updateTab">
				<parameter name="field" />
				<body><![CDATA[
					// Look for the tabpanel and the tabbox.
					var tabpanel = this.getTabPanelByField(field);
					if (tabpanel == null)
					{
						return;
					}
											
					// Look for the tab.
					var tab = this.getTabByTabpanel(tabpanel);			
					if (tab == null)
					{
						wCore.warn('No tab for the tabpanel with id "'+tabpanel.id+'".');
						return;
					}
					
					// Set the warning icon if the tab contains at least one invalid field.
					var icon = tab.childNodes[0];
					icon.setAttribute('collapsed', !this.hasInvalidFieldsInTabpanel(tabpanel));
				]]></body>
			</method>
			
			<!-- used in updateTab and hasInvalidFieldsInTabpanel -->
			<method name="getTabPanelByField" >
				<parameter name="field" />
				<body><![CDATA[
					var parentNode = field.parentNode;
					while (parentNode.parentNode)
					{
						if (parentNode.parentNode.tagName)
						{
							if (parentNode.parentNode.tagName == 'xul:tabpanels')
							{
								return parentNode;
							}
							// If we find a wform, there is no tabbox, so return null.
							else if (parentNode.parentNode.tagName == 'xul:wform')
							{
								return null;
							}
						}
						parentNode = parentNode.parentNode;
					}
					return null;
				]]></body>
			</method>
			
			<!-- used in updateTab -->
			<method name="getTabByTabpanel" >
				<parameter name="tabpanel" />
				<body><![CDATA[
					var tabpanels = tabpanel.parentNode;
					var tabbox = tabpanels.parentNode;	
					var tabs = tabbox.getElementsByTagNameNS("*", "tab");
					var tab = null;					
					for (var i in tabpanels.childNodes)
					{
						if (tabpanels.childNodes[i] == tabpanel)
						{
							if (i < tabs.length)
							{
								return tabs[i];
							}
							break;
						}
					}
					return null;
				]]></body>
			</method>
			
			<!-- used in updateTab -->
			<method name="hasInvalidFieldsInTabpanel" >
				<parameter name="tabpanel" />
				<body><![CDATA[
					for each (var field in this._fields)
					{
						if (this.getTabPanelByField(field) == tabpanel && !field.isValid)
						{
							return true;							
						}
					}
					return false;
				]]></body>
			</method>
			

			<method name="focusFirstTab">
				<body><![CDATA[
					try
					{
						for each (var field in this._fields)
						{
							var parentNode = field.parentNode;
							while (true)
							{
								if (parentNode.parentNode && parentNode.parentNode.tagName && parentNode.parentNode.tagName.match(/wform/))
								{
									break;
								}
								parentNode = parentNode.parentNode;
							}
							var panels = parentNode.getElementsByTagName("tab");
							if (panels && panels.length)
							{
								var panel = panels[0];
								panel.parentNode.parentNode.selectedTab = panel;
							}
							break;
						}
					}
					catch (e)
					{
						wCore.error("wForm.focusFirstTab", [], e);
					}
				]]></body>
			</method>


			<!-- Minimize / maximize -->


			<method name="minimize">
				<body><![CDATA[
					var mainFormContent = this.getElementById('_mainFormContent_');
					if (mainFormContent)
					{
						mainFormContent.setAttribute('collapsed', 'true');
						var button = this.getElementById('toggleMinimizeMaximizeButton');
						var image = button.getAttribute('image');
						image = image.substring(0, image.lastIndexOf('/')) + '/navigate_open.png';
						button.setAttribute('image', image);
					}
				]]></body>
			</method>

			<method name="maximize">
				<body><![CDATA[
					if (this.hasSubForm)
					{
						return;
					}
					var mainFormContent = this.getElementById('_mainFormContent_');
					if (mainFormContent)
					{
						mainFormContent.removeAttribute('collapsed');
						var button = this.getElementById('toggleMinimizeMaximizeButton');
						var image = button.getAttribute('image');
						image = image.substring(0, image.lastIndexOf('/')) + '/navigate_close.png';
						button.setAttribute('image', image);
						this.showFormHeaderButtons();
					}
				]]></body>
			</method>

			<method name="toggleMinimizeMaximize">
				<body><![CDATA[
					if (this.isMinimized)
					{
						this.maximize();
					}
					else
					{
						this.minimize();
					}
				]]></body>
			</method>

			<property name="isMinimized">
				<getter><![CDATA[
					return this.getElementById('_mainFormContent_').getAttribute('collapsed') == 'true';
				]]></getter>
			</property>

			<property name="isMaximized">
				<getter><![CDATA[
					return ! this.isMinimized;
				]]></getter>
			</property>


			<!-- Form buttons -->


			<method name="hideFormHeaderButtons">
				<body><![CDATA[
					this.getElementById('_formHeaderButtons_').setAttribute('collapsed', 'true');
				]]></body>
			</method>

			<method name="showFormHeaderButtons">
				<body><![CDATA[
					this.getElementById('_formHeaderButtons_').removeAttribute('collapsed');
				]]></body>
			</method>

			<!-- @deprecated use addOrUpdateDocument -->
			<method name="addNewlyCreatedDocument">
				<parameter name="destinationField" />
				<parameter name="e4x" />
				<body><![CDATA[
					if (destinationField != null)
					{
						var id = e4x.id.toString();
						var label = e4x.label.toString();
						var docXML = <document><component name="id">{id}</component><component name="label">{label}</component></document>;
						this.fields[destinationField].addDocument(docXML);
					}
				]]></body>
			</method>

			<!-- @deprecated use addOrUpdateDocument -->
			<method name="updateSelectedDocument">
				<parameter name="destinationField" />
				<parameter name="e4x" />
				<body><![CDATA[
					var id = e4x.id.toString();
					var label = e4x.label.toString();
					var docXML = <document><component name="id">{id}</component><component name="label">{label}</component></document>;
					this.fields[destinationField].updateDocument(docXML);
				]]></body>
			</method>

			<method name="addOrUpdateDocument">
				<parameter name="destinationField" />
				<parameter name="e4x" />
				<body><![CDATA[
					if (destinationField != null)
					{
						var id = e4x.id.toString();
						var label = e4x.label.toString();
						var docXML = <document><component name="id">{id}</component><component name="label">{label}</component></document>;
						
						// If there is already a document for this id, update it.
						if (this.fields[destinationField].hasDocument(id))
						{
							this.fields[destinationField].updateDocument(docXML);
						}
						// Else, add a new one.
						else
						{
							this.fields[destinationField].addDocument(docXML);
						}
					}
				]]></body>
			</method>

			<!-- Sub forms -->
			
			<field name="hasSubForm">false</field>
			
			<method name="isSubForm">
				<body><![CDATA[
					return (this.hasAttribute('parentFormId'));
				]]></body>
			</method>
			
			<method name="getParentForm">
				<body><![CDATA[
					if (this.isSubForm())
					{
						return document.getElementById(this.getAttribute('parentFormId'));
					}
					return null;
				]]></body>
			</method>	
			
			<!--
			Returns the sub-form used to edit/create a sub-document.
			If the sub form does not exist, it is created on the fly.
			-->
			<method name="getSubForm">
				<body><![CDATA[
					this.hasSubForm = true;
					var subForm = document.getElementById(this.id+'_subForm');
					if (!subForm)
					{
						var suffix = '_subForm';
						subForm = document.createElement('wform');
						subForm.setAttribute('id', this.id + suffix);
						subForm.setAttribute('anonid', this.getAttribute('anonid') + suffix);
						subForm.setAttribute('parent-id', this.getAttribute('parent-id'));
						if (!this.nextSibling)
						{
							this.parentNode.appendChild(subForm);
						}
						else
						{
							this.parentNode.insertBefore(subForm, this.nextSibling);
						}
					}
					subForm.removeAttribute('editcomponent');
					return subForm;
				]]></body>
			</method>
			

			
			<method name="onCloseSubForm">
			<body><![CDATA[
				if (this.isSubForm())
				{
					parentForm = this.getParentForm();
					this.removeAttribute('parentFormId');
					this.removeAttribute('parentFieldName');
					parentForm.hasSubForm = false;
					parentForm.maximize();
				}
			]]></body>
			</method>
			
			<method name="onSaveSubForm">
			<parameter name="e4x" />
			<body><![CDATA[
				if (this.isSubForm())
				{
					parentForm = this.getParentForm();
					parentForm.refreshAttachedWidget();
					parentForm.addOrUpdateDocument(this.getAttribute('parentFieldName'), e4x);
				}
			]]></body>
			</method>


			<!--
			Create and initialize the sub-form used to create a new sub-document.
			-->
			<method name="createSubDocument">
				<!-- may be null -->
				<parameter name="destinationField" />
				<parameter name="moduleName" />
				<parameter name="documentName" />
				<!-- optional -->
				<parameter name="parentId" />
				<body><![CDATA[
					try 
					{
						this.minimize();
						this.hideFormHeaderButtons();						
						var subForm = this.getSubForm();						
						subForm.setAttribute('parentFormId', this.id);
						subForm.setAttribute('parentFieldName', destinationField);
											
						if (parentId == null)
						{
							var testform = this;
							while (testform.isSubForm()) {testform = testform.getParentForm();}				
							parentId = testform.getAttribute('parent-id');
						}
						this.getModule().createDocumentWithParent(
							{id: parentId, lang: this.getAttribute('document-lang')},
							moduleName,
							documentName,
							subForm.getAttribute('anonid')
						);					
						return subForm;
					}
					catch (e)
					{
						wCore.error("createSubDocument", [destinationField, moduleName, documentName, parentId], e);
					}
				]]></body>
			</method>
			
			


			<!--
			Create and initialize the sub-form used to edit a sub-document.
			-->
			<method name="editSubDocument">
				<parameter name="destinationField" />
				<parameter name="moduleName" />
				<parameter name="documentName" />
				<parameter name="id" />
				<body><![CDATA[
					this.minimize();
					this.hideFormHeaderButtons();
					var subForm = this.getSubForm();
					subForm.setAttribute('parentFormId', this.id);
					subForm.setAttribute('parentFieldName', destinationField);
					
					var lang = this.getAttribute('document-lang');
					var doc = this.document;
					if (doc != null)
					{
						lang = doc.lang;
					}
					var editcomponentAttr =
						'<documents>'
						+ '<document>'
						+ '<component name="id">' + id + '</component>'
						+ '<component name="lang">' + lang + '</component>'
						+ '<component name="type">modules_' + moduleName + '_' + documentName + '</component>'
						+ '</document>'
						+ '</documents>';
					subForm.setAttribute('editcomponent', editcomponentAttr);
					subForm.handleBroadcast();
					return subForm;
				]]></body>
			</method>
		</implementation>


		<handlers>

			<handler event="keypress" modifiers="control" key="s" phase="capturing" preventdefault="true"><![CDATA[
				event.stopPropagation();
				if (this.isFormVisible())
				{
					this.submit();
				}
			]]></handler>

			<handler event="keypress" modifiers="control" keycode="VK_RETURN" phase="capturing" preventdefault="true"><![CDATA[
				event.stopPropagation();
				if (this.isFormVisible())
				{
					this.submit();
				}
			]]></handler>

			<handler event="keypress" keycode="VK_ESCAPE" phase="capturing" preventdefault="true"><![CDATA[
				event.stopPropagation();
				this.close();
			]]></handler>

			<handler event="keypress" modifiers="control" key="n" phase="capturing" preventdefault="true"><![CDATA[
				event.stopPropagation();
				this.createNew();
			]]></handler>

		</handlers>


	</binding>

</bindings>
