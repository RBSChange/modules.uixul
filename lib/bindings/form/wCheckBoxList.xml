<?xml version="1.0"?>
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<!--
################################################################################
## wCheckBoxList                                                              ##
################################################################################
-->

	<binding id="wCheckBoxList" extends="form.wListField#wListField">

		<implementation>

			<field name="_selectAllLabel">''</field>
			<field name="_selectNoneLabel">''</field>
			<field name="_selectAllNoneItem"></field>
			<field name="_allSelected">false</field>

			<property name="value">
				<getter><![CDATA[
					var value = [ ];
					var container = document.getAnonymousElementByAttribute(this, 'anonid', 'container');
					for (var i=0 ; i<container.childNodes.length ; i++)
					{
						var child = container.childNodes[i];
						if (child.tagName == 'checkbox' && child.checked && child.getAttribute('value') != this.SELECT_ALL_ITEM_VALUE)
						{
							value.push(child.getAttribute('value'));
						}
					}
					return value;
				]]></getter>
				<setter><![CDATA[
					this._block_events = true;
					var container = document.getAnonymousElementByAttribute(this, 'anonid', 'container');
					var nbItems = container.childNodes.length;
					for (var i=0 ; i<nbItems ; i++)
					{
						var item = container.childNodes[i];
						item.value = item.getAttribute('value');
						item.checked = false;
						if (typeof(val) == 'string' && item.value == val)
						{
							item.checked = true;
						}
						else if (typeof(val) == 'object')
						{
							for each (var j in val)
							{
								if (item.value == j)
								{
									item.checked = true;;
								}
							}
						}
					}
					this._block_events = false;
					this.list_changed();
					this.validate();
				]]></setter>
			</property>
			
			
			<property name="itemValue">
				<getter><![CDATA[
					var value = [ ];
					var container = document.getAnonymousElementByAttribute(this, 'anonid', 'container');
					for (var i=0 ; i<container.childNodes.length ; i++)
					{
						var child = container.childNodes[i];
						if (child.tagName == 'checkbox' && child.checked && child.getAttribute('value') != this.SELECT_ALL_ITEM_VALUE)
						{
							value.push(child.getAttribute("item-value"));
						}
					}
					return value;
				]]></getter>
			</property>
			
			
			<constructor><![CDATA[
			]]></constructor>
			
			
			<method name="doEmpty">
				<body><![CDATA[
					this._block_events = true;
					var container = document.getAnonymousElementByAttribute(this, 'anonid', 'container');
					var childCount = container.childNodes.length;
					for (var i=0 ; i<childCount ; i++)
					{
						var child = container.childNodes[0];
						if (child.tagName == 'checkbox')
						{
							container.removeChild(child);
						}
					}
					this._block_events = false;
					//this._selectAllNoneItem.setAttribute('value', this._selectAllLabel);
					this.validate();
					this.list_changed();
				]]></body>
			</method>

			<method name="addItem">
				<parameter name="value" />
				<parameter name="label" />
				<body><![CDATA[
					var container = document.getAnonymousElementByAttribute(this, 'anonid', 'container');
					var checkbox = document.createElement('checkbox');
					checkbox.setAttribute('label', label);
					checkbox.setAttribute('value', value);
					var _this = this;
					checkbox.addEventListener(
						'command',
						function()
						{
							if ( ! _this.block_events ) {
								_this.validate();
								_this.list_changed();
							}
						},
						false
						);
					if (container.childNodes.length > 0 && container.childNodes[container.childNodes.length-1].tagName == 'label')
					{
						container.insertBefore(checkbox, container.childNodes[0]);
					}
					else
					{
						container.appendChild(checkbox);
					}
					return checkbox;
				]]></body>
			</method>

			<method name="toggleSelection">
				<body><![CDATA[
					if (this._allSelected)
					{
						this.selectNone();
					}
					else
					{
						this.selectAll();
					}
				]]></body>
			</method>

			<method name="selectAll">
				<body><![CDATA[
					this._block_events = true;
					var container = document.getAnonymousElementByAttribute(this, 'anonid', 'container');
					for (var i=0 ; i<container.childNodes.length ; i++)
					{
						var child = container.childNodes[i];
						if (child.tagName == 'checkbox')
						{
							child.checked = true;
						}
					}
					this._block_events = false;
					this._selectAllNoneItem.setAttribute('value', this._selectNoneLabel);
					this.validate();
					this.list_changed();
					this._allSelected = true;
				]]></body>
			</method>

			<method name="selectNone">
				<body><![CDATA[
					this._block_events = true;
					var container = document.getAnonymousElementByAttribute(this, 'anonid', 'container');
					for (var i=0 ; i<container.childNodes.length ; i++)
					{
						var child = container.childNodes[i];
						if (child.tagName == 'checkbox')
						{
							child.checked = false;
						}
					}
					this._block_events = false;
					this._selectAllNoneItem.setAttribute('value', this._selectAllLabel);
					this.validate();
					this.list_changed();
					this._allSelected = false;
				]]></body>
			</method>
			
			
			<method name="removeAllItems">
				<body><![CDATA[
					var container = document.getAnonymousElementByAttribute(this, 'anonid', 'container');
					while (container.lastChild)
					{
						container.removeChild(container.lastChild);
					}
					this.setup_default_items();
				]]></body>
			</method>			

		</implementation>


		<handlers>
			<handler event="keypress" modifiers="control" key="a" preventDefault="true"><![CDATA[
				this.selectAll();
			]]></handler>
		</handlers>

		
		<xbl:content
			xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
			xmlns:xbl="http://www.mozilla.org/xbl">
			<hbox align="start" flex="1" xbl:inherits="flex">
				<box orient="vertical" xbl:inherits="orient" anonid="container" />
				<xbl:children />
			</hbox>
		</xbl:content>

	</binding>

</bindings>