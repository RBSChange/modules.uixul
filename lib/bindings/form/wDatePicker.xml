<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
          xmlns:xbl="http://www.mozilla.org/xbl">

<binding id="wDatePicker" extends="form.wFormField#wFormField">

	<resources>
		<stylesheet src="modules.uixul.wDatePicker" />
	</resources>

	<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
				xmlns:xbl="http://www.mozilla.org/xbl">

	<vbox align="start">
		<hbox>
			<wtextbox anonid="dateText" xbl:inherits="disabled,required,readonly" size="11" maxlength="15" show-indicator="false">
				<constraint name="isLocalizedDate"><![CDATA[&modules.uixul.bo.datePicker.Calendar.dataWriterFormat;]]></constraint>
				<xbl:children includes="constraint" />
			</wtextbox>
			<wsuggestionbutton anonid="suggestionInputField" class="suggestionInputFieldForDatePicker"/>
			<hbox class="wDatePickerPopupButton">
				<toolbarbutton anonid="calendarPopupButton" xbl:inherits="hidden=disabled,disabled=readonly" image="{IconsBase}/small/shadow/calendar_31.png" tooltiptext="&amp;modules.uixul.bo.datePicker.Calendar.SelectDateEllipsis;" position="after_start"/>
				<toolbarbutton anonid="todayButton" xbl:inherits="hidden=disabled,disabled=readonly" image="{IconsBase}/small/shadow/calendar_1.png" tooltiptext="&amp;modules.uixul.bo.datePicker.Calendar.Today;" onclick="getTodayDate()"/>
				<spacer flex="1"/>
			</hbox>
			<xbl:children includes="whelp" />
		</hbox>
		<label anonid="message" width="160px"/>
		<textbox anonid="inputField" readonly="true" hidden="true"/>
	</vbox>

	<popup anonid="calendarPanelPopup" class="datePickerPopupBox" position="before_start" onpopupshown="setDateAfterPopupOpen();">
		<vbox anonid="datePickerPopupBox" style="background:#FFF">
			<!-- Year controls -->
			<hbox anonid="datePickerYearControlsBox" class="datePickerStatusBox" style="font-size: 12px;" align="center">
				<image src="{IconsBase}/small/shadow/calendar_1.png" style="visibility: hidden; margin-left: 2px;" />
				<spacer flex="1" />
				<image src="{IconsBase}/small/shadow/arrow_left_green.png" tooltiptext="&amp;modules.uixul.bo.datePicker.Calendar.PreviousYear;" anonid="datePickerYearPreviousButton" onclick="getPreviousYear()"/>
				<spacer flex="1" />
				<label anonid="datePickerYearTitleText"/>
				<spacer flex="1" />
				<image src="{IconsBase}/small/shadow/arrow_right_green.png" tooltiptext="&amp;modules.uixul.bo.datePicker.Calendar.NextYear;" anonid="datePickerYearNextButton" onclick="getNextYear()" />
				<spacer flex="1" />
				<image src="{IconsBase}/small/shadow/calendar_1.png" tooltiptext="&amp;modules.uixul.bo.datePicker.Calendar.Today;" anonid="datePickerTodayBox" onclick="getTodayDate()" style="margin-right: 2px;" />
			</hbox>
			<!-- Year controls -->
			<!-- Month grid -->
			<box anonid="datePickerMonthGrid" style="text-align: center;">
				<grid flex="1">
					<columns >
						<column />
						<column />
						<column />
						<column />
					</columns>
					<rows>
						<row style="border-bottom: 1px solid #ded">
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month1" onclick='clickMonth( this, 1)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.January;</label>
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month2" onclick='clickMonth( this, 2)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.February;</label>
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month3" onclick='clickMonth( this, 3)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.March;</label>
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month4" onclick='clickMonth( this, 4)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.April;</label>
							<spacer flex="1" />
							</hbox>
						</row>
						<row style="border-bottom: 1px solid #ded">
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month5" onclick='clickMonth( this, 5)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.May;</label>
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month6" onclick='clickMonth( this, 6)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.June;</label>
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month7" onclick='clickMonth( this, 7)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.July;</label>
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month8" onclick='clickMonth( this, 8)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.August;</label>
							<spacer flex="1" />
							</hbox>
						</row>
						<row>
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month9" onclick='clickMonth( this, 9)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.September;</label>
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month10" onclick='clickMonth( this, 10)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.October;</label>
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month11" onclick='clickMonth( this, 11)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.November;</label>
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 55px;">
							<spacer flex="1" />
							<label class='DatePickerMonth' anonid="month12" onclick='clickMonth( this, 12)'>&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.December;</label>
							<spacer flex="1" />
							</hbox>
						</row>
					</rows>
				</grid>
			</box>
			<!-- Month grid -->
			<!-- Day grid : day of week -->
			<box anonid="datePickerWeekDayGrid" class="datePickerStatusBox" style="text-align:center">
				<grid>
					<columns>
						<column />
						<column />
						<column />
						<column />
						<column />
						<column />
						<column />
					</columns>
					<rows>
						<row>
							<label class="DatePickerDayLetter" anonid="weekDay1" >&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.Monday;</label>
							<label class="DatePickerDayLetter" anonid="weekDay2" >&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.Tuesday;</label>
							<label class="DatePickerDayLetter" anonid="weekDay3" >&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.Wednesday;</label>
							<label class="DatePickerDayLetter" anonid="weekDay4" >&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.Thursday;</label>
							<label class="DatePickerDayLetter" anonid="weekDay5" >&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.Friday;</label>
							<label class="DatePickerDayLetter" anonid="weekDay6" >&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.Saturday;</label>
							<label class="DatePickerDayLetter" anonid="weekDay7" >&amp;modules.uixul.bo.datePicker.Calendar.Abbreviation.Sunday;</label>
						</row>
					</rows>
				</grid>
			</box>
			<!-- Day grid : day of week-->
			<!-- Day grid : day in number -->
			<box anonid="datePickerNumberDayGrid">
				<grid>
					<columns>
						<column />
						<column />
						<column />
						<column />
						<column />
						<column />
						<column />
					</columns>
					<rows>
						<row style="border-bottom: 1px solid #ded;">
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay1" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay2" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay3" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay4" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay5" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay6" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay7" />
							<spacer flex="1" />
							</hbox>
						</row>
						<row style="border-bottom: 1px solid #ded">
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay8" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay9" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay10" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay11" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay12" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay13" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay14" />
							<spacer flex="1" />
							</hbox>
						</row>
						<row style="border-bottom: 1px solid #ded">
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay15" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay16" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay17" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay18" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay19" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay20" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay21" />
							<spacer flex="1" />
							</hbox>
						</row>
						<row style="border-bottom: 1px solid #ded">
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay22" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay23" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay24" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay25" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay26" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay27" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay28" />
							<spacer flex="1" />
							</hbox>
						</row>
						<row style="border-bottom: 1px solid #ded">
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay29" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay30" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay31" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay32" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay33" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay34" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay35" />
							<spacer flex="1" />
							</hbox>
						</row>
						<row>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay36" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay37" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay38" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay39" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay40" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay41" />
							<spacer flex="1" />
							</hbox>
							<hbox style="min-width: 32px;">
							<spacer flex="1" />
							<label anonid="numberDay42" />
							<spacer flex="1" />
							</hbox>
						</row>
					</rows>
				</grid>
			</box>
			<!-- Day grid : day in number -->
			<!-- Today controls -->
			<box anonid="datePickerStatusBox" class="datePickerStatusBox">
				<spacer flex="1" />
				<label anonid="datePickerStatus" value="" />
				<spacer flex="1" />
			</box>
			<!-- Today controls -->
		</vbox>
	</popup>

	</xbl:content>

	<implementation>

		<field name="gOriginalDate">null</field>
		<field name="gSelectedDate">null</field>
		<field name="gPopupDate">null</field>

		<field name="gSelectedMonthItem">null</field>
		<field name="gSelectedDayItem">null</field>

		<!--
		Get the value of the datePicker
		-->
		<property name="value">
	 		<getter>
	 		return this.input_field.value;
	 		</getter>

	 		<setter>
	 		<![CDATA[
	 			var date = this.transformDateServerStringToObject(val);
				this.setDate(date);
				this.validate();
		 	]]>
	 		</setter>
	 	</property>

		<property name="readonly">
			<getter><![CDATA[
				return this.getAttribute('readonly') == 'true' ? true : false;
			]]></getter>
			<setter><![CDATA[
				if (val)
				{
					this.setAttribute('readonly', 'true');
					this.getElementById('calendarPopupButton').removeAttribute('popup');
				}
				else
				{
					this.removeAttribute('readonly');
					this.getElementById('calendarPopupButton').setAttribute('popup', this.name + 'popup');
				}
			]]></setter>
		</property>

		<!--
		Global initialization of the field.
		-->
		<method name="initialize"
			doc-text="Global initialization of the field."
			doc-access="private"
			doc-overridable="true">
			<body><![CDATA[
			/* Init the popup */
			var popupId = this.name + "_" + this.form.id + "_" + this.form.documentModelName + '_datepicker_popup';
			this.getElementById('calendarPanelPopup').setAttribute('id', popupId);
			if (!this.readonly)
			{
				this.getElementById('calendarPopupButton').setAttribute('popup', popupId);
			}

			/* Init the current date */
			this.gOriginalDate = new Date();

			this.setDateAfterPopupOpen();
			this.validate();
			]]></body>
		</method>

		<!--
		When date picker isn't required and this is empty, date is valided
		-->
		<method name="doValidate">
			<body><![CDATA[
				var dateField = this.getElementById("dateText");
				if (this.required && dateField.value == '')
				{
					return false;
				}
				else if (!this.required && dateField.value == '')
				{
					return true;
				}
				return dateField.validate();
			]]></body>
		</method>

		<method name="onValidateSuccess">
			<body>
			<![CDATA[
				this.setInfos();
				this.setAttribute('validates', 'true');
			]]>
			</body>
		</method>

		<!--
		When date picker isn't valid, call method to reset datepicker informations
		-->
		<method name="onValidateError">
			<body>
			<![CDATA[
				this.resetInfos();
				this.setAttribute('validates', 'false');
			]]>
			</body>
		</method>

		<!--
		Set informations of datepicker. This method must be called on a valide date
		-->
		<method name="setInfos">
			<body>
			<![CDATA[
				var date = this.getDate()
				if ( date == null )
				{
					this.setMessage('&modules.uixul.bo.datePicker.Calendar.NoDate;');
					this.gSelectedDate = null;
				}
				else
				{
					this.gSelectedDate = date.clone();
					this.setMessage(this.dateFormater('&modules.uixul.bo.datePicker.Calendar.userFormat;', this.gSelectedDate));
				}
				this.setSystemField(this.gSelectedDate);
			]]>
			</body>
		</method>

		<!--
		Reset informations of datepicker. This method must be called on a not valide date
		-->
		<method name="resetInfos">
			<body>
			<![CDATA[
				this.setMessage("&modules.uixul.bo.datePicker.Calendar.Message.textBoxWriter;");
				this.gSelectedDate = null;
				this.setSystemField(this.gSelectedDate);
			]]>
			</body>
		</method>

		<!--
		Write the message in label named 'message'
		-->
		<method name="setMessage">
			<parameter name="message" />
			<body>
			<![CDATA[
				this.getElementById("message").value = message;
			]]>
			</body>
		</method>

		<!--
		Write date in fields for date system. If date = null delete information in field
		-->
		<method name="setSystemField">
			<parameter name="date" />
			<body>
			<![CDATA[
				var systemField = this.getElementById('inputField');
				if ( date == null )
				{
					systemField.value = '';
				}
				else
				{
					var pickedDate = date.clone();
					if (this.hasAttribute("enddate") && this.getAttribute("enddate") == "true")
					{
						pickedDate.setHours(23);
						pickedDate.setMinutes(59);
						pickedDate.setSeconds(59);
					}
					systemField.value = this.dateFormater('&modules.uixul.bo.datePicker.Calendar.dataBaseTimeFormat;', pickedDate);
				}
			]]>
			</body>
		</method>

		<!--
		Get wrotten date object
		-->
		<method name="getDate">
			<body>
			<![CDATA[
				var value = this.getElementById('dateText').value;
				if ( value == '' )
				{
					return null;
				}
				else
				{
					return this.transformDateStringToObject(value, '&modules.uixul.bo.datePicker.Calendar.dataWriterFormat;');
				}
			]]>
			</body>
		</method>

		<!--
		Set an date object in field dateText
		-->
		<method name="setDate">
			<parameter name="date" />
			<body>
			<![CDATA[
				var dateTextElement = this.getElementById('dateText');
				if ( date == null )
				{
					dateTextElement.value = '';
				}
				else
				{
					dateTextElement.value = this.dateFormater('&modules.uixul.bo.datePicker.Calendar.dataWriterFormat;', date);
				}
				this.raiseChangeEvent();
			]]>
			</body>
		</method>

		<!--
		Transform the string date in server format in an javascript date object
		-->
		<method name="transformDateServerStringToObject">
			<parameter name="dateString" />
			<body>
			<![CDATA[
				return this.transformDateStringToObject(dateString, '&modules.uixul.bo.datePicker.Calendar.dataBaseTimeFormat;');
			]]>
			</body>
		</method>

		<!--
		Transform a string 'dateWriter' in object using format to cut the string
		-->
		<method name="transformDateStringToObject">
			<parameter name="dateWriter" />
			<parameter name="format" />
			<body>
			<![CDATA[
			var year;
			var month;
			var day;
			var hour = 0;
			var minute = 0;
			var second = 0;
			var valuePosition = 0;

			for (var i=0; i<format.length; i++)
			{

				switch (format[i])
				{

					case 'd' :
						day = Number( dateWriter.substring( valuePosition, valuePosition + 2 ) );
						valuePosition = valuePosition + 2;
						break;

					case 'j' :
						if( ! isNaN( dateWriter.substring( valuePosition, valuePosition + 2 ) ) )
						{
							day = Number( dateWriter.substring( valuePosition, valuePosition + 2 ) );
							valuePosition = valuePosition + 2;
						}
						else
						{
							day = Number( dateWriter.substring( valuePosition, valuePosition + 1 ) );
							valuePosition = valuePosition + 1;
						}
						break;

					case 'm' :
						month = Number( dateWriter.substring( valuePosition, valuePosition + 2 ) ) - 1;
						valuePosition = valuePosition + 2;
						break;

					case 'n' :
						if( ! isNaN( dateWriter.substring( valuePosition, valuePosition + 2 ) ) )
						{
							month = Number( dateWriter.substring( valuePosition, valuePosition + 2 ) ) - 1;
							valuePosition = valuePosition + 2;
						}
						else
						{
							month = Number( dateWriter.substring( valuePosition, valuePosition + 1 ) ) - 1;
							valuePosition = valuePosition + 1;
						}
						break;

					case 'Y' :
						year = Number( dateWriter.substring( valuePosition, valuePosition + 4 ) );
						valuePosition = valuePosition + 4;
						break;

					case 'y' :
						year = Number( dateWriter.substring( valuePosition, valuePosition + 2 ) );
						valuePosition = valuePosition + 2;
						break;

					case 'H' :
						hour = Number( dateWriter.substring( valuePosition, valuePosition + 2 ) );
						valuePosition = valuePosition + 2;
						break;

					case 'i' :
						minute = Number( dateWriter.substring( valuePosition, valuePosition + 2 ) );
						valuePosition = valuePosition + 2;
						break;

					case 's' :
						second = Number( dateWriter.substring( valuePosition, valuePosition + 2 ) );
						valuePosition = valuePosition + 2;
						break;

					default :
						valuePosition = valuePosition + 1;

				}

			}

			if (
				(year == 0 || year == -1) &&
				(month == 0 || month == -1) &&
				(day == 0 || day == -1)
				)
			{
				return null;
			}
			else
			{
				return new Date(year, month, day, hour, minute, second);
			}
			]]>
			</body>
		</method>

		<!--
		Clears the form in order to create new element.
		-->
		<method name="doEmpty">
			<body>
			<![CDATA[
				this.gSelectedDate = null;
				this.getElementById('dateText').value="";
				this.validate();
			]]>
			</body>
		</method>

		<!--
			Update the fields in popup
		-->
		<method name="setDateAfterPopupOpen">
		<body>
			<![CDATA[
			if ( this.gSelectedDate != null )
			{
				this.gPopupDate = this.gSelectedDate.clone();
			}
			else
			{
				this.gPopupDate = this.gOriginalDate.clone();
			}

			this.getElementById('datePickerYearTitleText').value = this.gPopupDate.getFullYear();

			this.selectCurrentMonth();
			this.redrawDay();
			this.writeInStatusBar(null);
			]]>
			</body>
		</method>

		<method name="selectCurrentMonth">
			<body>
			<![CDATA[
			var month = this.gPopupDate.getMonth() + 1;

			var monthSelectedElement = this.getElementById('month'+month);

			this.selectMonthItem( monthSelectedElement );
			]]>
			</body>
		</method>

		<method name="selectMonthItem">
			<parameter name="newMonthItem" />
			<body>
			<![CDATA[
			// clear old selection, if there is one
			if( this.gSelectedMonthItem != null )
			{
				this.gSelectedMonthItem.setAttribute( "selected" , "false" );
			}

			// Set the selected attribute, used to give it a different style
			if (newMonthItem)
			{
				newMonthItem.setAttribute( "selected" , "true" );
			}

			// Remember new selection
			this.gSelectedMonthItem = newMonthItem;
			]]>
			</body>
		</method>

		<method name="redrawDay">
			<body>
			<![CDATA[
			// Write in all the day numbers

			// Get info on the day, month, year
			var firstDate = new Date( this.gPopupDate.getFullYear(), this.gPopupDate.getMonth(), 1 );
			if (firstDate.getDay() == 0)
			{
				var firstDayOfWeek = firstDate.getDay()+6;
			}
			else
			{
				var firstDayOfWeek = firstDate.getDay()-1;
			}

			var now = new Date();

			var lastDayOfMonth = this.getLastDayOfMonth( this.gPopupDate.getFullYear(), this.gPopupDate.getMonth() )

			// clear the selected day item
			this.selectDayItem( null );

			// current month bg
			for( var monthIndex = 0; monthIndex < 12; ++monthIndex )
		        {
				var monthElement = this.getElementById('month' + (monthIndex + 1));
				monthElement.parentNode.style.background = "transparent";
				if ((this.gPopupDate.getFullYear() == now.getFullYear()) && (monthIndex == now.getMonth()))
				{
					monthElement.parentNode.style.background = "#f8f8f8";
				}
			}

			// redraw each day bax in the 7 x 6 grid
			var dayNumber = 1;
			for( var dayIndex = 0; dayIndex < 42; ++dayIndex )
			{
				// get the day box
				var dayNumberElement = this.getElementById('numberDay' + (dayIndex + 1));

				var _this = this;
				if (dayNumberElement)
				{
					var clickOnListener = {
						xbl: this,
						day: dayIndex + 1,
						handleEvent: function (evt)
						{
							this.xbl.clickDay(this.day);
						}
					};                    
                    dayNumberElement.addEventListener('click', clickOnListener, true);                    
				    var passOnListener = {
						xbl: this,
						day: dayIndex + 1,
						handleEvent: function (evt)
						{
							this.xbl.passOnDay(this.day);
						}
					};
                    dayNumberElement.addEventListener('mouseover', passOnListener, true);                    
				    dayNumberElement.setAttribute('class','DatePickerDayNumeric');

    				if (dayIndex == 5 || dayIndex == 12 || dayIndex == 19 || dayIndex == 26 || dayIndex == 33 || dayIndex == 40 || dayIndex == 6 || dayIndex == 13 || dayIndex == 20 || dayIndex == 27 || dayIndex == 34 || dayIndex == 41 )
    				{
    					dayNumberElement.setAttribute('class','DatePickerDayNumericWeekend');
    				}

    				// if it is an unfilled day ( before first or after last ), just set its value to "",
    				// and don't increment the day number.
				dayNumberElement.parentNode.style.background = "transparent";
    				if( dayIndex < firstDayOfWeek || dayNumber > lastDayOfMonth )
    				{
    					dayNumberElement.setAttribute( "value" , "" );
    					dayNumberElement.setAttribute( "disabled" , "true" );
    				}
    				else
    				{
					if ((this.gPopupDate.getFullYear() == now.getFullYear()) && (this.gPopupDate.getMonth() == now.getMonth()) && (dayNumber == now.getDate()))
					{
						dayNumberElement.parentNode.style.background = "#f8f8f8";
					}
    					// set the value to the day number

    					dayNumberElement.setAttribute( "value" , dayNumber );
    					dayNumberElement.setAttribute( "disabled" , "false" );

    					// draw the day as selected
    					if( dayNumber == this.gPopupDate.getDate() )
    					{
    						this.selectDayItem( dayNumberElement );
    					}

    					// advance the day number
    					++dayNumber;
    				}
    		    }
			}
			]]>
			</body>
		</method>

		<method name="getLastDayOfMonth">
			<parameter name="year" />
			<parameter name="month" />
			<body>
			<![CDATA[
			var pastLastDate = new Date( year, month, 32 );
			var lastDayOfMonth = 32 - pastLastDate.getDate();
			return lastDayOfMonth;
			]]>
			</body>
		</method>

		<method name="selectDayItem">
			<parameter name="newDayItem" />
			<body>
			<![CDATA[
			// clear old selection, if there is one
			if( this.gSelectedDayItem != null )
			{
				this.gSelectedDayItem.setAttribute( "selected" , "false" );
			}

			if( newDayItem != null )
			{
				// Set the selected attribute, used to give it a different style
				newDayItem.setAttribute( "selected" , "true" );
			}

			// Remember new selection
			this.gSelectedDayItem = newDayItem;
			]]>
			</body>
		</method>

		<method name="clickMonth">
			<parameter name="newMonthItem" />
			<parameter name="newMonthNumber" />
			<body>
			<![CDATA[
			/* If the selected date is not defined */
			// already selected, return
			if( this.gSelectedMonthItem == newMonthItem )
			{
				return;
			}

			var oldDate = this.gPopupDate.getDate();
			var yearNumber = this.gPopupDate.getFullYear();

			var lastDayOfMonth = this.getLastDayOfMonth( yearNumber, newMonthNumber-1 );

			if ( oldDate > lastDayOfMonth )
			{
				this.gPopupDate.setDate(lastDayOfMonth);
			}

			// update the selected date
			this.gPopupDate.setMonth( newMonthNumber - 1 );

			// select Month
			this.selectMonthItem( newMonthItem );

			// redraw days
			this.redrawDay();

			// this.writeADateFromPopupToTextBox();
			]]>
			</body>
		</method>

		<method name="clickDay">
			<parameter name="day" />
			<body>
			<![CDATA[
			// get the clicked day
			var dayNumberElement = this.getElementById('numberDay' + day);
			if (dayNumberElement)
			{
				var dayNumber = dayNumberElement.value;
	
				// they may have clicked an unfilled day, if so ignore it and leave the picker up
				if( dayNumber != "" )
				{
					// set the selected date to what they cliked on
					this.gPopupDate.setDate( dayNumber );
					this.getElementById('calendarPanelPopup').hidePopup();
					this.writeADateFromPopupToTextBox();
				}
			}
			]]>
			</body>
		</method>

		<!-- Set info of year  -->

	 	<method name="getPreviousYear">
			<body>
			<![CDATA[
			var oldYear = this.gPopupDate.getFullYear();
			this.gPopupDate.setFullYear( oldYear - 1 );

			this.getElementById('datePickerYearTitleText').value = this.gPopupDate.getFullYear();

			// Redraw day
			this.redrawDay();

			// Select the new month, it's necessary because :
			// Exemple: 29 february 2004 => 1 march 2005
			this.selectCurrentMonth();

			// this.writeADateFromPopupToTextBox();
			]]>
			</body>
		</method>

		<method name="getNextYear">
			<body>
			<![CDATA[
			var oldYear = this.gPopupDate.getFullYear();
			this.gPopupDate.setFullYear( oldYear + 1 );

			this.getElementById('datePickerYearTitleText').value = this.gPopupDate.getFullYear();

			// Redraw day
			this.redrawDay();

			// Select the new month, it's necessary because :
			// Exemple: 29 february 2004 => 1 march 2003
			this.selectCurrentMonth();

			// this.writeADateFromPopupToTextBox();
			]]>
			</body>
		</method>

		<!-- Set info of year  -->

		<method name="passOnDay">
			<parameter name="day" />
			<body>
			<![CDATA[
			// Get the day
			var dayNumberElement = this.getElementById('numberDay' + day);
			if (dayNumberElement)
			{
				var dayNumber = dayNumberElement.value;
	
				if( dayNumber != "" )
				{
					// Get the current date
					var tmpDate = this.gPopupDate.clone();
					tmpDate.setDate( dayNumber );
	
					// Display date on status bar
					this.writeInStatusBar(this.dateFormater('&modules.uixul.bo.datePicker.Calendar.userFormat;',tmpDate));
				}
				else
				{
					// Empty status bar
					this.writeInStatusBar(null);
				}
			}
			else
			{
				// Empty status bar
				this.writeInStatusBar(null);
			}
			]]>
			</body>
		</method>

		<method name="writeInStatusBar">
		<parameter name="text" />
			<body>
			<![CDATA[
				var statusBar = this.getElementById("datePickerStatus");
				if ( text != null )
				{
					statusBar.setAttribute( "value" , text);
				}
				else
				{
					statusBar.setAttribute( "value" , "");
				}
			]]>
			</body>
		</method>

		<!-- Date Formater  -->
	 	<method name="dateFormater">
	 		<parameter name="format" />
	 		<parameter name="date" />
			<body>
			<![CDATA[
			/* Declare array with name of day or month */
			var arrayDay = new Array(
			'&modules.uixul.bo.datePicker.Calendar.Sunday;',
			'&modules.uixul.bo.datePicker.Calendar.Monday;',
			'&modules.uixul.bo.datePicker.Calendar.Tuesday;',
			'&modules.uixul.bo.datePicker.Calendar.Wednesday;',
			'&modules.uixul.bo.datePicker.Calendar.Thursday;',
			'&modules.uixul.bo.datePicker.Calendar.Friday;',
			'&modules.uixul.bo.datePicker.Calendar.Saturday;');

			var arrayDayAbbrev = new Array(
			'&modules.uixul.bo.datePicker.Calendar.Abbreviation.Sunday;',
			'&modules.uixul.bo.datePicker.Calendar.Abbreviation.Monday;',
			'&modules.uixul.bo.datePicker.Calendar.Abbreviation.Tuesday;',
			'&modules.uixul.bo.datePicker.Calendar.Abbreviation.Wednesday;',
			'&modules.uixul.bo.datePicker.Calendar.Abbreviation.Thursday;',
			'&modules.uixul.bo.datePicker.Calendar.Abbreviation.Friday;',
			'&modules.uixul.bo.datePicker.Calendar.Abbreviation.Saturday;');

			var arrayMonth = new Array(
			 '&modules.uixul.bo.datePicker.Calendar.January;',
			 '&modules.uixul.bo.datePicker.Calendar.February;',
			 '&modules.uixul.bo.datePicker.Calendar.March;',
			 '&modules.uixul.bo.datePicker.Calendar.April;',
			 '&modules.uixul.bo.datePicker.Calendar.May;',
			 '&modules.uixul.bo.datePicker.Calendar.June;',
			 '&modules.uixul.bo.datePicker.Calendar.July;',
			 '&modules.uixul.bo.datePicker.Calendar.August;',
			 '&modules.uixul.bo.datePicker.Calendar.September;',
			 '&modules.uixul.bo.datePicker.Calendar.October;',
			 '&modules.uixul.bo.datePicker.Calendar.November;',
			 '&modules.uixul.bo.datePicker.Calendar.December;');

			var arrayMonthAbbrev = new Array(
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.January;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.February;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.March;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.April;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.May;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.June;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.July;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.August;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.September;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.October;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.November;',
			 '&modules.uixul.bo.datePicker.Calendar.Abbreviation.December;');

			var resultFormat = "";

			for (i=0; i< format.length; i++)
			{

				switch(format[i]){

				case 'j':
					resultFormat = resultFormat+date.getDate();
				break;

				case 'l':
					resultFormat = resultFormat+arrayDay[date.getDay()];
				break;

				case 'D':
					resultFormat = resultFormat+arrayDayAbbrev[date.getDay()];
				break;

				case 'F':
					resultFormat = resultFormat+arrayMonth[date.getMonth()];
				break;

				case 'M':
					resultFormat = resultFormat+arrayMonthAbbrev[date.getMonth()];
				break;

				case 'n':
					resultFormat = resultFormat+(date.getMonth()+1);
				break;

				case 'Y':
					resultFormat = resultFormat+date.getFullYear();
				break;

				case 'm':
					resultFormat = resultFormat+this.StringFormaterToTwoDigits(date.getMonth()+1);
				break;

				case 'd':
					resultFormat = resultFormat+this.StringFormaterToTwoDigits(date.getDate());
				break;

				case 'S':
					resultFormat = resultFormat+this.suffixFormater();
				break;

				case 'H':
					resultFormat = resultFormat+this.StringFormaterToTwoDigits(date.getHours());
				break;

				case 'i':
					resultFormat = resultFormat+this.StringFormaterToTwoDigits(date.getMinutes());
				break;

				case 's':
					//resultFormat = resultFormat+"00";
					resultFormat = resultFormat+this.StringFormaterToTwoDigits(date.getSeconds());
				break;

				default:
					resultFormat = resultFormat+format[i];
				break;

				}
			}

			return resultFormat;
			]]>
			</body>
		</method>

		<method name="StringFormaterToTwoDigits">
	 		<parameter name="string" />
			<body>
			<![CDATA[
			if (string >= 0 && string <= 9)
			{
				return '0'+string;
			}
			return string;
	 		]]>
			</body>
		</method>

		<method name="suffixFormater">
	 		<parameter name="day" />
			<body>
			<![CDATA[
			if (day == 1 || day == 21 || day == 31 )
			{
				return 'st';
			}
			if (day == 2 || day == 22 )
			{
				return 'nd';
			}
			if (day == 3 || day == 23 )
			{
				return 'rd';
			}
			return 'th';
	 		]]>
			</body>
		</method>

	 	<!-- Date Formater  -->

		<!-- Set info of today  -->
		<method name="getTodayDate">
			<body>
			<![CDATA[
			// Close popup
			this.getElementById('calendarPanelPopup').hidePopup();

			// Select today date
			this.gPopupDate = new Date();

			this.writeADateFromPopupToTextBox();
			]]>
			</body>
		</method>
		<!-- Set info of today  -->

	 	<method name="writeADateFromPopupToTextBox">
			<body>
			<![CDATA[
				this.setDate(this.gPopupDate);
				this.validate();
			]]>
			</body>
		</method>

		<!-- Format date for form suggestion menu -->
		<method name="formatForSuggestionMenu">
			<parameter name="value" />
			<body>
			<![CDATA[
			    return this.dateFormater('&modules.uixul.bo.datePicker.Calendar.userFormat;', this.transformDateServerStringToObject(value));
			]]>
			</body>
		</method>

		<!-- Format date for form suggestion view -->
		<method name="formatForSuggestionView">
			<parameter name="value" />
			<body>
			<![CDATA[
			    return this.dateFormater('&modules.uixul.bo.datePicker.Calendar.dataWriterFormat;', this.transformDateServerStringToObject(value));
			]]>
			</body>
		</method>

	</implementation>

  </binding>

</bindings>
