<?xml version="1.0"?>
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<!--
################################################################################
## wOrderableListBox                                                          ##
################################################################################
-->

	<binding id="wOrderableListBox" extends="core.wBox#wBox">

		<implementation>

			<field name="ITEM_TAG_NAME" readonly="true">'wlistitem'</field>

<!--
			<field name="dragSessionObject"><![CDATA[
				({
					startRow : null,
					currentRow : null,
					isActive : false,

					// start a drag session
					start : function(row) {
						this.startRow = row;  // store the clicked row
						this.isActive = true; // indicate the session is active
					},

					// stop the current session
					stop : function() {
						this.isActive = false;
						this.currentRow = null;
					},

					// do the work!
					run : function(row) {
						if (this.isActive == true) {
							if (this.currentRow != row) {
								this.currentRow = row;
								var offset = this.currentRow - this.startRow;
								this.startRow = this.currentRow;
								return offset;
							}
						}
						return null;
					}
				})
			]]></field>
-->

			<property name="container">
				<getter><![CDATA[
					return this.getElementById('tree');
				]]></getter>
			</property>


			<property name="input_field">
				<getter><![CDATA[
					return this.getElementById('tree');
				]]></getter>
			</property>


			<property name="value">
				<getter><![CDATA[
					var values = [];
					for (var i=0 ; i<this.nbItems ; i++) {
						var id = this.container.childNodes[i + 1].childNodes[0].getAttribute('label');
						values.push(id);
					}
					return values;
				]]></getter>
				<setter><![CDATA[
					// re-order the items according to val
				]]></setter>
			</property>


<!--
Returns the number of items in the list.
-->
			<property name="nbItems" readonly="true">
				<getter><![CDATA[
					var nb = 0;
					for (var i=0 ; i<this.input_field.childNodes.length ; i++)
					{
						var child = this.input_field.childNodes[i];
						if (child.tagName == 'listitem' || child.tagName == 'xul:listitem')
						{
							nb++;
						}
					}
					return nb;
				]]></getter>
			</property>


<!--
Note that the constructor of the parent binding(s) is(are) called.
-->
			<constructor><![CDATA[
				// If there are less than 3 rows, change the orientation of the
				// buttons bar for a nicer display.
				if (parseInt(this.getAttribute('rows')) < 3)
				{
					this.getElementById('buttonsBar').setAttribute('orient', 'horizontal');
					this.getElementById('buttonsBar').setAttribute('align', 'center');
				}
				this.setup_items();
			]]></constructor>


<!--
Parses the <wlistitem/> children and add items in the list consequently.
@access protected
-->
			<method name="setup_items">
				<body><![CDATA[
					var children = this.childNodes;
					for (var i=0 ; i<children.length ; i++)
					{
						if (children[i].tagName == this.ITEM_TAG_NAME)
						{
							var value = children[i].getAttribute('value');
							var label = children[i].getAttribute('label');
							this.addItem(value, label);
						}
					}
				]]></body>
			</method>


<!--
Called by the buildContent() method (in a parent binding): code to add an option to the list.
Position is not handled (for the moment?).
-->
			<method name="addItem">
				<parameter name="value" />
				<parameter name="label" />
				<parameter name="icon" />
				<body><![CDATA[
					var item = document.createElement('listitem');

					var cell = document.createElement('listcell');
					cell.setAttribute('label', value);
					cell.setAttribute('hidden', 'true');
					item.appendChild(cell);

					var cell = document.createElement('listcell');
					cell.setAttribute('label', label);
					cell.setAttribute('tooltiptext', value);

					if (icon && icon.length)
					{
						cell.setAttribute("image", icon);
						cell.setAttribute("class", "listcell-iconic");
					}
					else
					{
						cell.setAttribute("image", "{IconsBase}/small/document.png");
						cell.setAttribute("class", "listcell-iconic");
					}

					item.appendChild(cell);

					this.container.appendChild(item);
				]]></body>
			</method>


<!--
Updates the corresponding item. If the item does not exist, this methods does nothing.
-->
			<method name="updateItem">
				<parameter name="value" />
				<parameter name="label" />
				<parameter name="icon" />
				<body><![CDATA[
					// Search for matching cell.
					var cell = null;
					for (var i=0 ; i<this.input_field.childNodes.length && cell == null ; i++)
					{
						var child = this.input_field.childNodes[i];
						if (child.tagName == 'listitem' && child.firstChild.tagName == 'listcell' && child.firstChild.getAttribute('label') == value)
						{
							// cell is found: "for" loop will end.
							cell = child.childNodes[1];
						}
					}

					// Update the found cell with the new label and icon.
					if (cell != null)
					{
						// First cell is the ID, and it should not change.
						// Second cell is the label, that may have changed.
						cell.setAttribute('label', label);
						if (icon && icon.length)
						{
							cell.setAttribute("image", icon);
							cell.setAttribute("class", "listcell-iconic");
						}
						else
						{
							cell.setAttribute("image", "{IconsBase}/small/shadow/document_plain.png");
							cell.setAttribute("class", "listcell-iconic");
						}
						updated = true; // will end "for" loop.
					}
				]]></body>
			</method>


<!--
Checks if there is already an item for the given value.
-->
			<method name="hasItem">
				<parameter name="value" />
				<body><![CDATA[
					// Search for matching cell.
					var cell = null;
					for (var i=0 ; i<this.input_field.childNodes.length; i++)
					{
						var child = this.input_field.childNodes[i];
						if (child.tagName == 'listitem' && child.firstChild.tagName == 'listcell' && child.firstChild.getAttribute('label') == value)
						{
							return true;
						}
					}
					return false;
				]]></body>
			</method>
			

<!--
Moves the selected items in the direction specified in the "dir" parameter,
which can take on the two following values: 'up' or 'down'.
-->
			<method name="moveSelectedItems">
				<parameter name="dir" />
				<body><![CDATA[
					_offset = 1;
					var items = this.getSelectedItems();

					// Clear the selection:
					// selected items will be re-selected later with the
					// addItemToSelection() method.
					this.input_field.clearSelection();

					var itemsMovable = true;
					var indexes = [];

					// check if items are movable:
					// if an item among the selected ones is at the top or at the bottom
					// the move is not possible.
					for (var i=0; i<items.item.length(); i++)
					{
						var p = parseInt(items.item[i].@index);
						indexes.push(p);
						if ( ((p-_offset+1) == 0 && dir == 'up') || ((p+_offset-1) >= (this.nbItems-1) && dir == 'down') )
						{
							itemsMovable = false;
						}
					}
					var offset = 0;
					if (itemsMovable == true)
					{
						// here all the items are movable so we can move the items

						if (dir == 'up')
						{
							// if the move is 'up', move each selected item starting
							// with the first one.
							for (var i=0; i<=items.item.length()-1; i++) {
								this.moveItem(parseInt(items.item[i].@index), dir, _offset);
							}
							offset = -_offset;
						}
						else
						{
							// else if the move is 'down', move each selected item starting
							// with the last one.
							for (var i=items.item.length()-1; i>=0; i--) {
								this.moveItem(parseInt(items.item[i].@index), dir, _offset);
							}
							offset = _offset;
						}

						this._itemMoved();
					}

					// re-select the selected items
					for (var i in indexes)
					{
						this.input_field.addItemToSelection(this.input_field.childNodes[indexes[i] + offset + 1]);
					}

					// ensure selected items are visible
					if (itemsMovable == true)
					{
						if (dir == 'up')
						{
							this.input_field.ensureIndexIsVisible(
								Math.max(0, indexes[0]-1)
								);
						}
						else
						{
							this.input_field.ensureIndexIsVisible(
								Math.min(indexes[indexes.length-1]+1, this.nbItems-1)
								);
						}
					}
				]]></body>
			</method>


            <method name="_itemMoved">
				<body><![CDATA[
				 if (this.parentNode
				 && this.parentNode.parentNode
				 && this.parentNode.parentNode.parentNode
				 && this.parentNode.parentNode.parentNode.isFormField)
				 {
				    this.parentNode.parentNode.parentNode.onItemMoved();
				 }
				]]></body>
			</method>

<!--
Moves the item at position 'index1' in the direction specified by the 'dir' parameter.
-->
			<method name="moveItem">
				<parameter name="index1" />
				<parameter name="dir" />
				<parameter name="offset" />
				<body><![CDATA[
					if (!offset)
					{
						offset = 1;
					}
					index1++;
					var index2;
					if (dir == 'up')
					{
						index2 = index1 - offset;
					}
					else
					{
						index2 = index1 + offset;
					}

					var treerow1 = this.container.childNodes[index1];
					var value1   = treerow1.childNodes[0].getAttribute('label');
					var label1   = treerow1.childNodes[1].getAttribute('label');
					var image1   = treerow1.childNodes[1].getAttribute('image');

					var treerow2 = this.container.childNodes[index2];
					var value2   = treerow2.childNodes[0].getAttribute('label');
					var label2   = treerow2.childNodes[1].getAttribute('label');
					var image2   = treerow2.childNodes[1].getAttribute('image');

					treerow1.childNodes[0].setAttribute('label', value2);
					treerow1.childNodes[1].setAttribute('label', label2);
					treerow1.childNodes[1].setAttribute('image', image2);
					treerow2.childNodes[0].setAttribute('label', value1);
					treerow2.childNodes[1].setAttribute('label', label1);
					treerow2.childNodes[1].setAttribute('image', image1);
				]]></body>
			</method>


<!--
Returns the selected items as an E4X XML object.
	<selecteditems>
		<item value="..." label="..." />
		<item ... />
		...
	</selecteditems>

-->
			<method name="getSelectedItems">
				<body><![CDATA[
					var xml   = new XML("<selecteditems/>");
					var index = 0, j = 0;
					for (var i=0 ; i<this.input_field.childNodes.length ; i++)
					{
						var child = this.input_field.childNodes[i];
						if (child.tagName == 'listitem')
						{
							if (child.selected)
							{
								xml.item[j] = new XML("<item/>");
								xml.item[j].@id    = child.childNodes[0].getAttribute("label");
								xml.item[j].@label = child.childNodes[1].getAttribute("label");
								xml.item[j].@index = index;
								j++;
							}
							index++;
						}
					}
					return xml;
				]]></body>
			</method>


			<method name="getItems">
				<body><![CDATA[
					var xml   = new XML("<items/>");
					var j = 0;
					for (var i=0 ; i<this.input_field.childNodes.length ; i++)
					{
						var child = this.input_field.childNodes[i];
						if (child.tagName == 'listitem')
						{
							xml.item[j] = new XML("<item/>");
							xml.item[j].@id    = child.childNodes[0].getAttribute("label");
							xml.item[j].@label = child.childNodes[1].getAttribute("label");
							j++;
						}
					}
					return xml;
				]]></body>
			</method>


			<method name="empty">
				<body><![CDATA[
					var list = this.input_field;
					list.clearSelection();
					while (list.getRowCount() > 0)
					{
						list.removeItemAt(0);
					}
				]]></body>
			</method>


			<method name="removeSelectedItems">
				<body><![CDATA[
					var list = this.input_field;
					var count = list.selectedCount;
					for (var i=0 ; i<count ; i++)
					{
						var item = list.selectedItems[0];
						list.removeItemFromSelection(item);
						list.removeItemAt(list.getIndexOfItem(item));
					}
					return count;
				]]></body>
			</method>

		</implementation>


		<handlers>

			<handler event="keypress" key="a" modifiers="control"><![CDATA[
				if (this.input_field.childNodes.length > 1)
				{
					this.input_field.selectAll();
				}
			]]></handler>

		</handlers>


		<xbl:content
			xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
			xmlns:xbl="http://www.mozilla.org/xbl">

			<xbl:children includes="wlistitem" />

			<hbox flex="1">

				<listbox
					anonid="tree" flex="1" seltype="multiple" style="min-width: 175px; overflow: auto;" rows="3"
					xbl:inherits="flex,disabled,collapsed,hidden,style,seltype,selstyle,class,rows,width,tooltiptext=helptext">
					<listcols flex="1">
						<listcol hidden="true" />
						<listcol flex="1" />
					</listcols>
				</listbox>

				<box anonid="buttonsBar" align="start" orient="vertical" xbl:inherits="hidden=hidebuttons">
					<toolbarbutton xbl:inherits="disabled,hidden=hideupdownbuttons" anonid="btnMoveUp" tooltiptext="&amp;modules.generic.backoffice.Move-up;" image="{IconsBase}/small/shadow/arrow_up_blue.png" oncommand="moveSelectedItems('up')" />
					<toolbarbutton xbl:inherits="disabled,hidden=hideupdownbuttons" anonid="btnMoveDown" tooltiptext="&amp;modules.generic.backoffice.Move-down;" image="{IconsBase}/small/shadow/arrow_down_blue.png" oncommand="moveSelectedItems('down')" />
					<xbl:children includes="toolbarbutton" />
				</box>

			</hbox>
		</xbl:content>

	</binding>

</bindings>