<?xml version="1.0"?>
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="wListField" extends="form.wFormField#wFormField">

		<implementation>

			<field name="LIST_GROUP_TAG_NAME" readonly="true">'wlistgroup'</field>

			<field name="_block_events">false</field>
			<field name="_list_group">null</field>
			<field name="_added_items">[]</field>
			<field name="_loaded_value">null</field>
			
			<field name="STATE_LOADING" readonly="true">"loading"</field>
			<field name="STATE_LOADED_SUCCESS" readonly="true">"loadedsuccess"</field>
			<field name="STATE_LOADED_ERROR" readonly="true">"loadederror"</field>

			<property name="position">
				<getter><![CDATA[
					if (this.hasAttribute('position'))
					{
						return parseInt(this.getAttribute('position'));
					}
					return null;
				]]></getter>
			</property>

			<property name="isLoading">
				<getter><![CDATA[
					return this.getAttribute('state') == this.STATE_LOADING;
				]]></getter>
			</property>


			<property name="isLoaded">
				<getter><![CDATA[
					return this.getAttribute('state') == this.STATE_LOADED_SUCCESS;
				]]></getter>
			</property>


			<property name="selectLabel">
				<getter><![CDATA[
					if (this.hasAttribute('select-label'))
					{
						return this.getAttribute('select-label');
					}
					return '&modules.uixul.bo.general.Select-labelellipsis;'
				]]></getter>
			</property>


			<method name="initialize">
				<body><![CDATA[
					this.init_list_group();
					this.setup_default_items();
					this.init_static_items();
					this.init_load_from_server();
				]]></body>
			</method>

			<method name="set_state">
				<parameter name="state" />
				<body><![CDATA[
					this.setAttribute('state', state);
				]]></body>
			</method>


			<method name="setup_default_items">
				<body><![CDATA[
				]]></body>
			</method>


<!--
Parses the <wlistitem/> children and add items in the list consequently.
@access protected
-->
			<method name="init_static_items">
				<body><![CDATA[
					this.set_state(this.STATE_LOADING);
					var children = this.childNodes;
					for (var i=0 ; i<children.length ; i++)
					{
						if (children[i].tagName == 'wlistitem' || children[i].tagName == 'xul:wlistitem')
						{
						    var newItem = this.addItem(
								children[i].getAttribute('value'),
								children[i].firstChild.nodeValue
								);
						}
					}
					this.set_state(this.STATE_LOADED_SUCCESS);
				]]></body>
			</method>

			<method name="init_load_from_server">
				<body><![CDATA[
					var attr = {};
					if (this.hasAttribute("load-attributes"))
					{
						attr = eval(this.getAttribute("load-attributes"));
					}
					this.loadItemsWithAttributes(attr);
				]]></body>
			</method>
			
			<!-- 
				This method can be used to load items with additional parameters in the request.
				These parameters can be used in dynamic lists services to filter the elements. 
			-->
			<method name="loadItemsWithAttributes">
				<parameter name="attributes" />
				<body><![CDATA[
					if (this.hasAttribute('list-id'))
					{
						this.removeAllItems();
						this.set_state(this.STATE_LOADING);
						var lang;

						if (this.hasAttribute('lang'))
						{
							lang = this.getAttribute('lang');
						}
						else if (this.form && this.form.document != null)
						{
							lang = this.form.document.lang;
						}
						else if (this.form && this.form.hasAttribute('document-lang'))
						{
							lang = this.form.getAttribute('document-lang');
						}
						else
						{
							throw new Error("Could not determine the language: list will not be loaded.");
						}

						var listId = this.getAttribute('list-id');
						
						attributes.{K::COMPONENT_ID_ACCESSOR} = listId;
						attributes.{K::LANG_ACCESSOR} = lang;
										
	 					var result = wCore.executeJSON("list", "GetListItems", attributes).contents;
	 				
	 					var lastItemIsGroup = false;
	 					 
	 					for(var i= 0; i < result.length; i++)
	 					{
	 						var newItem;
	 						var item = result[i];
	 						if (item.type == "group")
	 						{
	 						   if (lastItemIsGroup)
						       {
						           this.input_field.removeItemAt(i);
						       }

					       	   newItem = this.addItem(item.id, item.label + ' ', '{IconsBase}/small/shadow/bullet_triangle_grey.png', true);
					           newItem.setAttribute("style", "font-weight: bold; font-style: italic;");

					       	   lastItemIsGroup = true;
						    }
						    else
						    {
						       
						       newItem = this.addItem(item.id, item.label, item.icon);
						       lastItemIsGroup = false;
						    }
							newItem.setAttribute("item-value", item.value);
						}
						this.set_state(this.STATE_LOADED_SUCCESS);
					    if (this._loaded_value != null)
						{
							this.value = this._loaded_value;
							this.setCurrentValueAsDefault();
						}	
					}
				]]></body>
			</method>

<!--
Called everytime a list has changed.
-->
			<method name="list_changed" >
				<body><![CDATA[
					var evt = document.createEvent("HTMLEvents");
					evt.initEvent('change', true, true);
					this.dispatchEvent( evt );

					if (this._list_group != null)
					{
						this._list_group.onListChange(this);
					}
					
				]]></body>
			</method>


<!--
Finds the parent wListGroup (if there is one).
-->
			<method name="init_list_group" >
				<body><![CDATA[
					var node = this.parentNode;
					while (node != null)
					{
						if (node.tagName && node.tagName == 'wlistgroup')
						{
							this._list_group = node;
							break;
						}
						node = node.parentNode;
					}
					if (this._list_group != null)
					{
						if (this.position === null)
						{
							throw new Error(this.Name + ': missing "position-in-group" attribute when in a <wListGroup>.');
						}
						else
						{
							this._list_group.registerList(this);
						}
					}
				]]></body>
			</method>

<!--
Adds an item to the already existing items in the list. Items can only be added
to the end of the list for the moment.
This method may be overloaded by child classes depending on the list type.
-->
			<method name="addItem">
				<parameter name="value" />
				<parameter name="label" />
				<parameter name="icon" />
				<parameter name="disabled" />
				<body><![CDATA[
					this._block_events = true;
					var item = this.input_field.appendItem(label, value);
					if (icon && icon.length)
					{
						item.setAttribute("image", icon);
						item.setAttribute("class", "listitem-iconic");
					}
					if (disabled)
					{
					   item.setAttribute("disabled", "true");
					}
					this._block_events = false;
					this._added_items.push(item);
					return item;
				]]></body>
			</method>

			<method name="removeAllItems">
				<body><![CDATA[
					for (var i=0 ; i<this.input_field.getRowCount() ; i++)
					{
						this.input_field.removeItemAt(0);
					}
					this.setup_default_items();
				]]></body>
			</method>


			<method name="formatForSuggestionMenu">
    			<parameter name="value" />
    			<body>
    			<![CDATA[
    			    for (var i = 0; i < this._added_items.length; i++)
					{
					   if (this._added_items[i].value == value)
					   {
					      return this._added_items[i].label;
					   }
					}
    			    return value + " &amp;modules.uixul.bo.general.suggestion.unknown;";
    			]]>
    			</body>
    		</method>


    		<method name="formatForSuggestionView">
    			<parameter name="value" />
    			<body>
    			<![CDATA[
    			    return this.formatForSuggestionMenu(value);
    			]]>
    			</body>
    		</method>

		</implementation>

		<handlers>
			<handler event="select"><![CDATA[
				if (!this._block_events )
				{
					this._loaded_value = null;
					this.validate();
					this.list_changed();
				}
			]]></handler>


			<handler event="keypress" key="r" modifiers="control" phase="capturing" preventdefault="true"><![CDATA[
				event.stopPropagation();
				this.init_load_from_server();
			]]></handler>
		</handlers>
	</binding>
</bindings>