<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	
	<binding id="cConstraint">
		<content>
			<children/>
		</content>
		<implementation>				
			<property name="name" readonly="true">
				<getter><![CDATA[
					return this.getAttribute("name");
				]]></getter>
			</property>
			
			<property name="disabled" readonly="true">
				<getter><![CDATA[
					return this.hasAttribute('disabled') && this.getAttribute('disabled') == 'true';
				]]></getter>
			</property>
			
			<property name="serverSide" readonly="true">
				<getter><![CDATA[
					return this.mServerSide;
				]]></getter>
			</property>	
			
			<property name="parameter" readonly="true">
				<getter><![CDATA[
					return this.hasAttribute('parameter') ? this.getAttribute("parameter") : '';
				]]></getter>
			</property>
			
			<method name="getServerParams">
				<body><![CDATA[
					var params = {};
					for (var i = 0; i < this.attributes.length; i++)
					{
						var attr = this.attributes[i];
						if (attr.nodeName != 'name')
						{
							params[attr.nodeName] = attr.nodeValue;
						}
					}
					var r = {}; r[this.name] = params;
					return r;
				]]></body>	
			</method>			
			
			<method name="addParameter">
				<parameter name="name" />
				<parameter name="val" />
				<body><![CDATA[
					this.setAttribute(name, this.fixString(val));
				]]></body>	
			</method>
					
			<method name="validate">
				<parameter name="data" />
				<body><![CDATA[
					return false;
				]]></body>	
			</method>
						
			<method name="getErrorMessage">
				<body><![CDATA[
					var error = this.mMessage;
					for (var i = 0; i < this.attributes.length; i++)
					{
						var attr = this.attributes[i];
						error = error.replace('{' + attr.nodeName + '}', attr.nodeValue);
					}
					return error;
				]]></body>	
			</method>	
			
			<method name="fixString">
				<parameter name="data" />
				<body><![CDATA[
					var fs = (data == null) ? "" : data.toString();
					return (fs.length > 0) ? fs.replace(/^\s+/g, "").replace(/\s+$/g, "") : fs;
				]]></body>
			</method>	
			
			<field name="mServerSide">true</field>
			<field name="mMessage">''</field>
						
			<constructor><![CDATA[
				//wCore.debug('cConstraint.constructor');
			]]></constructor>
			
			<destructor><![CDATA[
				this.mParameters = null;
			]]></destructor>
		</implementation>
	</binding>
		
	<binding id="cMinSizeConstraint" extends="form.cConstraint#cConstraint">
		<implementation>
			<constructor><![CDATA[
				//wCore.debug('cMinSizeConstraint.constructor');
				this.mServerSide = false;
				this.mMessage = "${transui:f.validation.validator.minsize.message,ucf,js}";
			]]></constructor>

			<method name="getMin">
				<body><![CDATA[
					if (this.hasAttribute("min")) 
					{
						return this.getAttribute("min");
					}
					return this.parameter;
				]]></body>	
			</method>				
											
			<method name="validate">
				<parameter name="data" />
				<body><![CDATA[
					if (this.disabled) { return true; }
					var fs = this.fixString(data);
					return fs.length >= parseInt(this.getMin());
				]]></body>	
			</method>			
		</implementation>
	</binding>
	
	<binding id="cMaxSizeConstraint" extends="form.cConstraint#cConstraint">
		<implementation>
			<constructor><![CDATA[
				//wCore.debug('cMaxSizeConstraint.constructor');
				this.mServerSide = false;
				this.mMessage = "${transui:f.validation.validator.maxsize.message,ucf,js}";
			]]></constructor>

			<method name="getMax">
				<body><![CDATA[
					if (this.hasAttribute("max")) 
					{
						return this.getAttribute("max");
					}
					return this.parameter;
				]]></body>	
			</method>	
											
			<method name="validate">
				<parameter name="data" />
				<body><![CDATA[
					if (this.disabled) { return true; }
					var fs = this.fixString(data);
					return fs.length <= parseInt(this.getMax());
				]]></body>	
			</method>			
		</implementation>
	</binding>
	
	<binding id="cMinConstraint" extends="form.cConstraint#cConstraint">
		<implementation>
			<constructor><![CDATA[
				//wCore.debug('cMinConstraint.constructor');
				this.mServerSide = false;
				this.mMessage = "${transui:f.validation.validator.min.message,ucf,js}";
			]]></constructor>
			
			<method name="getMin">
				<body><![CDATA[
					if (this.hasAttribute("min")) 
					{
						return this.getAttribute("min");
					}
					return this.parameter;
				]]></body>	
			</method>
												
			<method name="validate">
				<parameter name="data" />
				<body><![CDATA[
					if (this.disabled) { return true; }
					var fs = this.fixString(data);	
					if (fs.length === 0) return true
					var min = this.getMin();
					if (isNaN(fs) || isNaN(parseFloat(min)))
					{
						return fs >= min;
					}
					return parseFloat(fs) >= parseFloat(min);
				]]></body>	
			</method>			
		</implementation>
	</binding>
	
	<binding id="cMaxConstraint" extends="form.cConstraint#cConstraint">
		<implementation>
			<constructor><![CDATA[
				//wCore.debug('cMaxConstraint.constructor');
				this.mServerSide = false;
				this.mMessage = "${transui:f.validation.validator.max.message,ucf,js}";
			]]></constructor>
			
			<method name="getMax">
				<body><![CDATA[
					if (this.hasAttribute("max")) 
					{
						return this.getAttribute("max");
					}
					return this.parameter;
				]]></body>	
			</method>
											
			<method name="validate">
				<parameter name="data" />
				<body><![CDATA[
					if (this.disabled) { return true; }
					var fs = this.fixString(data);
					if (fs.length === 0) return true
					var max = this.getMax();
					if (isNaN(fs) || isNaN(parseFloat(max)))
					{
						return fs <= max;
					}
					return parseFloat(fs) <= parseFloat(max);
				]]></body>	
			</method>			
		</implementation>
	</binding>
	
	<binding id="cUniqueConstraint" extends="form.cConstraint#cConstraint">
		<implementation>
			<constructor><![CDATA[
				wCore.debug('cUniqueConstraint.constructor');
			]]></constructor>
								
			<method name="getServerParams">
				<body><![CDATA[
					var params = {};
					for (var i = 0; i < this.attributes.length; i++)
					{
						var attr = this.attributes[i];
						if (attr.nodeName != 'name')
						{
							params[attr.nodeName] = attr.nodeValue;
						}
					}					
					var pn = this.parentNode;			
					while (pn && !pn.documentid) {pn = pn.parentNode;}
					if (pn) {
						params.documentId = pn.documentid;
					}
					return {this.name : params};
				]]></body>	
			</method>		
		</implementation>
	</binding>	
</bindings>
