<?xml version="1.0"?>
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<!--
################################################################################
## wForm                                                                      ##
################################################################################
-->

	<binding id="wFormBase" extends="widgets.wWidget#wWidget">

		<implementation>

			<field name="_fields">[]</field>
			<field name="_init_found_fields">[]</field>
			<field name="_init_found_fields_count">0</field>
			<field name="_is_loading">false</field>

			<!-- State constants -->
			<field name="STATE_INITIALIZING" readonly="true">"initializing"</field>
			<field name="STATE_INITIALIZED" readonly="true">"initialized"</field>
			<field name="STATE_LOADING" readonly="true">"loading"</field>
			<field name="STATE_LOADED_SUCCESS" readonly="true">"loadedsuccess"</field>
			<field name="STATE_LOADED_ERROR" readonly="true">"loadederror"</field>
			<field name="STATE_SAVING" readonly="true">"saving"</field>
			<field name="STATE_SAVED_SUCCESS" readonly="true">"savedsuccess"</field>
			<field name="STATE_SAVED_ERROR" readonly="true">"savederror"</field>
			<field name="STATE_LOADING_LIST" readonly="true">"loadinglist"</field>
			<field name="LOCATION_CHOICE_FIELD_NAME" readonly="true">'__location__'</field>

			<!-- The fields registered in this form. -->
			<property name="fields">
				<getter><![CDATA[
					return this._fields;
				]]></getter>
			</property>

			<!-- Form status. -->
			<property name="state">
				<getter><![CDATA[
					return this.getAttribute("state");
				]]></getter>
				<setter><![CDATA[
					this.setAttribute("state", val);
				]]></setter>
			</property>

			<!-- Form validation status. -->
			<property name="isValid">
				<getter><![CDATA[
					return parseBoolean(this.getAttribute('validates'));
				]]></getter>
			</property>

			<property name="data">
				<getter><![CDATA[
					var data = [ ];
					for each(var field in this._fields)
					{
						if ( ! field.disabled && field.name != this.LOCATION_CHOICE_FIELD_NAME)
						{
							data[field.name] = wCore.cleanHiddenChars(field.value);
						}
					}
					return data;
				]]></getter>
				<setter><![CDATA[
					for (var name in val)
					{
						if (name in this._fields)
						{
							this._fields[name] = val;
						}
					}
				]]></setter>
			</property>

			<property name="queryString">
				<getter><![CDATA[
					var qs = [ ];
					var data = this.data;
					for (var name in data)
					{
						var value = data[name];
						if ( value && typeof(value) == 'object' && 'push' in value )
						{
							for (var i in value)
							{
								if (value[i] === null) value[i] = '';
								qs.push(name+'[]='+encodeURIComponent(value[i]));
							}
						}
						else
						{
							if (value === null) value = '';
							qs.push(name+'='+encodeURIComponent(value));
						}
					}
					return qs.join('&');
				]]></getter>
			</property>

			<property name="name">
				<getter><![CDATA[
					return this.getAttribute('name');
				]]></getter>
			</property>

			<!--
			Indicates if the form has been modified since the last load or reset.
			-->
			<property name="hasModifications">
				<getter><![CDATA[
					for each(var field in this._fields)
					{
						if (field.hasModifications)
						{
							wCore.debug("Field " + field.name + " has modifications!");
							return true;
						}
					}
					return false;
				]]></getter>
			</property>

			<!--
			### wForm CONSTRUCTOR ######################################################
			-->
			<constructor><![CDATA[
				this.initialize();
			]]></constructor>

			<!--
			### wFormBase METHODS ##############################################
			-->

			<method name="initialize">
				<body><![CDATA[
				this.set_state(this.STATE_INITIALIZING);
				if (this.preInitialize())
				{

					this.initialize_fields(this, true);
					this.initialize_fields(this, false);
					this.debug("[wform::initialize] Found "+this._init_found_fields_count+" fields.");
					if (this._init_found_fields_count == 0 && this.id != "")
					{
						wCore.log("[wform::initialize] Form ID='"+this.id+"' hasn't found any field, there should be an error somewhere. Please check your form template.", WARN);
					}
				}
				]]></body>
			</method>

			<method name="preInitialize">
				<body><![CDATA[
					return true;
				]]></body>
			</method>

			<method name="postInitialize">
				<body><![CDATA[
				]]></body>
			</method>

			<method name="set_state">
				<parameter name="state" />
				<body><![CDATA[
					this.debug("[wform::set_state] state="+state);
					this.setAttribute('state', state);
				]]></body>
			</method>

			<method name="initialize_fields">
				<parameter name="parent" />
				<parameter name="inAnonymousContent" />
				<body><![CDATA[
				    var childNodes = inAnonymousContent ? document.getAnonymousNodes(parent) : parent.childNodes;
				    if (!childNodes) return;
					for (var i=0 ; i<childNodes.length ; i++)
					{
						var child = childNodes[i];
						if (child.hasAttribute && child.hasAttribute('field-name') && !child.hasAttribute('name'))
						{
							wCore.log("Attribute 'field-name' is deprecated in favour of 'name'. Attribute 'name' has been set with the 'field-name' attribute's value: '"+child.getAttribute('field-name')+"', but please fix your form template now.", WARN);
							child.setAttribute('name', child.getAttribute('field-name'));
						}
						if (child.hasAttribute && child.hasAttribute('name') && child.getAttribute('name').length > 0)
						{
							var childName = child.getAttribute('name');
							this.debug("[wform::initialize_fields] found field '"+childName+"'");
							if (childName in this._init_found_fields)
							{
								throw new Error("[wform::initialize_fields] found fields with same name: '"+childName+"'");
							}
							else
							{
								this._init_found_fields[childName] = child;
								this._init_found_fields_count++;
							}
						}
						else
						{
							this.initialize_fields(child, false);
						}
					}
				]]></body>
			</method>


			<!--
			Registers a field. This method is called by each field once it has initialized and found its parent form.
			-->
			<method name="register_field">
				<parameter name="fieldToRegister" />
				<body><![CDATA[
					if (fieldToRegister.name.length == 0)
					{
						this.debug("[wform::register_field] field name is empty (type is '"+fieldToRegister.tagName+"')");
						return false;
					}

					if (fieldToRegister.name == "documentversion")
					{
						this._use_document_version_lock = true;
						this._document_version_locked = false;
					}

					if (fieldToRegister.name in this._init_found_fields)
					{
						delete this._init_found_fields[fieldToRegister.name];
						this._init_found_fields_count--;
						this._fields[fieldToRegister.name] = fieldToRegister;
						this.debug("[wform::register_field] field: '"+fieldToRegister.name+"' of type '"+fieldToRegister.tagName+"' (_init_found_fields_count="+this._init_found_fields_count+")");
						if (this._init_found_fields_count == 0)
						{
							this.postInitialize();
							this.initialize_complete();
						}
        			    return true;
					}
					return false;
				]]></body>
			</method>


			<method	name="initialize_complete">
				<body><![CDATA[
				    this.set_state(this.STATE_INITIALIZED);


					// if there is a 'oninit' attribute, execute the code it contains
					if (this.hasAttribute('oninit'))
					{
						var func = this.getAttribute('oninit');
						try
						{
							eval(func);
						}
						catch (e)
						{
							wCore.error("wFormBase.initialize_complete", [], e);
							throw new Error('[wForm] "oninit" error: '+e.message);
						}
					}

					// hide to the user the field that (eventually) contains fields
					// that must be hidden for a given document instance
					var hiddenPropsField = this.getFieldByName('hiddenprops');
					if (hiddenPropsField != null && !hiddenPropsField.hidden)
					{
					  // TODO : implement hide() on wField
					  this.hideField('hiddenprops');
					}
					
					this.onInit();

					this.call_requested_methods();

					var doc = this.document;
					if (doc != null)
					{
						this.load(doc.id, doc.lang);
					}
					else
					{
						this.focusFirstField();
					}
				]]></body>
			</method>

			<method name="call_requested_methods">
				<body><![CDATA[
					if (this.methods_to_call)
					{
						var nb = this.methods_to_call.length;
						for (var i=0 ; i<nb ; i++)
						{
							var m = this.methods_to_call.shift();
							this[m.name].apply(this, m.arguments);
						}
						this.methods_to_call = null;
					}
				]]></body>
			</method>

			<!--
			Called when the form initialization is complete.
			-->
			<method name="onInit">
				<body><![CDATA[
				]]></body>
			</method>


			<!--
			Returns the value of the field from its name.
			-->
			<method name="getValue">
				<parameter name="fieldName" />
				<body><![CDATA[
					if (fieldName in this._fields)
					{
						return this._fields[fieldName].value;
					}
					return null;
				]]></body>
			</method>


			<!--
			Calls the validation process of the entire form.
			-->
			<method name="revalidate">
				<body><![CDATA[
					for each(var field in this._fields)
					{
						if ( ! field.isValid )
						{
							this.set_is_valid(false);
							return;
						}
						else
						{
							this.debug("[wform::revalidate] Field "+field.name+" validates!");
						}
					}
					this.set_is_valid(true);
					this.postRevalidate();
				]]></body>
			</method>

			<method name="postRevalidate">
				<body><![CDATA[
				]]></body>
			</method>

			<method name="set_is_valid">
				<parameter name="bool" />
				<body><![CDATA[
					//wCore.debug("wFormBase.set_is_valid : "	+ this.state);					
					//try {throw new Error("wFormBase", "set_is_valid");} catch (e) {wCore.error("wFormBase.set_is_valid", [bool], e);}						
					if (bool == true)
					{
						this.setAttribute('validates', 'true');
						if (this.hasModifications)
						{
							this.removeAttribute('disabled');
							if (this.toolbar && this.toolbar.resetButton && this.toolbar.resetButton.enable)
							{
							    this.toolbar.resetButton.enable();
							}
						}
						else
						{
							this.setAttribute('disabled', 'true');
							if (this.toolbar && this.toolbar.resetButton && this.toolbar.resetButton.disable)
							{
							    this.toolbar.resetButton.disable();
							}
						}
						
					}
					else
					{
						this.setAttribute('validates', 'false');
						this.setAttribute('disabled', 'true');
					}
					this.raiseEvent('validate');
					this.onSetIsValid(bool);
				]]></body>
			</method>


			<method name="raiseEvent">
				<parameter name="eventName" />
				<body><![CDATA[
					if (!this.block_change_events || eventName != 'change')
					{
						var evt = document.createEvent("HTMLEvents");
						evt.initEvent(eventName, true, true);
						this.dispatchEvent(evt);
					}
				]]></body>
			</method>


			<method name="onSetIsValid">
				<parameter name="bool" />
				<body><![CDATA[

				]]></body>
			</method>


			<method name="reset">
				<parameter name="clearDocumentInformations" />
				<body><![CDATA[
					if (this._use_document_version_lock && this._document_version_locked)
					{
						this.load(this.document.id, this.document.lang);
					}
					else
					{
						for each(var field in this._fields)
						{
							field.reset();
						}
					}

					this.onReset();
				]]></body>
			</method>


			<method name="onReset">
				<body><![CDATA[
				]]></body>
			</method>


			<!--
			Clears all the form fields.
			-->
			<method name="empty">
				<body><![CDATA[
					for each(var field in this._fields)
					{
					    field.suggestionValue = null;
					    field.enable();
						field.empty();
					}
					this.onEmpty();
				]]></body>
			</method>

			<method name="onEmpty">
				<body><![CDATA[
				]]></body>
			</method>


			<method name="handleEditOnce">
				<body><![CDATA[
					for each(var field in this._fields)
					{
					    if ('handleEditOnce' in field)
					    {
					    	field.handleEditOnce();
					    }
					    else
					    {
					    	wCore.debug("Field name:" +field.name+" "+field.tagName);
					    }
					}
				]]></body>
			</method>


			<!--
			Sets the error messages for a field. This method is called by child fields widgets.
			-->
			<method name="setErrors">
				<parameter name="field" />
				<parameter name="errors" />
				<body><![CDATA[
					this.debug("Form validation errors for field '"+field.name+"':\n - " + errors.join("\n - "));
				]]></body>
			</method>



			<method name="getFieldByName">
				<parameter name="name" />
				<body><![CDATA[
					if (name in this._fields)
					{
						return this._fields[name];
					}
					return null;
				]]></body>
			</method>


			<method name="getFieldLabelByName">
				<parameter name="name" />
				<body><![CDATA[
					return this.getElementById('label_' + name);
				]]></body>
			</method>

			<method name="hideField">
				<parameter name="name" />
				<body><![CDATA[
					var field = this.getFieldByName(name);
					if (field)
					{
						field.hidden = true;
						var label = this.getFieldLabelByName(name);
						if (label)
						{
							label.hidden = true;
						}
					}
				]]></body>
			</method>
			
			<method name="showField">
				<parameter name="name" />
				<body><![CDATA[
					var field = this.getFieldByName(name);
					if (field)
					{
						field.hidden = false;
						var label = this.getFieldLabelByName(name);
						if (label)
						{
							label.hidden = false;
						}
					}
				]]></body>
			</method>

			<method name="getFieldValue">
				<parameter name="name" />
				<body><![CDATA[
					var field = this.getFieldByName(name);
					if (field)
					{
						return field.value;
					}
					return null;
				]]></body>
			</method>

			<property name="helpPanel">
				<getter><![CDATA[
					return this.getElementById('helpPanel');
				]]></getter>
			</property>

			<method name="showFieldInfo">
				<parameter name="field" />
				<body><![CDATA[
					if (this.isReady && this.helpPanel)
					{
						this.helpPanel.showFieldInfo(field);
					}
				]]></body>
			</method>

			<method name="showHelpText">
				<parameter name="field" />
				<body><![CDATA[
					if (this.isReady && this.helpPanel)
					{
						this.helpPanel.showContent(this.helpText);
					}
				]]></body>
			</method>

			<property name="isReady">
				<getter><![CDATA[
					return this.state == this.STATE_INITIALIZED
						|| this.state == this.STATE_LOADED_SUCCESS
						|| this.state == this.STATE_SAVED_SUCCESS;
				]]></getter>
			</property>


			<method name="onFieldFocus">
				<parameter name="field" />
				<body><![CDATA[
					this.showFieldInfo(field);
				]]></body>
			</method>


			<method name="onFieldBlur">
				<parameter name="field" />
				<body><![CDATA[
					this.showHelpText();
				]]></body>
			</method>

			<method name="showHelpText">
				<parameter name="field" />
				<body><![CDATA[
				]]></body>
			</method>


			<method name="focusFirstField">
				<parameter name="proceed" />
				<body><![CDATA[
					if (proceed)
					{
						var focused = false;

						try
						{
							for each (var field in this._fields)
							{
								var parentNode = field.parentNode;
								while (parentNode != null)
								{
									if (parentNode.parentNode != null && parentNode.parentNode.tagName && parentNode.parentNode.tagName.match(/wform/))
									{
										break;
									}
									parentNode = parentNode.parentNode;
								}
								
								if (parentNode != null)
								{
									var labels = parentNode.getElementsByTagNameNS("*", "wlabel");
									if (labels && labels.length)
									{
										var elt = labels[0];
										while (elt)
										{
											if (elt.isFormField)
											{
												elt.input_field.focus();
												focused = true;
												break;
											}
	
											elt = elt.nextSibling;
										}
									}
								}
								break;
							}
						}
						catch (e)
						{
							wCore.error("wFormBase.focusFirstField", [proceed], e);
						}
					}
					else
					{
						wCore.executeOnMethodExists(this, "focusFirstField", function (xbl) {xbl.focusFirstField(true);});
					}
				]]></body>
			</method>

		</implementation>

	</binding>

</bindings>
