<?xml version="1.0"?>
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<!--
################################################################################
## wSuggestionButton                                                         ##
################################################################################
-->

	<binding id="wSuggestionButton" extends="core.wBox#wBox">


    	<implementation>


    		<field name="relatedField">
    			null
    		</field>


    		<field name="values">
    			[]
    		</field>

    		<field name="labels">
    			[]
    		</field>


    		<constructor><![CDATA[

			]]></constructor>


			<method name="initialize">
			    <parameter name="value" />
			    <parameter name="field" />
				<body><![CDATA[
				    this.values = []

				    this.labels = []

				    this.getElementById('suggestionButton').removeAttribute('collapsed');

				    this.relatedField = field;

				    var menuitems = this.getElementById('suggestionMenu').childNodes;
                    for (var i = menuitems.length; i > 0; i--)
                    {
                        this.getElementById('suggestionMenu').removeChild(menuitems[i - 1]);
                    }

                    var valueLabel = '';

                    var xbl = this;
				    for (var index in value.value)
				    {
				        this.values.push(value.value[index]);

				        if (value.label[index])
				        {
				            valueLabel = value.label[index];
				            if (index > 0)
				            {
    				            var separator = document.createElement("menuseparator");
                                this.getElementById('suggestionMenu').appendChild(separator);
                            }

				            var label = document.createElement("menuitem");
                            label.setAttribute("label", value.label[index]);
                            label.setAttribute("disabled", "true");
                            this.getElementById('suggestionMenu').appendChild(label);
				        }

				        this.labels.push(valueLabel);

                        var menu = document.createElement("menu");

                        var enableView = true;

                        if (trim(value.value[index]) != "")
                        {
                            if (field && field.formatForSuggestionMenu)
                            {
                                var suggestionValue = field.formatForSuggestionMenu(value.value[index].toString());
                            }
                            else
                            {
                                if (value.value[index].toString().length > 25)
                                {
                                    var suggestionValue = value.value[index].toString().substr(0, 22) + '...';
                                }
                                else
                                {
                                    var suggestionValue = value.value[index].toString();
                                }
                            }
                            menu.setAttribute("label", suggestionValue);
                        }
                        else
                        {
                            menu.setAttribute("label", "&amp;modules.uixul.bo.general.suggestion.empty;");
                            enableView = false;
                        }

                        var menuPopup = document.createElement("menupopup");

                        var menuItemPaste = document.createElement("menuitem");
                        menuItemPaste.setAttribute("label", "&amp;modules.uixul.bo.general.suggestion.Apply;");
                        menuItemPaste.setAttribute("class", "menuitem-iconic");
                        menuItemPaste.setAttribute("image", "{IconsBase}/small/shadow/check.png");
                        menuItemPaste.setAttribute("index", index);

                        var onApplyCommand = function (event)
                        {
                            try
                            {
                                xbl.applySuggestion(this.getAttribute("index"));
                            }
                            catch (e)
                            {
                            	wCore.error("wSuggestionButton.initialize", [value, field], e);
                            }
                        }

                        wCore.addEventListener(menuItemPaste, "command", onApplyCommand);

                        menuPopup.appendChild(menuItemPaste);

                        var menuItemView = document.createElement("menuitem");
                        menuItemView.setAttribute("label", "&amp;modules.uixul.bo.general.suggestion.View;");
                        menuItemView.setAttribute("class", "menuitem-iconic");
                        menuItemView.setAttribute("image", "{IconsBase}/small/shadow/eye.png");

                        if (enableView)
                        {
                            menuItemView.setAttribute("index", index);

    				        var onViewCommand = function (event)
                            {
                                try
                                {
                                    xbl.viewSuggestion(this.getAttribute("index"));
                                }
                                catch (e)
                                {
                                	wCore.error("wSuggestionButton.initialize", [value, field], e);
                                }
                            }

                            wCore.addEventListener(menuItemView, "command", onViewCommand);
                        }
                        else
                        {
                            menuItemView.setAttribute("disabled", "true");
                        }

                        menuPopup.appendChild(menuItemView);

                        menu.appendChild(menuPopup);

                        this.getElementById('suggestionMenu').appendChild(menu);
				    }
				]]></body>
			</method>


			<method name="getValueFromIndex">
			    <parameter name="index" />
				<body><![CDATA[
				    value = null;

				    for (var i in this.values)
				    {
				        if (i == index)
				        {
				            value = this.values[i];
				            break;
				        }
				    }

				    return value;
				]]></body>
			</method>


			<method name="getLabelFromIndex">
			    <parameter name="index" />
				<body><![CDATA[
				    label = null;

				    for (var i in this.labels)
				    {
				        if (i == index)
				        {
				            label = this.labels[i];
				            break;
				        }
				    }

				    return label;
				]]></body>
			</method>


			<method name="applySuggestion">
			    <parameter name="index" />
				<body><![CDATA[
				    var value = this.getValueFromIndex(index);

				    this.relatedField.value = value;
				]]></body>
			</method>

			<method name="viewSuggestion">
			    <parameter name="index" />
				<body><![CDATA[
				    var value = this.getValueFromIndex(index);

				    if (trim(value) != "")
                    {
                        if (this.relatedField && this.relatedField.formatForSuggestionView)
                        {
                            var suggestionValue = this.relatedField.formatForSuggestionView(value.toString());
                        }
                        else
                        {
                            var suggestionValue = value.toString();
                        }
                    }
                    else
                    {
                        var suggestionValue = "&amp;modules.uixul.bo.general.suggestion.empty;";
                    }

                    this.relatedField.form.getElementById("suggestionPannel").display(this.relatedField, this.getLabelFromIndex(index), suggestionValue);
				]]></body>
			</method>


			<method name="destroy">
				<body><![CDATA[
				    this.getElementById('suggestionButton').setAttribute('collapsed', 'true');
				    this.relatedField = null;
				    this.values = []
				]]></body>
			</method>


        </implementation>


		<xbl:content
			xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
			xmlns:xbl="http://www.mozilla.org/xbl">
			<toolbarbutton anonid="suggestionButton" type="menu" class="suggestionInputField" collapsed="true">
                  <menupopup anonid="suggestionMenu">
                  </menupopup>
            </toolbarbutton>
		</xbl:content>

	</binding>

</bindings>