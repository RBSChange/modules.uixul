<?xml version="1.0"?>
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<!--
################################################################################
## wBoolean                                                                 ##
################################################################################
-->
	<binding id="wBoolean" extends="form.wFormField#wFormField">
		<implementation>
			<field name="_isRequired">null</field>
			
			
			<!--
			Global initialization of the field.
			-->
			<method name="initialize"
				doc-text="Global initialization of the field."
				doc-access="private"
				doc-overridable="true">
				<body><![CDATA[
					var handler =
					{
						field : this,
						handleEvent : function()
						{
							this.field.dispatchChange();
						}
					};
					
					
					var container = this.getElementById('container');
					for (var i=0 ; i< container.childNodes.length ; i++)
					{
						var child = container.childNodes[i];
						if (child.tagName == 'radio' && child.value != '')
						{
							child.addEventListener('command', handler, false);
						}
					}	
					this.checkReadonly();
				]]></body>
			</method>			
			
			
			<property name="value">
				<getter><![CDATA[
					var container = this.getElementById('container');
					var value = '';
					for (var i=0 ; i< container.childNodes.length ; i++)
					{
						var child = container.childNodes[i];
						if (child.tagName == 'radio' && child.selected)
						{
							value = child.getAttribute('value');
							break;
						}
					}
					return value;
				]]></getter>
				<setter><![CDATA[	
					//wCore.debug('wBoolean.setValue :' + val);			
					var container = this.getElementById('container');
					var oldindex = container.selectedIndex;
					if (val == null || val == '' || typeof(val) != 'string')
					{
						container.selectedIndex = 0;
					}
					else
					{
						for (var i=0 ; i< container.childNodes.length ; i++)
						{
							var item = container.childNodes[i];
							if (item.getAttribute('value') == val)
							{
								container.selectedIndex = i;
								break;
							}
						}
					}
					
					this.checkReadonly();
					
					if (oldindex != container.selectedIndex)
					{
						this.dispatchChange();
					}
				]]></setter>
			</property>
					
			<method name="checkReadonly">
				<body><![CDATA[				
					if (this.hasAttribute('readonly'))
					{
						var container = this.getElementById('container');
						var currentIndex = container.selectedIndex;
						if (this.hasAttribute('disabled'))
						{
							currentIndex = 0;
						}
						for (var i=0 ; i< container.childNodes.length ; i++)
						{
							var item = container.childNodes[i];
							if (i == currentIndex)
							{
								item.removeAttribute('disabled');
							}
							else
							{
								item.setAttribute('disabled', 'true');
							}
						}
					}
				]]></body>
			</method>			
			
			<method name="dispatchChange">
				<body><![CDATA[
					this.validate();
					var evt = document.createEvent("HTMLEvents");
					evt.initEvent('change', true, true);
					this.dispatchEvent(evt);
				]]></body>
			</method>
			
			<method name="doValidate">
				<body><![CDATA[
						var container = this.getElementById('container');
						return container.selectedIndex > 0;
				]]></body>
			</method>
						
			<method name="isRequired">
				<body><![CDATA[
					if (this._isRequired == null)
					{
						for (var name in this._constraints)
						{
							if ( name == 'blank' )
							{
								this._isRequired = true;
								break;
							}
						}
						this._isRequired = (this._isRequired == true);
						if (this._isRequired)
						{
							this.removeAttribute('default-value');
						}					
					}
					return this._isRequired;
				]]></body>
			</method>
			
			<!--
			Indicates whether the field has a default value or not.
			-->
			<property name="hasDefaultValue"
				doc-text="Indicates whether the field has a default value or not."
				doc-type="Boolean">
				<getter><![CDATA[
					if (this.isRequired())
					{
						return false;
					}
					else
					{
						return this.hasAttribute('default-value');
					}
				]]></getter>
			</property>	
			
			<!--
			Resets the field value.
			-->
			<method name="doReset"
				doc-access="private"
				doc-overridable="true">
				<body><![CDATA[
					try
					{
						if ( this._original_value && this._original_value.length )
						{
							this.value = this._original_value;
						}
						else
						{
							this.doEmpty();
						}
					}
					catch (e)
					{
						wCore.error("wBoolean.doReset", [], e);
					}
				]]></body>
			</method>


			<!--
			Empties the field.
			-->
			<method name="doEmpty"
				doc-access="private"
				doc-final="true">
				<body><![CDATA[
					try
					{
						if (this.hasDefaultValue)
						{
							this.value = this.defaultValue;
						}
						else
						{
							this.value = '';
						}
					}
					catch (e)
					{
						wCore.error("wBoolean.doEmpty", [], e);
					}
				]]></body>
			</method>	
						
		</implementation>

		<xbl:content
			xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
			xmlns:xbl="http://www.mozilla.org/xbl">
			<hbox align="start" flex="1" xbl:inherits="flex">
				<radiogroup flex="1" orient="horizontal" xbl:inherits="flex,orient,disabled" anonid="container">
					<radio label="Null" value="" collapsed="true" selected="true"/>
					<radio label="&amp;modules.uixul.bo.general.Yes;" value="true" xbl:inherits="disabled"/>
					<radio label="&amp;modules.uixul.bo.general.No;" value="false" xbl:inherits="disabled"/>	
				</radiogroup>
				<xbl:children />
			</hbox>
		</xbl:content>
	</binding>
</bindings>