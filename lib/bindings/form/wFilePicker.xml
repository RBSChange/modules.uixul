<?xml version="1.0"?>
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:html="http://www.w3.org/1999/xhtml">

<!--
################################################################################
## wFilePicker                                                                ##
################################################################################
-->
	<binding id="wFilePicker" extends="form.wFormField#wFormField" applyauthorstyles="true">        
        <implementation>
        	  
			<field name="_quick_hasModifications">false</field>
			<field name="_uploadInProgress">0</field> 			
				
			<property name="selType">
				<getter><![CDATA[
					if (this.getAttribute('seltype') == 'single')
					{
						return 'SINGLE';
					}
					return 'MULTIPLE';
				]]></getter>
			</property>
					
			<constructor><![CDATA[
				if (this.selType == 'SINGLE')
				{
					this.input_field.setAttribute('rows', '1');
				}
				if (this.getAttribute('orderable') != 'true')
				{
					this.input_field.setAttribute('hideupdownbuttons', 'true');
				}
			]]></constructor>
			
			<!--
			Global initialization of the field.
			-->
			<method name="initialize">
				<body><![CDATA[
				]]></body>
			</method>
			
			<method name="checkclear">
				<body><![CDATA[				
				]]></body>
			</method>
			
			<method name="clearmedia">
				<body><![CDATA[					
					var vc = this.input_field.value;
					if (vc != null && vc != '')
					{
						this.doEmpty();
					} 
					else 
					{
						this.doReset();
					}
				]]></body>
			</method>
			
			<method name="disable">
				<body><![CDATA[
					wCore.debug('wFilePicker.disable()');
					this.getElementById('btnDelete').setAttribute('disable', 'true');
					this.setAttribute('cantmodify', 'true');
				]]></body>
			</method>
			
			<method name="enable">
				<body><![CDATA[
					this.getElementById('btnDelete').removeAttribute('disable');
					this.removeAttribute('cantmodify');				
					this.validate();
				]]></body>
			</method>
						
			<method name="_openFilePicker" doc-access="private">
        		<body><![CDATA[	
    				var filePicker = Components.classes["@mozilla.org/filepicker;1"].createInstance(Components.interfaces.nsIFilePicker);

    				filePicker.init(window, "Selectionner un fichier", filePicker.modeOpen);

				    // If the user selected an application
				    if(filePicker.show() == filePicker.returnOK)
				    {
				    	var parameters = {};
    				    if (this.getModule()) {parameters.lang = this.getModule().getContextLang();}
    				    
    				    if (this.selType == 'SINGLE' && this._original_value)
    				    {
    				    	parameters.cmpref = this._original_value;
    				    }
				    	this.startUploadFile(filePicker.file, parameters);
				    }
                   ]]>
                </body>
            </method>				
					
			<method	name="doValidate" >
				<body><![CDATA[
					var retValue = this._uploadInProgress == 0 && this._validate_constraints();
					return retValue;
				]]></body>
			</method>
						
			<property name="value">
				<getter><![CDATA[
					return this.input_field.value;
				]]></getter>
				<setter><![CDATA[
				    this.clear();
					this.clear();
					if (/^\d+(,?\d+)*$/.test(val))
					{
						var ids = val.split(',');
						for (var i = 0; i < ids.length; i++)
						{
						 	var intVal = parseInt(ids[i]);
						    if (!isNaN(intVal) && intVal > 0)
						    {
								this.setValueFromID(intVal);
						    }
						}
					}
				    else
				    {
				    	this.setValueFromXML(new XML(val));
				    }
				]]></setter>
			</property>

			<method name="setValueFromXML">
				<parameter name="e4x" />
				<body><![CDATA[
					for (var i=0 ; i<e4x.document.length() ; i++)
					{
						this.addDocument(e4x.document[i]);
					}
				]]></body>
			</method>

			<method name="setValueFromID">
				<parameter name="id" />
				<body><![CDATA[					
					var items = wCore.getDocumentInfo(id);
					if (items != null)
					{
						if (items.constructor == Array)
						{
							for(var i =0; i < items.length; i++)
							{
								this.addJsDocument(items[i]);
							}
						}
						else
						{
							this.addJsDocument(items);
						}
					}
				]]></body>
			</method>			

			<method name="addDocument">
				<parameter name="document" />
				<body><![CDATA[
				    if (this.selType == 'SINGLE' && this.input_field.nbItems == 1)
					{
						this.clear();
					}
					this.input_field.addItem(document.component.(@name=="id").toString(), document.component.(@name=="label").toString());
					this.setModified();
				]]></body>
			</method>
			
			<method name="addJsDocument">
				<parameter name="document" />
				<body><![CDATA[
				    if (this.selType == 'SINGLE' && this.input_field.nbItems == 1)
					{
						this.clear();
					}
					
					var id = document.id;
					var label = document.labels[document.lang];
					
					var lang = this.getModule() ? this.getModule().getContextLang() : document.lang;
					if (document.lang != lang && lang in document.labels)
					{
						var label = document.labels[lang];
					}				
					this.input_field.addItem(id.toString(), label);
					this.setModified();
				]]></body>
			</method>
			
			<method name="updateDocument">
				<parameter name="document" />
				<body><![CDATA[
					this.input_field.updateItem(document.component.(@name=="id").toString(), this.formatLabel(document));
					this.setModified();
				]]></body>
			</method>


			<method name="hasDocument">
				<parameter name="id" />
				<body><![CDATA[
					return this.input_field.hasItem(id);
				]]></body>
			</method>
			
			<method name="setModified">
				<body><![CDATA[
					this._quick_hasModifications = true;
					this.setMessage("");
					this.validate();
					this.raiseChangeEvent();
				]]></body>
			</method>
			
			<method name="doReset">
				<body><![CDATA[
					try
					{
						this.setMessage("");
						this.input_field.empty();
						var original = this._original_value;
						if (original != null && original != '')
						{
							this.setValueFromID(original);			
						}
						this._quick_hasModifications = false;
					}
					catch (e)
					{
						wCore.error("doReset", [], e);
					}							
				]]></body>
			</method>
			
			<method name="_removeSelectedItems">
				<body><![CDATA[
					try
					{
						if (this.hasAttribute('cantmodify')) 
						{
							return;
						}
						if (this.selType == 'SINGLE')
						{
							if (this.input_field.nbItems == 1)
							{
								this.clear();
								this.setModified();
							}
						}
						else
						{
							var removedCount = this.input_field.removeSelectedItems();
							if (removedCount > 0)
							{
							   this.setModified();
							}
						}
					}
					catch (e)
					{
						wCore.error("_removeSelectedItems", [], e);
					}						
				]]></body>
			</method>
			
			<method name="clear">
				<body><![CDATA[
					try
					{
						this.setMessage("");
						this.input_field.empty();
					}
					catch (e)
					{
						wCore.error("clear", [], e);
					}
				]]></body>
			</method>	
			
            <property name="hasModifications">
				<getter><![CDATA[
					wCore.debug('hasModifications : ' + this._quick_hasModifications);
					return this._quick_hasModifications;
				]]></getter>
			</property>


			<method name="setCurrentValueAsDefault">
				<body><![CDATA[
					this._original_value = this.value;
					this._quick_hasModifications = false;
					wCore.debug('setCurrentValueAsDefault');
				]]></body>
			</method>
			
			<method name="init_initial_value" >
				<body><![CDATA[					
					if (this.hasAttribute('value') )
					{
						this._original_value = this.getAttribute('value');
						this.value = this._original_value;
					}
					else if (this.hasDefaultValue )
					{
						this.value = this.defaultValue;
					}
					else
					{
						this.validate();
					}
					this._quick_hasModifications = false;
				]]></body>
			</method>
			
			<method name="doEmpty">
				<body><![CDATA[
					this.clear();
					this.validate();
					this.checkclear();
				]]></body>
			</method>
			            
			<method name="setMessage">
				<parameter name="msg"/>
				<body><![CDATA[
					if (msg && msg.length > 0)
					{
						this.getElementById("message").setAttribute("value", msg);
						this.getElementById("message").removeAttribute("hidden");
					}
					else
					{
						this.getElementById("message").setAttribute("hidden", "true");
					}
				]]></body>
			</method>
			
			<method name="onItemMoved">
				<body><![CDATA[
				    this.setModified();
				]]></body>
			</method>
			
			<method name="onDrop">
                <parameter name="element" />
                <parameter name="data" />
                <body><![CDATA[
                	try
                	{
                		wCore.debug('wFilePicker.onDrop');
                		var event = this.getDragEvent();
                		 
                        for (var i = 0; i < data.length; i++)
                        {
                            switch (data[i].flavour)
                            {
                                case "application/x-moz-file":
                                	event.stopPropagation();
                                	
                                    this.doDropFile(data[i].data);
                                    break;
                                case "listitem/component":
                                	event.stopPropagation();
                                	if (data[i].data != null && 
                                		this.hasAttribute('candropmedia') && 
                                		!this.hasAttribute('cantmodify'))
                                	{
                                    	this.doDropDocument(data[i].data);
                                    }
                                    break;
                            }
    				    }
					}
					catch (e)
					{
						wCore.error("wFilePicker.onDrop", [element, data], e);
					}
                ]]></body>
            </method>
            
			<method name="doDropDocument">
				<parameter name="sourceComponents" />
				<body><![CDATA[
					for (var i = 0 ; i < sourceComponents.document.length() ; i++)
					{
						this.addDocument(sourceComponents.document[i]);
						if (this.selType == 'SINGLE')
						{
							break;
						}
					}
				]]></body>
			</method>
			
			<method name="doDropFile">
				<parameter name="fileData" />
				<body><![CDATA[
					try
                    {
    				    for (var i = 0; i < fileData.length; i++)
    				    {
    				    	var file = fileData[i];
    				    	var parameters = {};
    				    	if (this.getModule()) {parameters.lang = this.getModule().getContextLang();}
    				    	if (this.selType == 'SINGLE' && this._original_value)
    				    	{
    				    		parameters.cmpref = this._original_value;
    				    	}
    				    	
    				    	this.startUploadFile(file.value.QueryInterface(Components.interfaces.nsIFile), parameters);
	 						if (this.selType == 'SINGLE')
							{
								break;
							}
    				    }
    				}
    				catch (e)
                    {
                        wCore.error("wBaseList.doDropFile", [fileData, targetComponent, event], e);
                    }
                ]]></body>
			</method>
			
			<method name="startUploadFile">
				<parameter name="nsIFile" />
				<!-- filename, lang ... -->
				<parameter name="parameters" />
				<body><![CDATA[
					try
                    {
                    	this._uploadInProgress += 1;  
                    	this.setMessage("&modules.uixul.bo.filePicker.Upload;");
                              	        	
                    	wCore.debug('startUploadFile : ' + nsIFile.path + ' (' + this._uploadInProgress + ')');
               	
        				var muxInput = Components.classes["@mozilla.org/io/multiplex-input-stream;1"].createInstance(Components.interfaces.nsIMultiplexInputStream);
        				var tmp = null;
        				var fileInput = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
        				fileInput.init(nsIFile, 0x01, 0444, tmp);
        				var fileContent = Components.classes["@mozilla.org/network/buffered-input-stream;1"].createInstance(Components.interfaces.nsIBufferedInputStream);
        				fileContent.init(fileInput, 4096);
        				var headerInput = Components.classes["@mozilla.org/io/string-input-stream;1"].createInstance(Components.interfaces.nsIStringInputStream);
        				
        				var headerContent = new String();
        				headerContent += "\r\n";
        				headerContent += "--111222111\r\nContent-disposition: form-data;name=\"addfile\"\r\n\r\n1";
        				headerContent += "\r\n" + "--111222111\r\n";
        				headerContent += "Content-disposition: form-data;name=\"filename\";filename=\"" + nsIFile.leafName + "\"\r\n";
        				headerContent += "Content-Type: application/octet-stream\r\n";
        				headerContent += "Content-Length: " + nsIFile.fileSize + "\r\n\r\n";
        				headerInput.setData(headerContent, headerContent.length);
        				
        				var footerInput = Components.classes["@mozilla.org/io/string-input-stream;1"].createInstance(Components.interfaces.nsIStringInputStream);
        				var footerContent = new String("\r\n--111222111--\r\n");
        				footerInput.setData(footerContent, footerContent.length);
        				
        				muxInput.appendStream(headerInput);
        				muxInput.appendStream(fileContent);
        				muxInput.appendStream(footerInput);
        				
        				var requestUrl = wCore.buildeServerUrl('uixul', 'UploadFile', parameters)
        				wCore.debug('startUploadFile.sendTo : ' + requestUrl);
        				var req = new XMLHttpRequest();
						req.open('POST', requestUrl, true);
						var xbl = this;
						req.onreadystatechange = function (aEvt) 
							{  
								if (req.readyState == 4) {xbl.onUplodedFile(req);}  
							};
						req.setRequestHeader("Content-Length", (muxInput.available()-2));
						req.setRequestHeader("Content-Type", "multipart/form-data; boundary=111222111");
    				    req.send(muxInput);
    				}
    				catch (e)
                    {
                    	this._uploadInProgress -= 1;
                        wCore.error("startUploadFile", [nsIFile], e);
                    }
                ]]></body>
			</method>					
			
			<method name="onUplodedFile">
				<parameter name="req" />
				<body><![CDATA[
					try
                    {
                    	this._uploadInProgress -= 1;
                    	wCore.debug('onUplodedFile (' + this._uploadInProgress + ')');
                    	if (this._uploadInProgress == 0) {this.setMessage("");}
                    	var result = wCore.parseJSON(req.responseText);
                    	if (result.status = 'OK')
                    	{
                    		this.addJsDocument(result.contents);
                    	}
    				}
    				catch (e)
                    {
                        wCore.error("onUplodedFile", [nsIFile], e);
                    }
                ]]></body>
             </method>
             
        </implementation>
        
		<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
			xmlns:xbl="http://www.mozilla.org/xbl">	
            <hbox xbl:inherits="flex,disabled,hidden,width">
            	<vbox flex="2">
	                <wlistbox orderable="true" anonid="inputField" hideheader="true" xbl:inherits="flex,width,rows,seltype,hideheader,disabled=readonly" style="min-height: 18px !important;">
						<toolbarbutton xbl:inherits="disabled,disabled=readonly" anonid="btnDelete" tooltiptext="&amp;modules.generic.backoffice.Deletelistitems;" image="{IconsBase}/small/shadow/delete.png" oncommand="_removeSelectedItems()" />
						<toolbarbutton xbl:inherits="disabled,disabled=readonly" anonid="upload" tooltiptext="&amp;modules.uixul.bo.filePicker.BrowseEllipsis;" image="{IconsBase}/small/shadow/folder_add.png" oncommand="_openFilePicker()" />
					</wlistbox>
					<description anonid="message" hidden="true" />
				</vbox>
                <spacer flex="1" />
            </hbox>
            <xbl:children />
        </xbl:content>
		<handlers>
			<handler event="keypress" keycode="VK_DELETE"><![CDATA[
				if (!this.readonly && !this.getElementById('btnDelete').hidden)
				{
					this._removeSelectedItems(true);
				}
			]]></handler>
		</handlers>
	</binding>
</bindings>
