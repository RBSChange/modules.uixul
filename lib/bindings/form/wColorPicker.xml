<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

          <!--

          <wcolorpicker> usage (all the following attributes could be combined) :

          **************
          Simple field :
          **************

              <wcolorpicker field-name="bgcolor" />

          This field, free of all constraints, will defined the "bgcolor" value.

          This value could be used in stylesheets the following way (cf. Skin Module) :

              <style>
    		      <selector>body</selector>
    		      <declaration property="background-color" skin-ref="bgcolor">#ffffff</declaration>
    		  </style>

    	  The color value could be either :
    	   - An hexa triplet (with or without "#") : 123, #123, fff, #fff, etc.
    	   - An hexa sextuplet (with or without "#") :456ae1, #456ae1, etc.
    	   - A rgb() combination : rgb(10, 0, 255), etc.
    	   - One a the 147 standardized color names : red, green, blue, black, pink, etc.
    	   (cf. http://www.w3.org/TR/2003/CR-css3-color-20030514/#svg-color)

		  ***********************************************
          Simple field with "web-safe color" constraint :
          ***********************************************

              <wcolorpicker webSafe="true" />

          Each user-selected color will be internally converted to its closest "web-safe" equivalent.

          For example : #cb6732 will be converted to #cc6633

          ***********************************************
          Simple field with specific predefined pattern :
          ***********************************************

              <wcolorpicker pattern="#ffffff #000000 #ff00ff #123456 #abcdef" />

          By default, the widget's pattern popup gives access to a predefined primary pattern of 15
          colors (mainly based on primary colors).

          By setting the "pattern" attribute with a space-separated list of colors (up to 15), we can
          define a specific predefined pattern.

          ***************************
          Locked predefined pattern :
          ***************************

              <wcolorpicker lockPattern="true" />

          By default, when the user selects a color inside the widget's pattern popup, this popup is
          refreshed with a set of selected color's variations (luminosity-based, saturation-based and hue-based).

          By setting the "lockPattern" attribute to true, the user has no other choice but the colors
          of the predefined pattern (no displayed variations).

          *************************
          Master and slave fields :
          *************************

              <wcolorpicker field-name="bgcolor" master="true" />

              <wcolorpicker field-name="fgcolor" constraint="hue: master+180; lum: master-50%;" />

          The first field ("bgcolor") is set as the Master (master="true").

          Each time its color is changed, its related Slaves are automatically updated.

          A Slave is a field that sets a Color Constraint ("constraint" attribute) related to the Master field's value.

          In our example, the second field ("fgcolor") has a constraint with the Master field's hue and luminosity :
          each time the Master's color is modified, the Slave color is updated with a darker complementary color
          (hue + 180°, luminosity - 50%).

          ******************
          Color Constraint :
          ******************

          Color Constraint is a list of one or more "modifiers" (up to six) :

              constraint="<modifier #1>; <modifier #2>; (...) <modifier #n>;"

          Each "modifier" is composed of three parts :

              <color component> : <master name><modifier value>

          The "color component" is one of the following six available values :
              - "red" : the red component of the master's color (from 0 to 255).
              - "green" : the green component of the master's color (from 0 to 255).
              - "blue" : the blue component of the master's color (from 0 to 255).
              - "hue" : the hue component of the master's color (from 0 to 360°).
              - "lum" : the luminosity component of the master's color (from 0 to 100%).
              - "sat" : the saturation component of the master's color (from 0 to 100%).

          The "master name" is either :
              - "master" : references the Master field (the field having the "master" attribute).
              - "self" : references the current field itself (unused for the moment).
              - Any existing "field-name" value inside the current form (so a field could be linked to more than one field,
                and the Master field is not necessary the one which has the "master" attribute).

                The following field is related to three "masters" (the "real" Master, and the "logocolor" and "headingcolor" fields) :

                <wcolorpicker constraint="red: master*2; green: logocolor/2; blue: headingcolor+50%;" />

          The "modifier value" is either :
              - An absolute value.
              - A relative value with an operator (+, -, * or /).
              - A percentage value with an operator (+ or - only).

          HLS only constraints :

              If you only set a constraint based on the hue, lum or sat components (without
          setting any constraint related to the red, green or blue components), then the HLS constraints are
          systematically applied on the RGB values of the Master field, for example :

              <wcolorpicker constraint="hue: master+180;" />

              is equivalent to

              <wcolorpicker constraint="red: master; green: master; blue: master; hue: master+180;" />

          Component inversion :

              If you only want to get the opposite color of one field (for example : black for white, etc.) then you
              only need to set the following constraint :

              <wcolorpicker constraint="red: -master; green: -master; blue: -master;" />

          *******************
          Locked Constraint :
          *******************

              <wcolorpicker lockConstraint="true" />

          By default, the user is able to unlock the defined constraint in order to manually set a color
          of his own choice.

          By setting the "lockConstraint" attribute to true, the input field (and its related pattern popup) is disabled.

          -->

<binding id="wBaseColorPicker" extends="form.wFormField#wFormField" applyauthorstyles="true">

	<resources>
		<stylesheet src="modules.uixul.wColorPicker" />
	</resources>

	<implementation>

	    <field name="preventValidationLoop">0</field>

	    <field name="popupColorNames" readonly="true"><![CDATA[
            [ "a1", "b1", "c1", "d1", "e1", "a2", "b2", "c2", "d2", "e2", "a3", "b3", "c3", "d3", "e3", "a4", "b4", "c4", "d4", "e4", "a5", "b5", "c5", "d5", "e5", "a6", "b6", "c6", "d6", "e6" ]
        ]]></field>

        <field name="defaultPattern" readonly="true"><![CDATA[
            [ "#ffffff", "#c0c0c0", "#808080", "#000000", "#800000", "#ff0000", "#ffa500", "#ffff00", "#00ff00", "#00ffff", "#0000ff", "#ff00ff", "#800080", "#008000", "#000080" ]
        ]]></field>

	    <field name="allowedColorNames" readonly="true"><![CDATA[
            [
                {name: "aliceblue", value: "#f0f8ff"},
                {name: "antiquewhite", value: "#faebd7"},
                {name: "aqua", value: "#00ffff"},
                {name: "aquamarine", value: "#7fffd4"},
                {name: "azure", value: "#f0ffff"},
                {name: "beige", value: "#f5f5dc"},
                {name: "bisque", value: "#ffe4c4"},
                {name: "black", value: "#000000"},
                {name: "blanchedalmond", value: "#ffebcd"},
                {name: "blue", value: "#0000ff"},
                {name: "blueviolet", value: "#8a2be2"},
                {name: "brown", value: "#a52a2a"},
                {name: "burlywood", value: "#deb887"},
                {name: "cadetblue", value: "#5f9ea0"},
                {name: "chartreuse", value: "#7fff00"},
                {name: "chocolate", value: "#d2691e"},
                {name: "coral", value: "#ff7f50"},
                {name: "cornflowerblue", value: "#6495ed"},
                {name: "cornsilk", value: "#fff8dc"},
                {name: "crimson", value: "#dc143c"},
                {name: "cyan", value: "#00ffff"},
                {name: "darkblue", value: "#00008b"},
                {name: "darkcyan", value: "#008b8b"},
                {name: "darkgoldenrod", value: "#b8860b"},
                {name: "darkgray", value: "#a9a9a9"},
                {name: "darkgrey", value: "#a9a9a9"},
                {name: "darkgreen", value: "#006400"},
                {name: "darkkhaki", value: "#bdb76b"},
                {name: "darkmagenta", value: "#8b008b"},
                {name: "darkolivegreen", value: "#556b2f"},
                {name: "darkorange", value: "#ff8c00"},
                {name: "darkorchid", value: "#9932cc"},
                {name: "darkred", value: "#8b0000"},
                {name: "darksalmon", value: "#e9967a"},
                {name: "darkseagreen", value: "#8fbc8f"},
                {name: "darkslateblue", value: "#483d8b"},
                {name: "darkslategray", value: "#2f4f4f"},
                {name: "darkslategrey", value: "#2f4f4f"},
                {name: "darkturquoise", value: "#00ced1"},
                {name: "darkviolet", value: "#9400d3"},
                {name: "deeppink", value: "#ff1493"},
                {name: "deepskyblue", value: "#00bfff"},
                {name: "dimgray", value: "#696969"},
                {name: "dimgrey", value: "#696969"},
                {name: "dodgerblue", value: "#1e90ff"},
                {name: "firebrick", value: "#b22222"},
                {name: "floralwhite", value: "#fffaf0"},
                {name: "forestgreen", value: "#228b22"},
                {name: "fuchsia", value: "#ff00ff"},
                {name: "gainsboro", value: "#dcdcdc"},
                {name: "ghostwhite", value: "#f8f8ff"},
                {name: "gold", value: "#ffd700"},
                {name: "goldenrod", value: "#daa520"},
                {name: "gray", value: "#808080"},
                {name: "grey", value: "#808080"},
                {name: "green", value: "#008000"},
                {name: "greenyellow", value: "#adff2f"},
                {name: "honeydew", value: "#f0fff0"},
                {name: "hotpink", value: "#ff69b4"},
                {name: "indianred", value: "#cd5c5c"},
                {name: "indigo", value: "#4b0082"},
                {name: "ivory", value: "#fffff0"},
                {name: "khaki", value: "#f0e68c"},
                {name: "lavender", value: "#e6e6fa"},
                {name: "lavenderblush", value: "#fff0f5"},
                {name: "lawngreen", value: "#7cfc00"},
                {name: "lemonchiffon", value: "#fffacd"},
                {name: "lightblue", value: "#add8e6"},
                {name: "lightcoral", value: "#f08080"},
                {name: "lightcyan", value: "#e0ffff"},
                {name: "lightgoldenrodyellow", value: "#fafad2"},
                {name: "lightgray", value: "#d3d3d3"},
                {name: "lightgrey", value: "#d3d3d3"},
                {name: "lightgreen", value: "#90ee90"},
                {name: "lightpink", value: "#ffb6c1"},
                {name: "lightsalmon", value: "#ffa07a"},
                {name: "lightseagreen", value: "#20b2aa"},
                {name: "lightskyblue", value: "#87cefa"},
                {name: "lightslategray", value: "#778899"},
                {name: "lightslategrey", value: "#778899"},
                {name: "lightsteelblue", value: "#b0c4de"},
                {name: "lightyellow", value: "#ffffe0"},
                {name: "lime", value: "#00ff00"},
                {name: "limegreen", value: "#32cd32"},
                {name: "linen", value: "#faf0e6"},
                {name: "magenta", value: "#ff00ff"},
                {name: "maroon", value: "#800000"},
                {name: "mediumaquamarine", value: "#66cdaa"},
                {name: "mediumblue", value: "#0000cd"},
                {name: "mediumorchid", value: "#ba55d3"},
                {name: "mediumpurple", value: "#9370d8"},
                {name: "mediumseagreen", value: "#3cb371"},
                {name: "mediumslateblue", value: "#7b68ee"},
                {name: "mediumspringgreen", value: "#00fa9a"},
                {name: "mediumturquoise", value: "#48d1cc"},
                {name: "mediumvioletred", value: "#c71585"},
                {name: "midnightblue", value: "#191970"},
                {name: "mintcream", value: "#f5fffa"},
                {name: "mistyrose", value: "#ffe4e1"},
                {name: "moccasin", value: "#ffe4b5"},
                {name: "navajowhite", value: "#ffdead"},
                {name: "navy", value: "#000080"},
                {name: "oldlace", value: "#fdf5e6"},
                {name: "olive", value: "#808000"},
                {name: "olivedrab", value: "#6b8e23"},
                {name: "orange", value: "#ffa500"},
                {name: "orangered", value: "#ff4500"},
                {name: "orchid", value: "#da70d6"},
                {name: "palegoldenrod", value: "#eee8aa"},
                {name: "palegreen", value: "#98fb98"},
                {name: "paleturquoise", value: "#afeeee"},
                {name: "palevioletred", value: "#d87093"},
                {name: "papayawhip", value: "#ffefd5"},
                {name: "peachpuff", value: "#ffdab9"},
                {name: "peru", value: "#cd853f"},
                {name: "pink", value: "#ffc0cb"},
                {name: "plum", value: "#dda0dd"},
                {name: "powderblue", value: "#b0e0e6"},
                {name: "purple", value: "#800080"},
                {name: "red", value: "#ff0000"},
                {name: "rosybrown", value: "#bc8f8f"},
                {name: "royalblue", value: "#4169e1"},
                {name: "saddlebrown", value: "#8b4513"},
                {name: "salmon", value: "#fa8072"},
                {name: "sandybrown", value: "#f4a460"},
                {name: "seagreen", value: "#2e8b57"},
                {name: "seashell", value: "#fff5ee"},
                {name: "sienna", value: "#a0522d"},
                {name: "silver", value: "#c0c0c0"},
                {name: "skyblue", value: "#87ceeb"},
                {name: "slateblue", value: "#6a5acd"},
                {name: "slategray", value: "#708090"},
                {name: "slategrey", value: "#708090"},
                {name: "snow", value: "#fffafa"},
                {name: "springgreen", value: "#00ff7f"},
                {name: "steelblue", value: "#4682b4"},
                {name: "tan", value: "#d2b48c"},
                {name: "teal", value: "#008080"},
                {name: "thistle", value: "#d8bfd8"},
                {name: "tomato", value: "#ff6347"},
                {name: "transparent", value: "transparent"},
                {name: "turquoise", value: "#40e0d0"},
                {name: "violet", value: "#ee82ee"},
                {name: "wheat", value: "#f5deb3"},
                {name: "white", value: "#ffffff"},
                {name: "whitesmoke", value: "#f5f5f5"},
                {name: "yellow", value: "#ffff00"},
                {name: "yellowgreen", value: "#9acd32"}
            ]
        ]]></field>

		<property name="defaultValue">
			<getter>
			<![CDATA[
				if (this.hasAttribute('defaultValue'))
				{
					return this.getAttribute('defaultValue');
				}
				return '';
			]]>
			</getter>
		</property>

		<property name="userValue">
	 		<getter>
	 		<![CDATA[
	 		    return this.getElementById("inputField").value;
	 		]]>
	 		</getter>
	 		<setter>
	 		<![CDATA[
	 		    val = String(val);
    	 		if (val != "")
    	 		{
        	 		this.getElementById("inputField").value = val;
        		}
        		this.doValidate();
			]]>
	 		</setter>
	 	</property>

	 	<property name="actualValue">
	 		<getter>
	 		<![CDATA[
	 		    return this.getElementById("actualValue").value;
	 		]]>
	 		</getter>
	 		<setter>
	 		<![CDATA[
	 		    if (this.isColor(val))
    	 		{
    				this.getElementById("actualValue").value = this.normalizeColor(val);
    	 		}
    	 		else if (!val)
    	 		{
    	 		    this.getElementById("actualValue").value = "";
    	 		}
    	 		if (this.constraint)
		        {
		            this.getElementById("inputField").value = this.getElementById("actualValue").value;
		        }
			]]>
	 		</setter>
	 	</property>

	 	<property name="value">
	 		<getter>
	 		<![CDATA[
    	 		if (this.actualValue != "")
    	 		{
    	 		    if (this.getElementById("constraintEnabler").checked)
    	 		    {
    	 		        return this.userValue + "|" + this.actualValue + "|1";
    	 		    }
    	 		    else
    	 		    {
    	 		        return this.userValue + "|" + this.actualValue + "|0";
    	 		    }
    	 		}
	 		]]>
	 		</getter>
	 		<setter>
	 		<![CDATA[
	 		    val = String(val);
    	 		if (val != "")
    	 		{
        	 		val = val.split("|");
    	 		    this.userValue = val[0];
        	 		this.actualValue = val[1];
        	 		if (val[2] == "1" &&  this.hasAttribute('constraint'))
        	 		{
        	 		    this.getElementById("constraintEnabler").checked = true;
        	 		    this.getElementById("inputField").setAttribute("disabled", "true");
    		            this.getElementById("colorPopupButton").setAttribute("disabled", "true");
        	 		}
        	 		else
        	 		{
        	 		    this.getElementById("constraintEnabler").checked = false;
        	 		    this.getElementById("inputField").removeAttribute("disabled");
    		            this.getElementById("colorPopupButton").removeAttribute("disabled");
        	 		}
        	     }
			]]>
	 		</setter>
	 	</property>

	 	<property name="webSafe">
			<getter>
			<![CDATA[
				if (this.hasAttribute('webSafe'))
				{
					return this.getAttribute('webSafe');
				}
				return false;
			]]>
			</getter>
			<setter>
			<![CDATA[
				this.setAttribute('webSafe', val);
			]]>
			</setter>
		</property>

		<property name="isMaster">
			<getter>
			<![CDATA[
				if (this.hasAttribute('master')
				&& (this.getAttribute('master') == "true"))
				{
					return true;
				}
				return false;
			]]>
			</getter>
		</property>

		<property name="constraint">
			<getter>
			<![CDATA[
				if (this.hasAttribute('constraint') && this.getElementById("constraintEnabler").checked)
				{
					return this.getAttribute('constraint');
				}
				return false;
			]]>
			</getter>
		</property>

		<property name="lockPattern">
			<getter>
			<![CDATA[
				if (this.hasAttribute('lockPattern')
				&& (this.getAttribute('lockPattern') == "true"))
				{
					return true;
				}
				return false;
			]]>
			</getter>
		</property>

		<property name="pattern">
			<getter>
			<![CDATA[
				if (this.hasAttribute('pattern'))
				{
					return this.getAttribute('pattern');
				}
				return false;
			]]>
			</getter>
		</property>

		<property name="master">
			<getter>
			<![CDATA[
                for (var i in this.form._fields)
                {
                    if ((this.form._fields[i].tagName == "xul:wcolorpicker")
                    && (this.form._fields[i].isMaster))
                    {
                        return this.form._fields[i];
                    }
                }
                return false;
			]]>
			</getter>
		</property>

		<constructor><![CDATA[
		    this.getElementById("constraintEnabler").checked = true;

		    if (this.constraint)
		    {
		        this.getElementById("inputField").setAttribute("disabled", "true");
		        this.getElementById("colorPopupButton").setAttribute("disabled", "true");
		        if (this.hasAttribute("lockConstraint") && this.getAttribute("lockConstraint") == "true")
    		    {
    		        this.getElementById("constraintEnabler").setAttribute("disabled", "true");
    		        this.getElementById("constraintEnabler").setAttribute("hidden", "true");
    		    }
		    }
		    else
		    {
		        this.getElementById("constraintEnabler").setAttribute("hidden", "true");
		    }
		    this.getElementById('inputPreview').style.background = "url({IconsBase}/small/bullet_ball_glass_grey.png) #fff center no-repeat";

		    this.reset();

		    // this.doValidate();
		]]></constructor>

		<method name="isColor">
			<parameter name="val" />
			<body>
			<![CDATA[
			    val = new String(val);
			    val = val.toLowerCase();
				if (val != "")
				{
				    if (val.match(/^#?[0-9a-f]{3}$/))
				    {
				        return true;
				    }
				    if (val.match(/^#?[0-9a-f]{6}$/))
				    {
				        return true;
				    }
				    if (val.match(/^rgb\(\d+,\s?\d+,\s?\d+\)$/))
				    {
				        return true;
				    }
				    if (val.match(/^[a-z]+$/))
				    {
				        for (var i in this.allowedColorNames)
				        {
				            if (this.allowedColorNames[i].name == val)
				            {
				                return true;
				            }
				        }
				    }
				}
				return false;
			]]>
			</body>
		</method>

		<method name="normalizeColor">
			<parameter name="val" />
			<body>
			<![CDATA[
			    val = new String(val);
			    val = val.toLowerCase();
			    var newVal = "";
			    if (val.match(/^#?[0-9a-f]{3}$/))
			    {
			        var match = val.match(/^#?([0-9a-f]{1})([0-9a-f]{1})([0-9a-f]{1})$/);
			        newVal = "#" + match[1] + match[1] + match[2] + match[2] + match[3] + match[3];
			    }
			    else if (val.match(/^#[0-9a-f]{6}$/))
			    {
			        newVal = val;
			    }
			    else if (val.match(/^[0-9a-f]{6}$/))
			    {
			        newVal = "#" + val;
			    }
			    else if (val.match(/^rgb\(\d+,\s?\d+,\s?\d+\)$/))
			    {
			        var match = val.match(/^rgb\((\d+),\s?(\d+),\s?(\d+)\)$/);
			        newVal = "#" + dec2hex(match[1]) + dec2hex(match[2]) + dec2hex(match[3]);
			    }
			    if (val.match(/^[a-z]+$/))
			    {
		            for (var i in this.allowedColorNames)
			        {
			            if (this.allowedColorNames[i].name == val)
			            {
			                newVal = this.allowedColorNames[i].value;
			                break;
			            }
			        }
			    }
			    if (newVal)
			    {
			        newVal = newVal.toLowerCase();
    			    if (this.webSafe)
    				{
    				    newVal = this.colorToWebSafe(newVal);
    				}
    				return newVal;
    		    }
    		    return false;
			]]>
			</body>
		</method>

		<method name="colorToRGB">
			<parameter name="color" />
			<body>
			<![CDATA[
			    var cmp = color.match(/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/);
			    var rgb = { red: hex2dec(cmp[1]), green: hex2dec(cmp[2]), blue: hex2dec(cmp[3])};
        		return rgb;
		    ]]>
			</body>
		</method>

		<method name="colorToWebSafe">
			<parameter name="color" />
			<body>
			<![CDATA[
        		var cmp = this.colorToRGB(color);
	            return this.rgbToWebSafe(cmp.red, cmp.green, cmp.blue);
		    ]]>
			</body>
		</method>

		<method name="rgbToWebSafe">
			<parameter name="red" />
			<parameter name="green" />
			<parameter name="blue" />
			<body>
			<![CDATA[
        		red = Math.round(red/51) * 51;
        		green = Math.round(green/51) * 51;
        		blue = Math.round(blue/51) * 51;
	            var color = "#" + dec2hex(red) + dec2hex(green) + dec2hex(blue);
	            return color.toLowerCase();
		    ]]>
			</body>
		</method>

		<method name="colorToGray">
			<parameter name="color" />
			<body>
			<![CDATA[
        		var cmp = this.colorToRGB(color);
	            return this.rgbToGray(cmp.red, cmp.green, cmp.blue);
		    ]]>
			</body>
		</method>

		<method name="rgbToGray">
			<parameter name="red" />
			<parameter name="green" />
			<parameter name="blue" />
			<body>
			<![CDATA[
		        var l = Math.round((red * 0.299) + (green * 0.587) + (blue * 0.114));
		        var gray = dec2hex(l);
	            var color = "#" + gray + gray + gray;
	            return color.toLowerCase()
	        ]]>
			</body>
		</method>

		<method name="rgbToColor">
			<parameter name="red" />
			<parameter name="green" />
			<parameter name="blue" />
			<body>
			<![CDATA[
	            var color = "#" + dec2hex(red) + dec2hex(green) + dec2hex(blue);
	            return color.toLowerCase()
	        ]]>
			</body>
		</method>

		<method name="maximizeColor">
			<parameter name="color" />
			<body>
			<![CDATA[
	            var color = this.colorToRGB(color);
	            if (color.red < 127)
	            {
	               color.red = 0;
	            }
	            else
	            {
	               color.red = 255;
	            }
	            if (color.green < 127)
	            {
	               color.green = 0;
	            }
	            else
	            {
	               color.green = 255;
	            }
	            if (color.blue < 127)
	            {
	               color.blue = 0;
	            }
	            else
	            {
	               color.blue = 255;
	            }
	            return this.rgbToColor(color.red, color.green, color.blue);
	        ]]>
			</body>
		</method>

		<method name="rgbToHls">
			<parameter name="red" />
			<parameter name="green" />
			<parameter name="blue" />
			<body>
			<![CDATA[
	            red = red / 255;
                green = green / 255;
                blue = blue / 255;
                var min = Math.min(red, green, blue);
                var max = Math.max(red, green, blue);
                var delta = max - min;
                var lum = (max + min) / 2;
                if ( delta == 0 )
                {
                    var hue = 0;
                    var sat = 0;
                }
                else
                {
                    if (lum < 0.5)
                    {
                        var sat = delta / (max + min);
                    }
                    else
                    {
                        var sat = delta / (2 - max - min);
                    }
                    var delta_red = (((max - red) / 6) + (delta / 2)) / delta;
                    var delta_green = (((max - green) / 6) + (delta / 2)) / delta;
                    var delta_blue = (((max - blue) / 6) + (delta / 2)) / delta;
                    if (red == max)
                    {
                        var hue = delta_blue - delta_green;
                    }
                    else if (green == max)
                    {
                        var hue = (1 / 3) + delta_red - delta_blue;
                    }
                    else if (blue == max)
                    {
                        var hue = (2 / 3) + delta_green - delta_red;
                    }
                    if (hue < 0)
                    {
                        hue += 1;
                    }
                    if (hue > 1)
                    {
                        hue -= 1;
                    }
                }
                return { hue: hue, lum: lum, sat: sat };
	        ]]>
			</body>
		</method>

		<method name="hlsToRgb">
			<parameter name="hue" />
			<parameter name="lum" />
			<parameter name="sat" />
			<body>
			<![CDATA[
                if (sat == 0)
                {
                    var red = lum * 255;
                    var green = lum * 255;
                    var blue = lum * 255;
                }
                else
                {
                    if (lum < 0.5)
                    {
                        var v2 = lum * (1 + sat);
                    }
                    else
                    {
                        var v2 = (lum + sat) - (sat * lum);
                    }

                    var v1 = 2 * lum - v2;

                    var red = 255 * this.hueToRgb(v1, v2, hue + (1 / 3));
                    var green = 255 * this.hueToRgb(v1, v2, hue);
                    var blue = 255 * this.hueToRgb(v1, v2, hue - (1 / 3));
                }
                return { red: Math.round(red), green: Math.round(green), blue: Math.round(blue) };
	        ]]>
			</body>
		</method>

		<method name="hueToRgb">
			<parameter name="v1" />
			<parameter name="v2" />
			<parameter name="vh" />
			<body>
			<![CDATA[
                if (vh < 0)
                {
                    vh += 1;
                }
                if (vh > 1 )
                {
                    vh -= 1;
                }
                if ((6 * vh) < 1)
                {
                    return (v1 + (v2 - v1) * 6 * vh);
                }
                if ((2 * vh) < 1)
                {
                    return v2;
                }
                if ((3 * vh) < 2)
                {
                    return (v1 + (v2 - v1) * ((2 / 3) - vh) * 6);
                }
                return v1;
	        ]]>
			</body>
		</method>

		<method name="applyConstraint">
			<body>
			<![CDATA[
    			if (this.constraint)
    			{
    			   if (this.constraint == "pattern")
    			   {
    			       var sourceElement = this.master;
    		           if (sourceElement && sourceElement.actualValue && sourceElement.pattern && this.pattern)
            		   {
            		      var sourcePattern = sourceElement.pattern.split(" ");
            		      var elementPattern = this.pattern.split(" ");
            		      var patternIndex = sourceElement.getPatternIndex(sourceElement.actualValue, sourcePattern);

            		      if (patternIndex > -1)
            		      {
            		          if (patternIndex < elementPattern.length)
            		          {
            		              this.actualValue = elementPattern[patternIndex];
            		          }
            		          else
            		          {
            		              this.actualValue = sourceElement.actualValue;
            		          }
            		      }
            		      else
            		      {
            		          this.actualValue = sourceElement.actualValue;
            		      }
        			   }
        			   else
        		       {
        		          this.actualValue = null;
        		       }
    			   }
    			   else
    			   {
        			   var constraint = assocStringToObject(this.constraint);

        			   if (!constraint)
        			   {
        			      return;
        			   }

        			   if (this.actualValue)
        		       {
        		          var self = this.colorToRGB(this.normalizeColor(this.actualValue));
        		       }
        		       else
        		       {
        		          var self = { red: 0, green: 0, blue: 0 };
        		       }
        		       if (constraint.red)
        		       {
        		           var newRed = this.applyRGBConstraintComponent("red", self, constraint.red);
        		       }
        		       else
        		       {
        		           var newRed = self.red;
        		       }
        			   if (constraint.green)
        		       {
        		           var newGreen = this.applyRGBConstraintComponent("green", self, constraint.green);
        		       }
        		       else
        		       {
        		           var newGreen = self.green;
        		       }
        			   if (constraint.blue)
        		       {
        		           var newBlue = this.applyRGBConstraintComponent("blue", self, constraint.blue);
        		       }
        		       else
        		       {
        		           var newBlue = self.blue;
        		       }
        		       if (!constraint.red && !constraint.green && !constraint.blue)
        		       {
        		           var sourceElement = this.master;
        		           if (sourceElement && sourceElement.actualValue)
            			   {
            			       source = this.colorToRGB(this.normalizeColor(sourceElement.actualValue));
            			       newRed = source.red;
            			       newGreen = source.green;
            			       newBlue = source.blue;
            			   }
            			   else
            			   {
            			       newRed = null;
            			       newGreen = null;
            			       newBlue = null;
            			   }
        		       }
        		       if (newRed != null && newGreen != null && newBlue != null)
        		       {
           		           var selfHls = this.rgbToHls(newRed, newGreen, newBlue);
                           if (constraint.hue)
            		       {
            		           var newHue = this.applyHLSConstraintComponent("hue", selfHls, constraint.hue);
            		       }
            		       else
            		       {
            		           var newHue = selfHls.hue;
            		       }
            			   if (constraint.lum)
            		       {
            		           var newLum = this.applyHLSConstraintComponent("lum", selfHls, constraint.lum);
            		       }
            		       else
            		       {
            		           var newLum = selfHls.lum;
            		       }
            			   if (constraint.sat)
            		       {
            		           var newSat = this.applyHLSConstraintComponent("sat", selfHls, constraint.sat);
            		       }
            		       else
            		       {
            		           var newSat = selfHls.sat;
            		       }
            		       self = this.hlsToRgb(newHue, newLum, newSat);
            		       this.actualValue = this.normalizeColor(this.rgbToColor(self.red, self.green, self.blue));
        		       }
        		       else if (newRed == null && newGreen == null && newBlue == null)
        		       {
        		           this.actualValue = null;
        		       }
        		    }
    			}
	        ]]>
			</body>
		</method>

		<method name="applyRGBConstraintComponent">
			<parameter name="component" />
			<parameter name="self" />
			<parameter name="constraint" />
			<body>
			<![CDATA[
    			var constraintComponent = constraint.match(/^(\-?)([a-z]*)([\-\+\/\*\s]?)([0-9\.]*)(%?)$/i);
    			var invert = (constraintComponent[1] == "-");
    			var master = constraintComponent[2];
    			var operator = constraintComponent[3];
    			if (constraintComponent[4] != "")
    			{
    			    var value = parseFloat(constraintComponent[4]);
    			}
    			else
    			{
    			    var value = "";
    			}
    			var percent = (constraintComponent[5] == "%");
       	        var source = null;
    			var finalValue = self[component];
    			if (!master)
    			{
    			    master = "self";
    			}
    			if (master == "self")
    			{
    			    source = self;
    			}
    			else if (master == "master")
    			{
    			    var sourceElement = this.master;
    			    if (sourceElement && sourceElement.actualValue)
    			    {
    			        source = this.colorToRGB(this.normalizeColor(sourceElement.actualValue));
    			    }
    			}
    			else
    			{
    			    var sourceElement = this.form.getFieldByName(master);
    			    if (sourceElement && sourceElement.actualValue)
    			    {
    			        source = this.colorToRGB(this.normalizeColor(sourceElement.actualValue));
    			    }
    			}
    			if (source)
    			{
    			    var componentValue = source[component];
    			    if (value == "")
    			    {
    			        if (master == "self")
    			        {
    			            value = self[component];
    			        }
        			    else
        			    {
        			        value = componentValue;
        			    }
    			    }
    			    if (invert)
    			    {
    			        componentValue = Math.abs(255 - componentValue);
    			        value = componentValue;
    			    }
    			    switch (operator)
    			    {
    			        case "-":
    			            if (percent)
    			            {
    			                finalValue = componentValue - (componentValue * value / 100);
    			            }
    			            else
    			            {
    			                finalValue = componentValue - value;
    			            }
    			            break;

    			        case "+":
    			            if (percent)
    			            {
    			                finalValue = componentValue + (componentValue * value / 100);
    			            }
    			            else
    			            {
    			                finalValue = componentValue + value;
    			            }
    			            break;

    			        case "/":
    			            finalValue = componentValue / value;
    			            break;

    			        case "*":
    			            finalValue = componentValue * value;
    			            break;

    			        default:
    			            if (percent)
    			            {
    			                value = (255 * value) / 100;
    			            }
    			            finalValue = value;
    			            break;
    			    }
    			    finalValue = Math.min(255, Math.max(0, finalValue));
    			}
    			else
    			{
    			    return null;
    			}
    			return Math.round(finalValue);
	        ]]>
			</body>
		</method>

		<method name="applyHLSConstraintComponent">
			<parameter name="component" />
			<parameter name="self" />
			<parameter name="constraint" />
			<body>
			<![CDATA[
    			var constraintComponent = constraint.match(/^(\-?)([a-z]*)([\-\+\/\*\s]?)([0-9\.]*)(%?)$/i);
    			var invert = (constraintComponent[1] == "-");
    			var master = constraintComponent[2];
    			var operator = constraintComponent[3];
    			if (constraintComponent[4] != "")
    			{
    			    var value = parseFloat(constraintComponent[4]);
    			}
    			else
    			{
    			    var value = "";
    			}
    			var percent = (constraintComponent[5] == "%");
    			var source = null;
    			var finalValue = self[component];
    			if (!master)
    			{
    			    master = "self";
    			}
    			if (master == "self")
    			{
    			    source = self;
    			}
    			else if (master == "master")
    			{
    			    var sourceElement = this.master;
    			    if (sourceElement && sourceElement.actualValue)
    			    {
    			        var sourceRgb = this.colorToRGB(this.normalizeColor(sourceElement.actualValue));
    			        source = this.rgbToHls(sourceRgb.red, sourceRgb.green, sourceRgb.blue);
    			    }
    			}
    			else
    			{
    			    var sourceElement = this.form.getFieldByName(master);
    			    if (sourceElement && sourceElement.actualValue)
    			    {
    			        var sourceRgb = this.colorToRGB(this.normalizeColor(sourceElement.actualValue));
    			        source = this.rgbToHls(sourceRgb.red, sourceRgb.green, sourceRgb.blue);
    			    }
    			}
    			if (source)
    			{
    			    var componentValue = source[component];
    			    if (value == "")
    			    {
    			        if (master == "self")
    			        {
    			            value = self[component];
    			        }
        			    else
        			    {
        			        value = componentValue;
        			    }
    			    }
    			    else if ((value > 1) && ((operator == "+") || (operator == "-")) && !percent)
    			    {
    			        switch (component)
    			        {
    			            case "hue":
    			                value = value / 360;
    			                break;

      			            case "lum":
      			            case "sat":
    			                value = value / 100;
    			                break;

    			        }
    			    }
    			    if (invert)
    			    {
    			        componentValue = componentValue + 0.5;
                        if (componentValue > 1)
                        {
                            componentValue -= 1;
                        }
    			        value = componentValue;
    			    }
    			    switch (operator)
    			    {
    			        case "-":
    			            if (percent)
    			            {
    			                finalValue = componentValue - (componentValue * value / 100);
    			            }
    			            else
    			            {
    			                finalValue = componentValue - value;
    			            }
    			            break;

    			        case "+":
    			            if (percent)
    			            {
    			                finalValue = componentValue + (componentValue * value / 100);
    			            }
    			            else
    			            {
    			                finalValue = componentValue + value;
    			            }
    			            break;

    			        case "/":
    			            finalValue = componentValue / value;
    			            break;

    			        case "*":
    			            finalValue = componentValue * value;
    			            break;

    			        default:
    			            if (value > 1)
            			    {
            			        switch (component)
            			        {
            			            case "hue":
            			                value = value / 360;
            			                break;

              			            case "lum":
              			            case "sat":
            			                value = value / 100;
            			                break;

            			        }
            			    }
    			            finalValue = value;
    			            break;
    			    }
    			    if (component == "hue")
    			    {
                        if (finalValue > 1)
                        {
                            finalValue -= 1;
                        }
                        if (finalValue < 0)
                        {
                            finalValue += 1;
                        }
                    }
    			    finalValue = Math.min(1, Math.max(0, finalValue));
    			}
    			else
    			{
    			    return null;
    			}
    			return finalValue;
	        ]]>
			</body>
		</method>

		<method name="doValidate">
			<body><![CDATA[
			    var v;
			    if ( ! this.disabled )
			    {
			        v = this.validate();
			        return v;
				}
				else
				{
					v = true;
				}
				this.set_is_valid(v);
				return v;
			]]></body>
		</method>

		<method name="validate">
			<body>
			<![CDATA[
			    var validate = false;
			    if (this.required && !this.userValue)
				{
					validate = false;
				}
				else if (!this.required && !this.userValue)
				{
					validate = true;
				}
				else
				{
				    validate = this.isColor(this.userValue);
				}
			    this.actualValue = this.userValue;
			    if (this.constraint)
			    {
			        this.applyConstraint();
			    }
			    if (this.preventValidationLoop < 2)
			    {
				    if (this.isMaster)
				    {
				        for (var i in this.form._fields)
                        {
                            if ((this.form._fields[i].tagName == "xul:wcolorpicker")
                            && (this.form._fields[i] != this)
                            && (this.form._fields[i].constraint)
                            && (this.form._fields[i].constraint.match(/master/i) || (this.form._fields[i].constraint == "pattern")))
                            {
                                this.form._fields[i].doValidate();
                                this.form._fields[i].preventValidationLoop++;
                            }
                        }
				    }
				    else
				    {
				        var regexp = new RegExp(this.name, "i");
				        for (var i in this.form._fields)
                        {
                            if ((this.form._fields[i].tagName == "xul:wcolorpicker")
                            && (this.form._fields[i] != this)
                            && (!this.form._fields[i].isMaster))
                            {
                                if ((this.form._fields[i].constraint)
                                && (this.form._fields[i].constraint.match(regexp)))
                                {
                                    this.form._fields[i].doValidate();
                                    this.form._fields[i].preventValidationLoop++;
                                }
                            }
                        }
				    }
				}
				else
				{
				    this.preventValidationLoop = 0;
				}

				this.set_is_valid(validate);
				return validate;
			]]>
			</body>
		</method>

		<method name="onValidateSuccess">
			<body>
			<![CDATA[
			    if (this.actualValue == "")
			    {
			        this.getElementById('inputPreview').style.background = "url({IconsBase}/small/bullet_ball_glass_grey.png) #fff center no-repeat";
			    }
			    else
			    {
			        this.getElementById('inputPreview').style.background = this.actualValue;
			    }
			    this.getElementById('inputPreview').setAttribute("tooltiptext", this.actualValue);
			]]>
			</body>
		</method>

		<method name="onValidateError">
			<body>
			<![CDATA[
			    this.getElementById('inputPreview').style.background = "url({IconsBase}/small/bullet_ball_glass_red.png) #fff center no-repeat";
			    this.getElementById('inputPreview').setAttribute("tooltiptext", "");
			]]>
			</body>
		</method>

		<method name="reset">
			<body>
			<![CDATA[
				if (this.defaultValue)
				{
					this.value = this.defaultValue + "|" + this.defaultValue + "|1";
				}
				else if (!this.constraint)
				{
					this.empty();
				}
			]]>
			</body>
		</method>

		<method name="empty">
			<body>
			<![CDATA[
				this.value = "";
			]]>
			</body>
		</method>

		<method name="toggleConstraint">
			<body>
			<![CDATA[
			    this.doValidate();
			    if (this.getElementById("constraintEnabler").checked)
    		    {
    		        this.getElementById("inputField").setAttribute("disabled", "true");
    		        this.getElementById("colorPopupButton").setAttribute("disabled", "true");
    		    }
    		    else
    		    {
    		        this.getElementById("inputField").removeAttribute("disabled");
    		        this.getElementById("colorPopupButton").removeAttribute("disabled");
    		    }
			]]>
			</body>
		</method>

		<method name="choiceColor">
			<parameter name="element" />
			<body>
			<![CDATA[
			    this.getElementById("colorPopupSelector").selectedItem = element.previousSibling;
			    if (!this.lockPattern)
			    {
			        this.setColorAfterPopupOpen(true, this.getColorFromPopup(element));
			    }
			]]>
			</body>
		</method>
	
		<method name="getColorFromPopup">
			<parameter name="element" />
			<body>
			<![CDATA[
			    var rgbColor = element.style.backgroundColor;
			    var colorMatch = rgbColor.match(/^rgb\((\d+),\s?(\d+),\s?(\d+)\)$/);
			    var newColor = "#" + dec2hex(colorMatch[1]) + dec2hex(colorMatch[2]) + dec2hex(colorMatch[3]);
                return this.normalizeColor(newColor);
			]]>
			</body>
		</method>

		<method name="setColorToPopup">
			<parameter name="element" />
			<parameter name="color" />
			<body>
			<![CDATA[
			    color = this.normalizeColor(color);
			    element.style.backgroundColor = color;
			    element.setAttribute("tooltiptext", color);
			]]>
			</body>
		</method>

		<method name="setColorAfterPopupOpen">
			<parameter name="init" />
			<parameter name="color" />
			<body>
			<![CDATA[	
			    if (color == "current")
			    {
			        color = this.actualValue;
			    }
                if (init)
                {
                	this.getElementById("stdColorPopupSelector").color = color;             	
                    this.getElementById("additionalColors").setAttribute("collapsed", "true");
                    if (color && this.isColor(color) && (!this.pattern || (this.pattern && !this.lockPattern)))
                    {
                        // init color ring from current defined color :
                        var pattern = [];
                        for (var i in this.popupColorNames)
                        {
                            var self = this.colorToRGB(color);
                            var selfHls = this.rgbToHls(self.red, self.green, self.blue);
                            switch (this.popupColorNames[i])
                            {
                                case "a1":
                                    var newHue = selfHls.hue;
                        		    var newLum = this.applyHLSConstraintComponent("lum", selfHls, "self*0.1");
                        		    var newSat = selfHls.sat;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                    			    break;

                                case "b1":
                        		    var newHue = selfHls.hue;
                        		    var newLum = this.applyHLSConstraintComponent("lum", selfHls, "self*0.5");
                        		    var newSat = selfHls.sat;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                    			    break;

                    			case "c1":
                                    var newHue = selfHls.hue;
                        		    var newLum = this.applyHLSConstraintComponent("lum", selfHls, "self*1.2");
                        		    var newSat = selfHls.sat;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                        		    break;

                    			case "d1":
                        		    var newHue = selfHls.hue;
                        		    var newLum = this.applyHLSConstraintComponent("lum", selfHls, "self*1.5");
                        		    var newSat = selfHls.sat;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                    			    break;

                    			case "e1":
                        		    var newHue = selfHls.hue;
                        		    var newLum = this.applyHLSConstraintComponent("lum", selfHls, "self*2");
                        		    var newSat = selfHls.sat;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                    			    break;

                                case "a2":
                                    newColor = this.colorToGray(color);
                    			    break;

                                case "b2":
                        		    var newHue = selfHls.hue;
                        		    var newLum = selfHls.lum;
                        		    var newSat = 0.25;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                    			    break;

                                case "c2":
                                    var newColor = color;
                                    break;

                    			case "d2":
                        		    var newHue = selfHls.hue;
                        		    var newLum = selfHls.lum;
                        		    var newSat = 0.75;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                    			    break;

                    			case "e2":
                        		    var newHue = selfHls.hue;
                        		    var newLum = selfHls.lum;
                        		    var newSat = 1;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                        		    newColor = this.maximizeColor(newColor);
                    			    break;

                    		    case "a3":
                                    var newHue = this.applyHLSConstraintComponent("hue", selfHls, "self+330");
                        		    var newLum = selfHls.lum;
                        		    var newSat = selfHls.sat;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                    			    break;

                                case "b3":
                        		    var newHue = this.applyHLSConstraintComponent("hue", selfHls, "self+255");
                        		    var newLum = selfHls.lum;
                        		    var newSat = selfHls.sat;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                    			    break;

                                case "c3":
                                    var newHue = this.applyHLSConstraintComponent("hue", selfHls, "self+180");
                        		    var newLum = selfHls.lum;
                        		    var newSat = selfHls.sat;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                                    break;

                    			case "d3":
                        		    var newHue = this.applyHLSConstraintComponent("hue", selfHls, "self+105");;
                        		    var newLum = selfHls.lum;
                        		    var newSat = selfHls.sat;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                    			    break;

                    			case "e3":
                        		    var newHue = this.applyHLSConstraintComponent("hue", selfHls, "self+30");
                        		    var newLum = selfHls.lum;
                        		    var newSat = selfHls.sat;
                        		    var newColor = this.hlsToRgb(newHue, newLum, newSat);
                        		    newColor = this.rgbToColor(newColor.red, newColor.green, newColor.blue);
                    			    break;
                            }
                            pattern[i] = newColor;
                            this.fillColorRing(pattern);
                        }
                        this.getElementById("lumGroupBox").removeAttribute("class");
                        this.getElementById("satGroupBox").removeAttribute("class");
                        this.getElementById("hueGroupBox").removeAttribute("class");

                        this.getElementById("colorPopupSelector").selectedItem = this.getRingElement("c2").previousSibling;
                    }
                    else
                    {
                       // init color ring from predefined pattern :
                       if (this.pattern)
                       {
                           var specificPattern = this.pattern.split(" ");

                           if (specificPattern.length > 15)
                           {
                               this.getElementById("additionalColors").removeAttribute("collapsed");
                           }

                           // widget defined pattern :
                           this.fillColorRing(specificPattern);

                           this.selectClosestColor(color, specificPattern);
                       }
                       else
                       {
                           // default pattern :
                           this.fillColorRing(this.defaultPattern);

                           this.selectClosestColor(color, this.defaultPattern);
                       }

                       this.getElementById("lumGroupBox").setAttribute("class", "hiddenGroupBox");
                       this.getElementById("satGroupBox").setAttribute("class", "hiddenGroupBox");
                       this.getElementById("hueGroupBox").setAttribute("class", "hiddenGroupBox");
                    }

                }
			]]>
			</body>
		</method>

		<method name="selectClosestColor">
		    <parameter name="color" />
			<parameter name="pattern" />
			<body>
			<![CDATA[
			    this.getElementById("colorPopupSelector").selectedItem = this.getRingElement("a1").previousSibling;

                if (pattern.length > 15)
                {
                    var maxCount = 30;
                }
                else
                {
                    var maxCount = 15;
                }

                for (var i = 0; i < maxCount; i++)
                {
                   if (this.getRingColor(this.popupColorNames[i]) == color)
                   {
                        this.getElementById("colorPopupSelector").selectedItem = this.getRingElement(this.popupColorNames[i]).previousSibling;
                        break;
                   }
                }
			]]>
			</body>
		</method>

		<method name="getPatternIndex">
		    <parameter name="color" />
			<parameter name="pattern" />
			<body>
			<![CDATA[
                for (var i = 0; i < pattern.length; i++)
                {
                   if (pattern[i] == color)
                   {
                        return i;
                   }
                }

                return -1;
			]]>
			</body>
		</method>

		<method name="fillColorRing">
			<parameter name="pattern" />
			<body>
			<![CDATA[
			    var count = 0;

		if (pattern.length > 15)
                {
                    var maxCount = 30;
                }
                else
                {
                    var maxCount = 15;
                }

		for (var i = 0; i < pattern.length; i++)
                {
                   if (pattern[i])
                   {
                       try
		       {
		       	    if (i < maxCount)
			    {
                            	this.setRingColor(this.popupColorNames[i], pattern[i]);
                            	count++;
			    }
                       }
                       catch (e)
                       {
                       		wCore.error("wBaseColorPicker.fillColorRing", [pattern], e);
                       }
                   }
                }

                for (var i = count; i < maxCount; i++)
                {
                   var index = i;

                   if (index > 14)
                   {
                       index = index - 15;
                   }

                   if (this.defaultPattern[index])
                   {
                       try
                       {
                           this.setRingColor(this.popupColorNames[i], this.defaultPattern[index]);
                       }
                       catch (e)
                       {
                       		wCore.error("wBaseColorPicker.fillColorRing", [pattern], e);
                       }
                   }
                }
			]]>
			</body>
		</method>

		<method name="resetColorPopup">
			<body>
			<![CDATA[
                this.setColorAfterPopupOpen(true, "current");
			]]>
			</body>
		</method>

		<method name="switchPopupMode">
			<body>
			<![CDATA[
				var button = this.getElementById("switchPopupMode");
				var stdColorPopupSelector = this.getElementById("stdColorPopupSelector");
				var variationPopup = this.getElementById("variationPopup");
                if (stdColorPopupSelector.getAttribute("collapsed") == "true")
                {
                	stdColorPopupSelector.removeAttribute("collapsed");
                	variationPopup.setAttribute("collapsed", "true");
                	
                	button.setAttribute("label", "&amp;modules.uixul.bo.colorPicker.Extend;");
                	button.setAttribute("image", "{IconsBase}/small/shadow/add.png");
                }
                else
                {
                	var color = stdColorPopupSelector.color;
                	wCore.debug('Color :' + color);
                	
                	variationPopup.removeAttribute("collapsed");
                	stdColorPopupSelector.setAttribute("collapsed", "true"); 
                	
                	button.setAttribute("label", "&amp;modules.uixul.bo.colorPicker.Standard;");
                	button.setAttribute("image", "{IconsBase}/small/shadow/nav_plain_green.png");
                	if (color != null)
                	{
                		color = this.normalizeColor(color);
                		wCore.debug('normalizeColor :' + color);	
                		this.setColorAfterPopupOpen(true, color);
                	}  
                	else
                	{
                	   	this.setColorAfterPopupOpen(true, "current");
                	}       
                }
			]]>
			</body>
		</method>
		
		
		<method name="applyColorPopup">
			<body>
			<![CDATA[
				var stdColorPopupSelector = this.getElementById("stdColorPopupSelector");
				if (stdColorPopupSelector.getAttribute("collapsed") != "true")
				{
					var newColor = stdColorPopupSelector.color;
				}
				else
				{
			    	var element = this.getElementById(this.getElementById("colorPopupSelector").selectedItem.value);
			    	var newColor = this.getColorFromPopup(element);
			    }
                this.userValue = newColor;
                this.getElementById("colorPopup").hidePopup();
                this.raiseChangeEvent();
			]]>
			</body>
		</method>

		<method name="getRingElement">
			<parameter name="name" />
			<body>
			<![CDATA[
				return this.getElementById(name);
			]]>
			</body>
		</method>

		<method name="getRingColor">
			<parameter name="name" />
			<body>
			<![CDATA[
				return this.getColorFromPopup(this.getRingElement(name));
			]]>
			</body>
		</method>

		<method name="setRingColor">
			<parameter name="name" />
			<parameter name="val" />
			<body>
			<![CDATA[
				this.setColorToPopup(this.getRingElement(name), val);
			]]>
			</body>
		</method>

	</implementation>

</binding>

<binding id="wColorPicker" extends="form.wColorPicker#wBaseColorPicker" applyauthorstyles="true">

	<xbl:content
			xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
			xmlns:xbl="http://www.mozilla.org/xbl">

    	<box anonid="inputPreview"
        	 class="inputPreview"
        	 tooltiptext="" />

		<textbox anonid="inputField"
		         class="inputField"
		         size="10"
		         xbl:inherits="disabled" />

		<toolbarbutton anonid="colorPopupButton"
		               type="menu"
        		       class="colorPopupButton"
        		       image="{IconsBase}/small/shadow/colors.png" style="border-top: 1px solid #a5acb2 !important; border-right: 1px solid #a5acb2 !important; border-bottom: 1px solid #a5acb2 !important; margin-top: 2px !important; margin-right: 4px !important; margin-bottom: 2px !important; margin-left: -4px !important;">
	       <menupopup anonid="colorPopup" onpopupshown="setColorAfterPopupOpen(true, 'current');" class="color-picker-popup">

            <vbox class="color-picker-box">
            	<colorpicker anonid="stdColorPopupSelector" />
                <vbox anonid="variationPopup" collapsed="true">
    	        <radiogroup anonid="colorPopupSelector">
                <grid>
                    <columns>
                        <column flex="1"/>
                        <column flex="1"/>
                        <column flex="1"/>
                        <column flex="1"/>
                        <column flex="1"/>
                    </columns>
                    <rows>
                        <groupbox anonid="lumGroupBox">
                            <caption label="&amp;modules.uixul.bo.colorPicker.Luminance;" />
                        <row style="padding-right: 22px !important;">
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="a1" />
                                <button anonid="a1"
                                        class="colorChoiceButton"
                                        style="background-color: #ffffff"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="b1" />
                                <button anonid="b1"
                                        class="colorChoiceButton"
                                        style="background-color: #c0c0c0"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="c1" />
                                <button anonid="c1"
                                        class="colorChoiceButton"
                                        style="background-color: #808080"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="d1" />
                                <button anonid="d1"
                                        class="colorChoiceButton"
                                        style="background-color: #000000"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="e1" />
                                <button anonid="e1"
                                        class="colorChoiceButton"
                                        style="background-color: #800000"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                        </row>
                        </groupbox>
                        <groupbox anonid="satGroupBox">
                            <caption label="&amp;modules.uixul.bo.colorPicker.Saturation;" />
                        <row style="padding-right: 22px !important;">
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="a2" />
                                <button anonid="a2"
                                        class="colorChoiceButton"
                                        style="background-color: #ff0000"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="b2" />
                                <button anonid="b2"
                                        class="colorChoiceButton"
                                        style="background-color: #ffa500"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="c2" />
                                <button anonid="c2"
                                        class="colorChoiceButton"
                                        style="background-color: #ffff00"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="d2" />
                                <button anonid="d2"
                                        class="colorChoiceButton"
                                        style="background-color: #00ff00"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="e2" />
                                <button anonid="e2"
                                        class="colorChoiceButton"
                                        style="background-color: #00ffff"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                        </row>
                        </groupbox>

                        <groupbox anonid="hueGroupBox">
                            <caption label="&amp;modules.uixul.bo.colorPicker.Hue;" />
                        <row style="padding-right: 22px !important;">
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="a3" />
                                <button anonid="a3"
                                        class="colorChoiceButton"
                                        style="background-color: #0000ff"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="b3" />
                                <button anonid="b3"
                                        class="colorChoiceButton"
                                        style="background-color: #ff00ff"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="c3" />
                                <button anonid="c3"
                                        class="colorChoiceButton"
                                        style="background-color: #800080"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="d3" />
                                <button anonid="d3"
                                        class="colorChoiceButton"
                                        style="background-color: #008000"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="e3" />
                                <button anonid="e3"
                                        class="colorChoiceButton"
                                        style="background-color: #000080"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                        </row>
                        </groupbox>

                        <groupbox anonid="additionalColors" class="hiddenGroupBox" collapsed="true">
                        <row style="padding-right: 22px !important;">
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="a4" />
                                <button anonid="a4"
                                        class="colorChoiceButton"
                                        style="background-color: #ffffff"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="b4" />
                                <button anonid="b4"
                                        class="colorChoiceButton"
                                        style="background-color: #c0c0c0"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="c4" />
                                <button anonid="c4"
                                        class="colorChoiceButton"
                                        style="background-color: #808080"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="d4" />
                                <button anonid="d4"
                                        class="colorChoiceButton"
                                        style="background-color: #000000"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="e4" />
                                <button anonid="e4"
                                        class="colorChoiceButton"
                                        style="background-color: #800000"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                        </row>

                        <spacer style="height: 6px;" />

                        <row style="padding-right: 22px !important;">
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="a5" />
                                <button anonid="a5"
                                        class="colorChoiceButton"
                                        style="background-color: #ff0000"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="b5" />
                                <button anonid="b5"
                                        class="colorChoiceButton"
                                        style="background-color: #ffa500"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="c5" />
                                <button anonid="c5"
                                        class="colorChoiceButton"
                                        style="background-color: #ffff00"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="d5" />
                                <button anonid="d5"
                                        class="colorChoiceButton"
                                        style="background-color: #00ff00"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="e5" />
                                <button anonid="e5"
                                        class="colorChoiceButton"
                                        style="background-color: #00ffff"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                        </row>

                        <spacer style="height: 6px;" />

                        <row style="padding-right: 22px !important;">
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="a6" />
                                <button anonid="a6"
                                        class="colorChoiceButton"
                                        style="background-color: #0000ff"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="b6" />
                                <button anonid="b6"
                                        class="colorChoiceButton"
                                        style="background-color: #ff00ff"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="c6" />
                                <button anonid="c6"
                                        class="colorChoiceButton"
                                        style="background-color: #800080"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="d6" />
                                <button anonid="d6"
                                        class="colorChoiceButton"
                                        style="background-color: #008000"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                            <hbox flex="1" align="center">
                                <radio class="color-picker-radio" value="e6" />
                                <button anonid="e6"
                                        class="colorChoiceButton"
                                        style="background-color: #000080"
                                        oncommand="choiceColor(this);" />
                            </hbox>
                        </row>
                        </groupbox>

                    </rows>
                </grid>
                </radiogroup>
                </vbox>

            <grid>
                <columns>
                    <column flex="1"/>
                    <column flex="1"/>
                    <column flex="1"/>
                    <column flex="1"/>
                    <column flex="1"/>
                </columns>
                <rows>
                    <row>
                        <toolbarbutton anonid="colorPopupReset"
                                label="&amp;modules.uixul.bo.colorPicker.ResetSpaced;"
                                image="{IconsBase}/small/shadow/undo.png"
                                oncommand="resetColorPopup();" />
                        <spacer flex="1" />
                        <toolbarbutton anonid="switchPopupMode"
                                label="&amp;modules.uixul.bo.colorPicker.Extend;"
                                image="{IconsBase}/small/shadow/add.png"
                                oncommand="switchPopupMode();" />
                        <spacer flex="1" />
                        <toolbarbutton anonid="colorPopupApply"
                                label="&amp;modules.uixul.bo.colorPicker.ApplySpaced;"
                                image="{IconsBase}/small/shadow/check.png"
                                oncommand="applyColorPopup();" />
                    </row>
                </rows>
            </grid>
        </vbox>

	    </menupopup>
	    </toolbarbutton>

    	<checkbox anonid="constraintEnabler"
    	          class="constraintEnabler"
    	          tooltiptext="&amp;modules.uixul.bo.colorPicker.ApplyConstraints;"
    	          checked="true" oncommand="toggleConstraint();" />

		<label anonid="actualValue" value="" hidden="true" />

		<xbl:children />

		</xbl:content>

</binding>

</bindings>
