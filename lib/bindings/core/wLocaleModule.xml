<?xml version="1.0" encoding="utf-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xbl="http://www.mozilla.org/xbl">

	<binding id="wLocaleModule" extends="core.wBaseModule#wBaseModule">

		<implementation>

		    <field name="_i18n_isEditing">false</field>

		    <field name="_i18n_isSaving">false</field>

		    <field name="_i18n_isCreating">false</field>

		    <field name="_i18n_currentData">null</field>

		    <field name="_i18n_isModified">false</field>

		    <field name="_i18n_closeAfterSave">false</field>

		    <field name="_i18n_nextAfterSave">false</field>

		    <field name="_i18n_isBlocked">false</field>

		    <field name="_i18n_createAfterSave">false</field>

		    <field name="_i18n_editAfterSave">false</field>

		    <field name="_i18n_tempEdit">null</field>

		    <field name="_i18n_tempCreate">null</field>

		    <field name="_i18n_keyIsValid">false</field>

		    <field name="_i18n_isDeleting">false</field>

		    <field name="_i18n_isDuplicating">false</field>

		    <field name="_i18n_exportData">null</field>
		    
		    <field name="_search_request">null</field>
		    
		    <field name="storedSearch">[]</field>
		    
		    <field name="searchResults">[]</field>

		    <!-- The timeout ID returned by window.setTimeout() FOR VALIDATION ON INPUT -->
			<field name="input_validation_timeout_id"
				doc-access="private"
				doc-text="The timeout ID returned by window.setTimeout() FOR VALIDATION ON INPUT.">
				null
			</field>

			<!-- Default timeout for INPUT validation, in milliseconds -->
			<field name="default_input_validation_timeout"
				doc-access="private"
				doc-text="Default timeout for INPUT validation, in milliseconds.">
				250
			</field>

		    <property name="i18n_defaultLang">
				<getter><![CDATA[
					return this.getDefaultLanguage();
				]]></getter>
			</property>

			<property name="i18n_isEditing">
				<getter><![CDATA[
					return this._i18n_isEditing;
				]]></getter>
				<setter><![CDATA[
					this._i18n_isEditing = val;

					if (val)
					{
				        this.getElementById("locale-form").removeAttribute("collapsed");
					}
					else
					{
					    this.getElementById("locale-form").setAttribute("collapsed", "true");
					}
				]]></setter>
			</property>

			<property name="i18n_isSaving">
				<getter><![CDATA[
					return this._i18n_isSaving;
				]]></getter>
				<setter><![CDATA[
					this._i18n_isSaving = val;

					if (!val)
					{
					   this.getElementById("saveclose").removeAttribute("disabled");
					   this.getElementById("savenext").removeAttribute("disabled");
					   this.getElementById("save").removeAttribute("disabled");
					   this.getElementById("reset").removeAttribute("disabled");
					   this.getElementById("close").removeAttribute("disabled");
					   this.getElementById("next").removeAttribute("disabled");
					}
					else
					{
					   this.getElementById("saveclose").setAttribute("disabled", "true");
					   this.getElementById("savenext").setAttribute("disabled", "true");
					   this.getElementById("save").setAttribute("disabled", "true");
					   this.getElementById("reset").setAttribute("disabled", "true");
					   this.getElementById("close").setAttribute("disabled", "true");
					   this.getElementById("next").setAttribute("disabled", "true");
					}
				]]></setter>
			</property>

			<property name="i18n_isCreating">
				<getter><![CDATA[
					return this._i18n_isCreating;
				]]></getter>
				<setter><![CDATA[
					this._i18n_isCreating = val;

					if (val)
					{
				        this.getElementById("locale-form").removeAttribute("collapsed");
					}
				]]></setter>
			</property>

			<property name="i18n_currentData">
				<getter><![CDATA[
					return this._i18n_currentData;
				]]></getter>
				<setter><![CDATA[
					this._i18n_currentData = val;
				]]></setter>
			</property>

			<property name="i18n_keyIsValid">
				<getter><![CDATA[
					return this._i18n_keyIsValid;
				]]></getter>
				<setter><![CDATA[
					this._i18n_keyIsValid = val;

					try
					{
                        var field = this.i18n_currentData.fields['key'].field;

    					if (val)
    					{
    				        field.setAttribute("style", "color: black;");
    				        this.i18n_isModified = true;
    					}
    					else
    					{
    					    field.setAttribute("style", "color: red;");
    					    this.i18n_isModified = false;
    					}
    			    }
					catch (e)
					{
						wCore.error("wLocaleModule.setter.i18n_keyIsValid", [val], e);
					}
				]]></setter>
			</property>

			<property name="i18n_isModified">
				<getter><![CDATA[
					return this._i18n_isModified;
				]]></getter>
				<setter><![CDATA[
					this._i18n_isModified = val;

					if (val)
					{
					   this.getElementById("saveclose").removeAttribute("disabled");
					   this.getElementById("savenext").removeAttribute("disabled");
					   this.getElementById("save").removeAttribute("disabled");
					   this.getElementById("next").setAttribute("disabled", "true");

					   if (this.i18n_isCreating)
					   {
					       this.getElementById("reset").setAttribute("disabled", "true");
					   }
					   else
					   {
					       this.getElementById("reset").removeAttribute("disabled");
					   }
					}
					else
					{
					   this.getElementById("saveclose").setAttribute("disabled", "true");
					   this.getElementById("savenext").setAttribute("disabled", "true");
					   this.getElementById("save").setAttribute("disabled", "true");
					   this.getElementById("reset").setAttribute("disabled", "true");
					   this.getElementById("next").removeAttribute("disabled");
					}
				]]></setter>
			</property>

			<constructor>
			<![CDATA[
				this._actionInformation["refresh"] = { label: "&amp;modules.uixul.bo.actions.Refresh;", image: "{IconsBase}/small/shadow/refresh.png", localized: false };
				this._actionInformation["delete"] = { label: "&amp;modules.uixul.bo.actions.Delete;", image: "{IconsBase}/small/shadow/delete2.png", localized: false };
				this._actionInformation["edit"] = { label: "&amp;modules.uixul.bo.actions.Edit;", image: "{IconsBase}/small/shadow/edit.png", localized: false };
				this._actionInformation["duplicate"] = { label: "&amp;modules.uixul.bo.actions.Duplicate;", image: "{IconsBase}/small/shadow/documents_new.png", localized: false };
                this._actionInformation["check"] = { label: "&amp;modules.uixul.bo.editlocale.Check;", image: "{IconsBase}/small/shadow/environment_ok.png", localized: false };
                this._actionInformation["createEntity"] = { label: "&amp;modules.uixul.bo.editlocale.Create-entity;", image: "{IconsBase}/small/shadow/add.png", localized: false };
                this._actionInformation["export"] = { label: "&amp;modules.uixul.bo.editlocale.Export;", image: "{IconsBase}/small/shadow/export1.png", localized: false };
                this._actionInformation["exportuseredited"] = { label: "&amp;modules.uixul.bo.editlocale.ExportUserEdited;", image: "{IconsBase}/small/shadow/export2.png", localized: false };
                this._actionInformation["copykey"] = { label: "&amp;modules.uixul.bo.editlocale.Copy-key;", image: "{IconsBase}/small/shadow/clipboard_empty.png", localized: false };
                this._actionInformation["copyvalue"] = { label: "&amp;modules.uixul.bo.editlocale.Copy-value;", image: "{IconsBase}/small/shadow/clipboard.png", localized: false };

                this._lists = ["mainList", "leftTree"];

                var languageList = this.ownerDocument.getElementById("languageList");

                try
                {
                    var prefs = Components.classes["@mozilla.org/preferences-service;1"].
                        getService(Components.interfaces.nsIPrefBranch);

					if (prefs.prefHasUserValue("change.localization.defaultlanguages"))
					{
	                    var languageSettings = prefs.getCharPref("change.localization.defaultlanguages").split(',');
	                    for (var i = 0; i < languageSettings.length; i++)
	                    {
	                        languageList.appendItem(languageSettings[i].toLowerCase(), languageSettings[i].toLowerCase());
	                    }
	                    
	                    // Update the main list's languages list.
	                    var langs = languageSettings.join('/');
	                    wCore.executeOnMethodExists(this.getElementById('locale-mainList'), 'setDataSourceParameter', function(list) {
		                	list.setDataSourceParameter('handeled-languages', langs);
		                });
	                    wCore.executeOnMethodExists(this.getElementById('locale-leftTree'), 'setDataSourceParameter', function(list) {
		                	list.setDataSourceParameter('handeled-languages', langs);
		                });
                    }
                }
                catch (e)
                {
					wCore.error("wLocaleModule.constructor", [], e);
                }

                if(languageList.childNodes.length == 0)
                {
                	prefs.setCharPref("change.localization.defaultlanguages", defaultLanguages.join(','));
                    for (var i = 0; i < defaultLanguages.length; i++)
                    {
                        languageList.appendItem(defaultLanguages[i].toLowerCase(), defaultLanguages[i].toLowerCase());
                    }
                }

				var localeLeftTree = this.getElementById("locale-leftTree");			
	            localeLeftTree._lang = this.getDefaultLanguage();
	            if ('refresh' in localeLeftTree) {localeLeftTree.refresh();}
	            
	            var localeMainList = this.getElementById("locale-mainList");
                localeMainList._lang = this.getDefaultLanguage();
				if ('refresh' in localeMainList) {localeMainList.refresh();}
            ]]>
            </constructor>

            <method name="getOrderedLanguages">
            <body><![CDATA[
                var languageList = this.ownerDocument.getElementById("languageList");
                var languages = [];

                for (var i = 0; i < languageList.childNodes.length; i++)
                {
                    languages.push(languageList.childNodes[i].value);
                }

                return languages;
            ]]></body>
            </method>

            <method name="getDefaultLanguage">
            <body><![CDATA[
                var languageList = this.ownerDocument.getElementById("languageList");

                return languageList.childNodes[0].value
            ]]></body>
            </method>

            <method name="refreshAll">
		    <parameter name="moveToParent" />
			<body><![CDATA[
			
			]]></body>
            </method>

			<method name="refresh">
            <parameter name="listWidget" />
            <body><![CDATA[
            
            ]]></body>
            </method>

            <method name="checkDisplay_refresh">
            <parameter name="document"/>
            <parameter name="countDocument"/>
            <body><![CDATA[
                return true;
            ]]></body>
            </method>

            <method name="duplicate">
            <parameter name="listWidget" />
            <body><![CDATA[
                this._i18n_isDuplicating = true;

                this.edit(listWidget);
            ]]></body>
            </method>

            <method name="checkDisplay_duplicate">
            <parameter name="document"/>
            <parameter name="countDocument"/>
            <body><![CDATA[
                return true;
            ]]></body>
            </method>

            <method name="delete">
            <parameter name="listWidget" />
            <body><![CDATA[
                var components = listWidget.getSelectedComponents();

    			if ((components.document.length() == 1)
    			&& (components.document[0].component.(@name=="type").toString() == "editlocale_entity")
    			&& window.confirm("&amp;modules.uixul.bo.editlocale.delete-confirm;"))
    			{
    			    if (this.i18n_isEditing
    			    && (this.i18n_currentData.path == components.document[0].component.(@name=="parentid").toString())
    			    && (this.i18n_currentData.mod == components.document[0].component.(@name=="module").toString())
    			    && (this.i18n_currentData.key == components.document[0].component.(@name=="id").toString()))
    			    {
    			        this.closeForm(true);
    			    }

    			    var controller = this.getModule().getController();

                    var request = controller.createRequest('post');

                    request.addParameter('module', 'uixul');

                    request.addParameter('action', 'SaveLocaleForm');

                    request.addParameter('path', components.document[0].component.(@name=="parentid").toString());

                    request.addParameter('key', components.document[0].component.(@name=="id").toString());

                    request.addParameter('mod', components.document[0].component.(@name=="module").toString());

                    var langs = this.getOrderedLanguages();

                    for (var i = 0; i < langs.length; i++)
                    {
                        request.addParameter('value_' + langs[i], "");
                    }

                    request.addParameter('langs', langs.join(','));

                    request.addParameter('rnd', Math.random());

            		request.setHandler(function() { controller.executeHandler(request); });

            		request.senderObject = this;

            		this._i18n_isDeleting = true;

            		try
            		{
            			controller.enqueue(request);
            		}
            		catch (e)
            		{
            			wCore.error("wLocaleModule.delete", [listWidget], e);
            		}
            		
            		this.setClearLocalizedCacheRequired();
    			}
            ]]></body>
            </method>

            <method name="checkDisplay_delete">
            <parameter name="document"/>
            <parameter name="countDocument"/>
            <body><![CDATA[
                return (document[0].component.(@name=="overridden").toString() == "overridden" || document[0].component.(@name=="useredited").toString() == "useredited");
            ]]></body>
            </method>

            <method name="edit">
            <parameter name="listWidget" />
            <parameter name="forceEdit" />
            <body><![CDATA[
                if (!forceEdit && this.i18n_isEditing && this.i18n_isModified)
                {
                    this.i18n_isModified = false;
                    this._i18n_isBlocked = true;
                    this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-stop-edit");
                    this._i18n_tempEdit = listWidget;
                    return;
                }

                if (forceEdit)
                {
                    this._i18n_isDuplicating = false;
                    listWidget = this._i18n_tempEdit;
                    this._i18n_tempEdit = null;
                }

                var components = listWidget.getSelectedComponents();

    			if ((components.document.length() == 1) && (components.document[0].component.(@name=="type").toString() == "editlocale_entity"))
    			{
    			    this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-loading");

    			    var rowsItems = this.getElementById("locale-form-rows");

                    for (var i = rowsItems.childNodes.length - 1; i >= 0; i--)
    			    {
    			        rowsItems.removeChild(rowsItems.childNodes[i]);
    				}

    				var newRow = this.ownerDocument.createElement("row");
                    newRow.setAttribute("align", "center");

                    var newSpacer = this.ownerDocument.createElement("spacer");
                    newRow.appendChild(newSpacer);

    				var newLabel = this.ownerDocument.createElement("label");
    				var keyValue = components.document[0].component.(@name=="key").toString();
    				keyValue = keyValue.substr(1, keyValue.length - 2);
    				keyValue = keyValue.replace("." + components.document[0].component.(@name=="id").toString(), "");
			        newLabel.setAttribute("value", keyValue);
			        newLabel.setAttribute("style", "font-size: 12pt; font-weight: bold;");
			        newRow.appendChild(newLabel);

			        rowsItems.appendChild(newRow);

			        var newRow = this.ownerDocument.createElement("row");
                    newRow.setAttribute("align", "center");

                    var newLabel = this.ownerDocument.createElement("label");
			        newLabel.setAttribute("style", "font-weight: bold; text-decoration: underline;");
			        newLabel.setAttribute("value", "&amp;modules.uixul.bo.editlocale.Key;");
			        newRow.appendChild(newLabel);

			        this.i18n_currentData = {
                        path: components.document[0].component.(@name=="parentid").toString(),
                        mod: components.document[0].component.(@name=="module").toString(),
                        key: components.document[0].component.(@name=="id").toString(),
                        fields: []
                    };

                    if (this._i18n_isDuplicating)
                    {
                        var keyText = this.ownerDocument.createElement("textbox");
    			        keyText.setAttribute("cols", "60");

    			        var xbl = this;
                        var onInputHandler = function (event)
                        {
                           xbl.fireModification(true, true);
                        }
                        wCore.addEventListener(keyText, "input", onInputHandler);

    			        this.i18n_currentData.fields['key'] = {field: newRow.appendChild(keyText)};

    			        this.i18n_currentData.key = 'modules.' + components.document[0].component.(@name=="module").toString() + '.' + components.document[0].component.(@name=="parentid").toString().replace('/', '.').replace('.xml', '').replace('..', '.');
                    }
                    else
                    {
                        var keyText = this.ownerDocument.createElement("textbox");
    			        keyText.setAttribute("cols", "60");
    			        keyText.setAttribute("readonly", "true");
    			        keyText.setAttribute("value", components.document[0].component.(@name=="id").toString());
    			        newRow.appendChild(keyText);
                    }

			        rowsItems.appendChild(newRow);

    			    var controller = this.getModule().getController();

                    var request = controller.createRequest('get');

                    request.addParameter('module', 'uixul');

                    request.addParameter('action', 'InitLocaleForm');

                    request.addParameter('path', components.document[0].component.(@name=="parentid").toString());

                    request.addParameter('key', components.document[0].component.(@name=="id").toString());

                    request.addParameter('mod', components.document[0].component.(@name=="module").toString());

                    request.addParameter('rnd', Math.random());

            		request.setHandler(function() { controller.executeHandler(request); });

            		request.senderObject = this;

            		try
            		{
            			controller.enqueue(request);
            		}
            		catch (e)
            		{
            			wCore.error("wLocaleModule.edit", [listWidget, forceEdit], e);
            		}
    			}
            ]]></body>
            </method>

            <method name="onInitLocaleFormSuccess">
				<parameter name="xmlData" />
				<parameter name="httpRequest" />
				<body><![CDATA[
				    var newRows = [];

				    var orderedLanguages = this.getOrderedLanguages();

				    for (var i = 0; i < xmlData.locale.lang.length(); i++)
				    {
				        var newRow = this.ownerDocument.createElement("row");
                        newRow.setAttribute("align", "center");

				        var newLabel = this.ownerDocument.createElement("label");
				        newLabel.setAttribute("class", "required");
				        newLabel.setAttribute("value", xmlData.locale.lang[i].@value.toString().toUpperCase());

				        if (xmlData.locale.lang[i].@value.toString() == this.i18n_defaultLang)
				        {
				            newLabel.setAttribute("style", "background: #0066ff; color: white; padding: 0 3px 0 2px;");
				        }

				        newRow.appendChild(newLabel);

				        var currentValue = '';

				        var genericValue = '';

				        for (var j = 0; j < xmlData.locale.lang[i].entity.length(); j++)
				        {
				            if (xmlData.locale.lang[i].entity[j].@overridden == "true")
				            {
				                currentValue = xmlData.locale.lang[i].entity[j].toString();
				            }
				            else
				            {
				                genericValue = xmlData.locale.lang[i].entity[j].toString();
				            }
				        }

				        if ((currentValue == '') && (genericValue != ''))
				        {
				            currentValue = genericValue;
				            genericValue = '';
				        }

				        var currentText = this.ownerDocument.createElement("textbox");
				        currentText.setAttribute("cols", "60");
				        currentText.setAttribute("multiline", "true");
				        currentText.setAttribute("value", currentValue);
				        currentText.setAttribute("language", xmlData.locale.lang[i].@value.toString());
				        this.i18n_currentData.fields[xmlData.locale.lang[i].@value.toString()] = {field: null, value: currentValue};

                        var xbl = this;
                        var onInputHandler = function (event)
                        {
                           xbl.fireModification(xbl._i18n_isDuplicating);
                        }
                        wCore.addEventListener(currentText, "input", onInputHandler);

				        this.i18n_currentData.fields[xmlData.locale.lang[i].@value.toString()].field = newRow.appendChild(currentText);

				        if (genericValue != '')
				        {
    				        var newButton = this.ownerDocument.createElement("toolbarbutton");
    				        newButton.setAttribute("image", "{IconsBase}/small/shadow/arrow_left_green.png");
    				        newButton.setAttribute("language", xmlData.locale.lang[i].@value.toString());
    				        newButton.setAttribute("tooltiptext", "&amp;modules.uixul.bo.editlocale.Apply-generic;");
    				        var xbl = this;
                            var onClickHandler = function (event)
                            {
                               xbl.applyGenericValue(event.target.getAttribute("language"));
                            }
                            wCore.addEventListener(newButton, "command", onClickHandler);

                            newRow.appendChild(newButton);

    				        var genericText = this.ownerDocument.createElement("textbox");
    				        genericText.setAttribute("cols", "50");
    				        genericText.setAttribute("multiline", "true");
    				        genericText.setAttribute("value", genericValue);
    				        genericText.setAttribute("readonly", "true");
    				        newRow.appendChild(genericText);

    				        this.i18n_currentData.fields[xmlData.locale.lang[i].@value.toString()].genericValue = genericValue;
                        }

                        newRows.push({lang: xmlData.locale.lang[i].@value.toString(), row: newRow});
				    }

				    for (var i = 0; i < orderedLanguages.length; i++)
				    {
				        var found = false;

				        for (var j = 0; j < newRows.length; j++)
				        {
				            if (newRows[j].lang == orderedLanguages[i])
				            {
				                this.getElementById("locale-form-rows").appendChild(newRows[j].row);
				                found = true;
				            }
				        }

				        if (!found)
				        {
				            var newRow = this.ownerDocument.createElement("row");
                            newRow.setAttribute("align", "center");

    				        var newLabel = this.ownerDocument.createElement("label");
    				        newLabel.setAttribute("class", "required");
    				        newLabel.setAttribute("value", orderedLanguages[i].toUpperCase());

    				        if (orderedLanguages[i] == this.i18n_defaultLang)
    				        {
    				            newLabel.setAttribute("style", "background: #0066ff; color: white; padding: 0 3px 0 2px;");
    				        }

    				        newRow.appendChild(newLabel);

    				        var currentText = this.ownerDocument.createElement("textbox");
    				        currentText.setAttribute("cols", "60");
    				        currentText.setAttribute("multiline", "true");
    				        currentText.setAttribute("language", orderedLanguages[i]);
    				        this.i18n_currentData.fields[orderedLanguages[i]] = {field: null, value: ""};

                            var xbl = this;
                            var onInputHandler = function (event)
                            {
                               xbl.fireModification(xbl._i18n_isDuplicating);
                            }
                            wCore.addEventListener(currentText, "input", onInputHandler);

    				        this.i18n_currentData.fields[orderedLanguages[i]].field = newRow.appendChild(currentText);

    				        this.getElementById("locale-form-rows").appendChild(newRow);
				        }
				    }

				    this.i18n_isEditing = true;

				    this.i18n_isModified = false;

				    this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-content");

				    this.focusDefaultField();
                ]]></body>
			</method>

			<method name="focusDefaultField">
			<body><![CDATA[
			    if (this.i18n_isCreating)
			    {
			        try
			        {
			            this.i18n_currentData.fields['key'].field.focus();
			        }
			        catch (e)
			        {
			        	wCore.error("wLocaleModule.focusDefaultField", [], e);
			            this.i18n_currentData.fields[this.i18n_defaultLang].field.focus();
			        }
			    }
			    else if (this.i18n_isEditing)
			    {
			        this.i18n_currentData.fields[this.i18n_defaultLang].field.focus();
			    }
            ]]></body>
            </method>

            <method name="checkDisplay_edit">
            <parameter name="document"/>
            <parameter name="countDocument"/>
            <body><![CDATA[
                return countDocument == 1;
            ]]></body>
            </method>

            <method name="createEntity">
            <parameter name="listWidget" />
            <parameter name="forceCreate" />
            <body><![CDATA[
                if (!forceCreate && this.i18n_isEditing && (this.i18n_isModified || this._i18n_isBlocked))
                {
                    this.i18n_isModified = false;
                    this._i18n_isBlocked = true;
                    this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-stop-new");
                    this._i18n_tempCreate = listWidget;
                    return;
                }

                this._i18n_isBlocked = false;

                if (forceCreate)
                {
                    this._i18n_isDuplicating = false;
                    listWidget = this._i18n_tempCreate;
                    this._i18n_tempCreate = null;
                }

                var components = listWidget.getSelectedComponents();

    			if ((components.document.length() == 1) && (components.document[0].component.(@name=="type").toString() == "editlocale_folder"))
    			{
    			    var rowsItems = this.getElementById("locale-form-rows");

                    for (var i = rowsItems.childNodes.length - 1; i >= 0; i--)
    			    {
    			        rowsItems.removeChild(rowsItems.childNodes[i]);
    				}

    				var newRow = this.ownerDocument.createElement("row");
                    newRow.setAttribute("align", "center");

                    var newSpacer = this.ownerDocument.createElement("spacer");
                    newRow.appendChild(newSpacer);

    				var newLabel = this.ownerDocument.createElement("label");
    				var keyValue = components.document[0].component.(@name=="key").toString();
			        newLabel.setAttribute("value", keyValue);
			        newLabel.setAttribute("style", "font-size: 12pt; font-weight: bold;");
			        newRow.appendChild(newLabel);

			        rowsItems.appendChild(newRow);

			        var newRow = this.ownerDocument.createElement("row");
                    newRow.setAttribute("align", "center");

                    var newLabel = this.ownerDocument.createElement("label");
			        newLabel.setAttribute("style", "font-weight: bold; text-decoration: underline;");
			        newLabel.setAttribute("value", "&amp;modules.uixul.bo.editlocale.Key;");
			        newRow.appendChild(newLabel);

			        this.i18n_currentData = {
                        path: components.document[0].component.(@name=="path").toString(),
                        mod: components.document[0].component.(@name=="module").toString(),
                        key: components.document[0].component.(@name=="key").toString(),
                        fields: []
                    };

			        var keyText = this.ownerDocument.createElement("textbox");
			        keyText.setAttribute("cols", "60");

			        var xbl = this;
                    var onInputHandler = function (event)
                    {
                       xbl.fireModification(true, true);
                    }
                    wCore.addEventListener(keyText, "input", onInputHandler);

			        this.i18n_currentData.fields['key'] = {field: newRow.appendChild(keyText)};

			        rowsItems.appendChild(newRow);

			        var orderedLanguages = this.getOrderedLanguages();

			        for (var i = 0; i < orderedLanguages.length; i++)
				    {
			            var newRow = this.ownerDocument.createElement("row");
                        newRow.setAttribute("align", "center");

				        var newLabel = this.ownerDocument.createElement("label");
				        newLabel.setAttribute("class", "required");
				        newLabel.setAttribute("value", orderedLanguages[i].toUpperCase());

				        if (orderedLanguages[i] == this.i18n_defaultLang)
				        {
				            newLabel.setAttribute("style", "background: #0066ff; color: white; padding: 0 3px 0 2px;");
				        }

				        newRow.appendChild(newLabel);

				        var currentText = this.ownerDocument.createElement("textbox");
				        currentText.setAttribute("cols", "60");
				        currentText.setAttribute("multiline", "true");
				        currentText.setAttribute("language", orderedLanguages[i]);
				        this.i18n_currentData.fields[orderedLanguages[i]] = {field: null, value: ""};

                        var xbl = this;
                        var onInputHandler = function (event)
                        {
                           xbl.fireModification(true);
                        }
                        wCore.addEventListener(currentText, "input", onInputHandler);

				        this.i18n_currentData.fields[orderedLanguages[i]].field = newRow.appendChild(currentText);

				        this.getElementById("locale-form-rows").appendChild(newRow);
				    }

            		this.i18n_isCreating = true;

				    this.i18n_isModified = false;

				    this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-content");

				    this.focusDefaultField();
    			}
            ]]></body>
            </method>

            <method name="checkDisplay_createEntity">
            <parameter name="document"/>
            <parameter name="countDocument"/>
            <body><![CDATA[
                return countDocument == 1;
            ]]></body>
            </method>

	    	<method name="exportuseredited">
            <parameter name="listWidget" />
	    	<body><![CDATA[
		   		this.export(listWidget, true);
            ]]></body>
            </method>

            <method name="export">
            <parameter name="listWidget" />
            <parameter name="userEdited" />
            <body><![CDATA[
                var components = listWidget.getSelectedComponents();

    			if ((components.document.length() == 1) && (components.document[0].component.(@name=="type").toString() == "editlocale_folder"))
    			{
                    var controller = this.getModule().getController();

                    var request = controller.createRequest('get');

                    request.addParameter('module', 'uixul');

                    request.addParameter('action', 'ExportLocale');

                    request.addParameter('path', components.document[0].component.(@name=="path").toString());

				    request.addParameter('mod', components.document[0].component.(@name=="module").toString());
		
				    if (userEdited) request.addParameter('useredited', '1');

                    request.addParameter('rnd', Math.random());

            		request.setHandler(function() { controller.executeHandler(request); });

            		request.senderObject = this;

            		this._i18n_exportData = {
            		  path: components.document[0].component.(@name=="path").toString(),
            		  mod: components.document[0].component.(@name=="module").toString()
            		};

            		try
            		{
            			controller.enqueue(request);
            		}
            		catch (e)
            		{
            			wCore.error("wLocaleModule.export", [listWidget, userEdited], e);
            		}
    			}
            ]]></body>
            </method>

            <method name="onExportLocaleSuccess">
				<parameter name="xmlData" />
				<parameter name="httpRequest" />
				<body><![CDATA[
				    var content = xmlData.package.toString();

				    var fileName = this._i18n_exportData.path.replace('/', '.');

                    var nsIFilePicker = Components.interfaces.nsIFilePicker;
                    var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(nsIFilePicker);
                    fp.init(window, "&amp;modules.uixul.bo.editlocale.Select-destination-folderLabel;", nsIFilePicker.modeGetFolder);
                    var res = fp.show();

                    if (res == nsIFilePicker.returnOK)
                    {
                        var destinationFolder = fp.file;
                        var newFilepath = destinationFolder.path + '\\' + fileName + '.xml';

            		    var newFile = Components.classes["@mozilla.org/file/local;1"]
                            .createInstance(Components.interfaces.nsILocalFile);
                        newFile.initWithPath(newFilepath);

                        if (newFile.exists() == false)
                        {
                            newFile.create(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 420);
                        }

                        var outputStream = Components.classes["@mozilla.org/network/file-output-stream;1"]
                            .createInstance(Components.interfaces.nsIFileOutputStream);
                        outputStream.init(newFile, 0x04 | 0x08 | 0x20, 420, 0);
                        outputStream.write(content, content.length);
                        outputStream.close();
                    }

                    this._i18n_exportData = null;
				]]></body>
            </method>

            <method name="onExportLocaleError">
				<parameter name="xmlData" />
				<parameter name="httpRequest" />
				<body><![CDATA[
				
				]]></body>
            </method>

            <method name="checkDisplay_export">
            <parameter name="document"/>
            <parameter name="countDocument"/>
            <body><![CDATA[
                return countDocument == 1;
            ]]></body>
            </method>

            <method name="copykey">
            <parameter name="listWidget" />
            <parameter name="forceValue" />
            <body><![CDATA[
                if (listWidget)
                {
                    var documents = listWidget.getSelectedComponents();
        		    var valueToCopy = documents.document[0].component.(@name=="key").toString();
        		}
        		else
        		{
        		    var valueToCopy = forceValue;
        		}

        		if (valueToCopy)
        		{
                    var gClipboardHelper = Components.classes["@mozilla.org/widget/clipboardhelper;1"]
                        .getService(Components.interfaces.nsIClipboardHelper);
                    gClipboardHelper.copyString(valueToCopy);
                }
            ]]></body>
            </method>

            <method name="checkDisplay_copykey">
            <parameter name="document"/>
            <parameter name="countDocument"/>
            <body><![CDATA[
                return true;
            ]]></body>
            </method>

            <method name="copyvalue">
            <parameter name="listWidget" />
            <body><![CDATA[
                var documents = listWidget.getSelectedComponents();

        		var valueToCopy = documents.document[0].component.(@name=="value").toString();

                if (valueToCopy)
        		{
                    var gClipboardHelper = Components.classes["@mozilla.org/widget/clipboardhelper;1"]
                        .getService(Components.interfaces.nsIClipboardHelper);
                    gClipboardHelper.copyString(valueToCopy);
                }
            ]]></body>
            </method>

            <method name="checkDisplay_copyvalue">
            <parameter name="document"/>
            <parameter name="countDocument"/>
            <body><![CDATA[
                return true;
            ]]></body>
            </method>

            <method name="applyGenericValue">
            <parameter name="language"/>
            <body><![CDATA[
                this.i18n_currentData.fields[language].field.value = this.i18n_currentData.fields[language].genericValue;
                this.fireModification();
            ]]></body>
            </method>

            <method name="saveAndCreate">
            <body><![CDATA[
                this._i18n_closeAfterSave = false;
                this._i18n_createAfterSave = true;
                this._i18n_isBlocked = false;
                this.save();
            ]]></body>
            </method>

            <method name="saveAndEdit">
            <body><![CDATA[
                this._i18n_closeAfterSave = false;
                this._i18n_editAfterSave = true;
                this._i18n_isBlocked = false;
                this.save();
            ]]></body>
            </method>

            <method name="saveAndClose">
            <body><![CDATA[
                this._i18n_isBlocked = false;
                this.save(true);
            ]]></body>
            </method>


            <method name="saveAndNext">
            <body><![CDATA[
                this._i18n_closeAfterSave = false;
                this._i18n_nextAfterSave = true;
                this._i18n_isBlocked = false;
                this.save();
            ]]></body>
            </method>

            <method name="next">
            <body><![CDATA[
                try
                {
                    this.getElementById("locale-mainList").selectNextNode(true);
                }
                catch (e)
                {
					wCore.error("wLocaleModule.next", [], e);
                }
            ]]></body>
            </method>

            <method name="save">
            <parameter name="close"/>
            <body><![CDATA[
                if (close)
                {
                    this._i18n_closeAfterSave = true;
                }
                else
                {
                    this._i18n_closeAfterSave = false;
                }

                this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-saving");

                var controller = this.getModule().getController();

                var request = controller.createRequest('post');

                request.addParameter('module', 'uixul');

                request.addParameter('action', 'SaveLocaleForm');

                request.addParameter('path', this.i18n_currentData.path);

                if (this.i18n_isCreating || this._i18n_isDuplicating)
                {
                    request.addParameter('key', trim(this.i18n_currentData.fields['key'].field.value.toLowerCase()));
                }
                else
                {
                    request.addParameter('key', this.i18n_currentData.key);
                }

                request.addParameter('mod', this.i18n_currentData.mod);

                var langs = [];

                for (var lang in this.i18n_currentData.fields)
                {
                    if (lang != 'key')
                    {
                        langs.push(lang);
                        request.addParameter('value_' + lang, this.i18n_currentData.fields[lang].field.value);
                    }
                }

                request.addParameter('langs', langs.join(','));

                request.addParameter('rnd', Math.random());

        		request.setHandler(function() { controller.executeHandler(request); });

        		request.senderObject = this;

        		this.i18n_isSaving = true;
        		
        		try
        		{
        			controller.enqueue(request);
        		}
        		catch (e)
        		{
        			wCore.error("wLocaleModule.save", [close], e);
        		}
        		
        		this.setClearLocalizedCacheRequired();
            ]]></body>
            </method>

            <method name="onSaveLocaleFormSuccess">
				<parameter name="xmlData" />
				<parameter name="httpRequest" />
				<body><![CDATA[
				    if (this._i18n_isDeleting)
				    {
				        this._i18n_isDeleting = false;

				        try
                        {
                            this.getElementById("locale-leftTree").moveToParentNode();
                            this.getElementById("locale-leftTree").refresh();
                        }
                        catch (e)
                        {
							wCore.error("wLocaleModule.onSaveLocaleFormSuccess", [xmlData, httpRequest], e);
                        }

                        try
                        {
                            this.getElementById("locale-mainList").refresh();
                        }
                        catch (e)
                        {
							wCore.error("wLocaleModule.onSaveLocaleFormSuccess", [xmlData, httpRequest], e);
                        }
				        return;
				    }

				    this.i18n_isSaving = false;
				    this.i18n_isModified = false;

				    if (this.i18n_isCreating || this._i18n_isDuplicating)
                    {
                        this.i18n_isCreating = false;
                        this._i18n_isDuplicating = false;
				        this.i18n_currentData.key = trim(this.i18n_currentData.fields['key'].field.value.toLowerCase());
                        this.i18n_currentData.fields['key'].field.setAttribute("readonly", "true");
                    }

                    if (!this._i18n_nextAfterSave)
                    {
                        try
                        {
                            this.getElementById("locale-leftTree").moveToParentNode();
                            this.getElementById("locale-leftTree").refresh();
                        }
                        catch (e)
                        {
							wCore.error("wLocaleModule.onSaveLocaleFormSuccess", [xmlData, httpRequest], e);
                        }

                        try
                        {
                            this.getElementById("locale-mainList").refresh();
                        }
                        catch (e)
                        {
							wCore.error("wLocaleModule.onSaveLocaleFormSuccess", [xmlData, httpRequest], e);
                        }
                    }

                    if (this._i18n_nextAfterSave)
                    {
                        this._i18n_nextAfterSave = false;
                        this.next();
                    }
                    else if (this._i18n_createAfterSave)
                    {
                        this._i18n_createAfterSave = false;
                        this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-loading");
                        this.createEntity(null, true);
                    }
                    else if (this._i18n_editAfterSave)
                    {
                        this._i18n_editAfterSave = false;
                        this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-loading");
                        this.edit(null, true);
                    }
                    else if (!this._i18n_closeAfterSave)
				    {
				        this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-loading");

                        var rowsItems = this.getElementById("locale-form-rows");

                        for (var i = rowsItems.childNodes.length - 1; i > 1; i--)
        			    {
        			        rowsItems.removeChild(rowsItems.childNodes[i]);
        				}

        			    var controller = this.getModule().getController();

                        var request = controller.createRequest('get');

                        request.addParameter('module', 'uixul');

                        request.addParameter('action', 'InitLocaleForm');

                        request.addParameter('path', this.i18n_currentData.path);

                        request.addParameter('key', this.i18n_currentData.key);

                        request.addParameter('mod', this.i18n_currentData.mod);

                        request.addParameter('rnd', Math.random());

                        this.i18n_currentData.fields = [];

                		request.setHandler(function() { controller.executeHandler(request); });

                		request.senderObject = this;

                		try
                		{
                			controller.enqueue(request);
                		}
                		catch (e)
                		{
                			wCore.error("wLocaleModule.onSaveLocaleFormSuccess", [xmlData, httpRequest], e);
                		}
                    }
                    else
                    {
                        this.closeForm();
                    }
				]]></body>
            </method>

            <method name="onSaveLocaleFormError">
				<parameter name="xmlData" />
				<parameter name="httpRequest" />
				<body><![CDATA[
				    if (this._i18n_isDeleting)
				    {
				        this._i18n_isDeleting = false;
				        return;
				    }

				    this.i18n_isSaving = false;
				    this.i18n_isModified = false;
				    this._i18n_isBlocked = true;
                    this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-error");
				 ]]></body>
            </method>

            <method name="closeForm">
            <parameter name="forceClose" />
            <body><![CDATA[
                if (!forceClose && this.i18n_isEditing && (this.i18n_isModified || this._i18n_isBlocked))
                {
                    this.i18n_isModified = false;
                    this._i18n_isBlocked = true;
                    this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-stop-close");
                    return;
                }

                this._i18n_isDuplicating = false;

                this._i18n_isBlocked = false;

                this.i18n_isSaving = false;

                this._i18n_closeAfterSave = false;

                this.i18n_currentData = null;

                this.i18n_isModified = false;

                this.i18n_isEditing = false;
            ]]></body>
            </method>

            <method name="fireModification">
            <parameter name="creatingMode"/>
            <parameter name="fromKey"/>
            <body><![CDATA[
                if (creatingMode)
                {
                    if (fromKey)
                    {
                        if (this.input_validation_timeout_id)
    					{
    						window.clearTimeout(this.input_validation_timeout_id);
    					}
    					var xbl = this;
    					this.input_validation_timeout_id = window.setTimeout(function() { xbl.validateKey(); }, this.default_input_validation_timeout);
                    }
                    else if (this.i18n_keyIsValid)
                    {
                        this.i18n_isModified = true;
                    }
                }
                else
                {
                    this.i18n_isModified = true;
                }
            ]]></body>
            </method>

            <method name="validateKey">
            <body><![CDATA[
                try
                {
                    if (trim(this.i18n_currentData.fields['key'].field.value.toLowerCase()) == '')
                    {
                        this.i18n_keyIsValid = false;
                        this.i18n_currentData.fields['key'].field.value = ''
                        return;
                    }

                    if (this.i18n_currentData.fields['key'].field.value.length < 2)
                    {
                        this.i18n_keyIsValid = false;
                        return;
                    }

                    var key = this.i18n_currentData.key + '.' + trim(this.i18n_currentData.fields['key'].field.value.toLowerCase());

                    var req = new XMLHttpRequest();
                    req.open('GET', '{HttpHost}/xul_controller.php?module=uixul&action=CheckLocaleKey&key=' + encodeURIComponent(key), false);
                    req.send(null);

                    if (req.status == 200)
                    {
                        var xmlText = req.responseText;

                        if (xmlText.indexOf('<?xml') == 0)
                        {
                            xmlText = xmlText.substring(xmlText.indexOf('>')+1, xmlText.length);
                        }

                        xmlText = trim(xmlText);

                        var e4x = new XML(xmlText);
                        status  = e4x.status.toString().toUpperCase();

                        var newKey = trim(e4x.message.toString().replace(this.i18n_currentData.key + '.', '')).toLowerCase();

                        if (newKey == this.i18n_currentData.key.toLowerCase())
                        {
                            this.i18n_keyIsValid = false;
                            this.i18n_currentData.fields['key'].field.value = '';
                            return;
                        }

                        this.i18n_currentData.fields['key'].field.value = newKey.toLowerCase()

                        if (status == "OK")
                        {
                            this.i18n_keyIsValid = true;
                        }
                        else
                        {
                            this.i18n_keyIsValid = false;
                        }
                    }
                    else
                    {
                        this.i18n_keyIsValid = false;
                    }
                }
                catch (e)
                {
                	wCore.error("wLocaleModule.validateKey", [], e);
                    this.i18n_keyIsValid = false;
                }
            ]]></body>
            </method>

            <method name="backToForm">
            <body><![CDATA[
                this.i18n_isModified = true;
                this._i18n_isBlocked = false;
                this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-content");
            ]]></body>
            </method>

            <method name="reset">
            <body><![CDATA[
                for (var lang in this.i18n_currentData.fields)
                {
                    if (lang != 'key')
                    {
                        this.i18n_currentData.fields[lang].field.value = this.i18n_currentData.fields[lang].value;
                    }
                }

                this.i18n_isModified = false;
            ]]></body>
            </method>

            <method name="handleLanguageInput">
            <body><![CDATA[
                var input = this.ownerDocument.getElementById("languageText").value.toLowerCase();

                if (input.match(/^[a-z]{2}$/))
                {
                    var languageList = this.ownerDocument.getElementById("languageList");

                    var found = false;

                    for (var i = 0; i < languageList.childNodes.length; i++)
                    {
                        if (languageList.childNodes[i].value == input)
                        {
                            found = true;
                            break;
                        }
                    }

                    if (!found)
                    {
                        this.ownerDocument.getElementById("addLanguage").removeAttribute("disabled");
                    }
                    else
                    {
                        this.ownerDocument.getElementById("addLanguage").setAttribute("disabled", "true");
                    }
                }
                else
                {
                    this.ownerDocument.getElementById("addLanguage").setAttribute("disabled", "true");
                }
            ]]></body>
            </method>

            <method name="handleLanguageSelect">
            <body><![CDATA[
                var languageList = this.ownerDocument.getElementById("languageList");
                var selected = languageList.selectedItems[0];
                if (languageList.selectedCount > 0)
                {
                    if (languageList.getIndexOfItem(selected) == 0)
                    {
                        this.ownerDocument.getElementById('moveUpLanguage').setAttribute('disabled', 'true');
                    }
                    else
                    {
                        this.ownerDocument.getElementById('moveUpLanguage').setAttribute('disabled', 'false');
                    }

                    if (languageList.getIndexOfItem(selected) == (languageList.getRowCount() - 1))
                    {
                        this.ownerDocument.getElementById('moveDownLanguage').setAttribute('disabled', 'true');
                    }
                    else
                    {
                        this.ownerDocument.getElementById('moveDownLanguage').setAttribute('disabled', 'false');
                    }

                    this.ownerDocument.getElementById('removeLanguage').setAttribute('disabled', 'false');
                }
                else
                {
                    this.ownerDocument.getElementById('moveUpLanguage').setAttribute('disabled', 'true');
                    this.ownerDocument.getElementById('moveDownLanguage').setAttribute('disabled', 'true');
                    this.ownerDocument.getElementById('removeLanguage').setAttribute('disabled', 'true');
                }
            ]]></body>
            </method>

            <method name="moveLanguageItemUp">
            <body><![CDATA[
                var languageList = this.ownerDocument.getElementById("languageList");
                var selected = languageList.selectedItems[0];
                var itemIndex = languageList.getIndexOfItem(selected);
                var newItem = languageList.insertItemAt(itemIndex - 1, selected.label, selected.value);
                languageList.removeItemAt(itemIndex + 1);
                languageList.clearSelection();
                languageList.addItemToSelection(newItem);
                this.handleLanguageSelect();

                this.ownerDocument.getElementById("applyLanguage").removeAttribute("disabled");
            ]]></body>
            </method>

            <method name="moveLanguageItemDown">
            <body><![CDATA[
                var languageList = this.ownerDocument.getElementById("languageList");
                var selected = languageList.selectedItems[0];
                var itemIndex = languageList.getIndexOfItem(selected);
                if (itemIndex == (languageList.getRowCount() - 2))
                {
                    var newItem = languageList.appendItem(selected.label, selected.value);
                }
                else
                {
                    var newItem = languageList.insertItemAt(itemIndex + 2, selected.label, selected.value);
                }
                languageList.removeItemAt(itemIndex);
                languageList.clearSelection();
                languageList.addItemToSelection(newItem);
                this.handleLanguageSelect();

                this.ownerDocument.getElementById("applyLanguage").removeAttribute("disabled");
            ]]></body>
            </method>

            <method name="addLanguageItem">
            <body><![CDATA[
                var input = this.ownerDocument.getElementById("languageText").value.toLowerCase();
                var languageList = this.ownerDocument.getElementById("languageList");
                languageList.appendItem(input, input);
                this.ownerDocument.getElementById("languageText").value = "";
                this.ownerDocument.getElementById("addLanguage").setAttribute("disabled", "true");
                this.handleLanguageSelect();

                this.ownerDocument.getElementById("applyLanguage").removeAttribute("disabled");
            ]]></body>
            </method>

            <method name="removeLanguageItem">
            <body><![CDATA[
                var languageList = this.ownerDocument.getElementById("languageList");
                var selected = languageList.selectedItems[0];
                var itemIndex = languageList.getIndexOfItem(selected);
                languageList.removeItemAt(itemIndex);
                this.handleLanguageSelect();

                this.ownerDocument.getElementById("applyLanguage").removeAttribute("disabled");
            ]]></body>
            </method>
            
            <method name="runSearch">
            <body><![CDATA[
            	var how = this.ownerDocument.getElementById("how").value;
            	var what = this.ownerDocument.getElementById("what").value;
            	var match = this.ownerDocument.getElementById("match").value;
            	var value = this.ownerDocument.getElementById("value").value;
            	this.doSearch(how, what, match, value);
            ]]></body>
            </method>
            
            <method name="doSearch">
            <parameter name="how"/>
            <parameter name="what"/>
            <parameter name="match"/>
            <parameter name="value"/>
            <body><![CDATA[
            	value = trim(value);
            	
            	if (how && what && match && value && (value.length > 1) && !this._search_request)
            	{
            		this.ownerDocument.getElementById("run-search").setAttribute("disabled", "true");
            		this.ownerDocument.getElementById("halt-search").removeAttribute("disabled");
            		this.ownerDocument.getElementById("open-from-search").setAttribute("disabled", "true");
            		this.ownerDocument.getElementById("edit-from-search").setAttribute("disabled", "true");
            		this.ownerDocument.getElementById("copy-key-from-search").setAttribute("disabled", "true");
            		this.ownerDocument.getElementById("copy-content-from-search").setAttribute("disabled", "true");
            		var requestUrl = "{HttpHost}/xul_controller.php?module=uixul&action=FindLocale&lang=" + this.getDefaultLanguage() + "&how=" + how + "&what=" + what + "&match=" + match + "&value=" + encodeURIComponent(value) + "&rnd=" + Math.random();
            		this._search_request = new wServerRequest(requestUrl, "get");
            		var xbl = this;
            		this._search_request.setHandler(function () { xbl.searchHandler(); });
            		this._search_request.send();
            		var list = this.ownerDocument.getElementById("result-box");
            		var listContent = list.getElementsByTagName("listitem");
            		for (var i = listContent.length; i > 0; i--)
            		{
            			list.removeChild(listContent[i - 1]);
            		}           
					          		
            		if (how == 1)
	            	{
	            		this.ownerDocument.getElementById("result-col-key").setAttribute("maxwidth","250");
	            		this.ownerDocument.getElementById("result-col-content").setAttribute("maxwidth","400");	            		
	            		this.ownerDocument.getElementById("result-header-package").setAttribute("label", this.ownerDocument.getElementById("result-header-package-alt-one").getAttribute("value"));
	            		this.ownerDocument.getElementById("result-header-key").setAttribute("label", this.ownerDocument.getElementById("result-header-key-alt-one").getAttribute("value"));
	            		this.ownerDocument.getElementById("result-header-content").setAttribute("label", this.ownerDocument.getElementById("result-header-content-alt-one").getAttribute("value"));
	            	}
	            	else
	            	{
	            		this.ownerDocument.getElementById("result-col-key").setAttribute("maxwidth","50");
	            		this.ownerDocument.getElementById("result-col-content").setAttribute("maxwidth","600");	            		
	            		this.ownerDocument.getElementById("result-header-package").setAttribute("label", this.ownerDocument.getElementById("result-header-package-alt-two").getAttribute("value"));
	            		this.ownerDocument.getElementById("result-header-key").setAttribute("label", this.ownerDocument.getElementById("result-header-key-alt-two").getAttribute("value"));
	            		this.ownerDocument.getElementById("result-header-content").setAttribute("label", this.ownerDocument.getElementById("result-header-content-alt-two").getAttribute("value"));
	            	}            		      		       		
	        		this.storedSearch.push(value);        		
	        		this.storedSearch = array_unique(this.storedSearch);   
		        	var list = this.ownerDocument.getElementById('value');
		 			list.removeAllItems();
		            for (var i in this.storedSearch)
		            {
		            	var item = list.insertItemAt(0, this.storedSearch[i], this.storedSearch[i]);
		            }
		            list.value = value;
		            this.searchResults = [];
            	}
            ]]></body>
            </method>
            
            <method name="searchHandler">
            <body><![CDATA[
            	try
            	{
	            	if (this._search_request)
	            	{
	            		if (this._search_request.getXmlHttpRequest().readyState == 4) 
	            		{
				            if (this._search_request.getXmlHttpRequest().status == 200) 
				            {
				            	var xmlData = this._search_request.getXmlData();				            	
				            	if (xmlData && xmlData.found)
				            	{
				            		var foundLocales = xmlData.found.locale;
									var list = this.ownerDocument.getElementById("result-box");		
									var oldPackage = null;	
															
				            		for (var i = 0; i < foundLocales.length(); i++)
				            		{
				            			var foundLocale = {
				            				id: xmlData.found.locale[i].@id.toString(),
				            				package: xmlData.found.locale[i].@package.toString(),
				            				content: xmlData.found.locale[i].toString()
				            			};
				            			this.searchResults.push(foundLocale);
					            			
				            			if (parseInt(xmlData.found.@how.toString()) == 1)
				            			{
					            			var newListItem = this.ownerDocument.createElement("listitem");
					            			newListItem.setAttribute("style", "border-bottom: 1px solid #ebebeb;");
					            			var newPackageCell = this.ownerDocument.createElement("listcell");
					            			newPackageCell.setAttribute("label", foundLocale.package.replace('modules.', '').replace('.', ' > ', 'gim'));
					            			newPackageCell.setAttribute("class", "listcell-iconic");
					            			if (foundLocale.package.match(/^framework/i))
					            			{
					            				newPackageCell.setAttribute("image", "{IconsBase}/small/component_red.png");
					            				newPackageCell.setAttribute("style", "color: red;");
					            			}
					            			else
					            			{
					            				newPackageCell.setAttribute("image", "{IconsBase}/small/component_green.png");
					            			}
					            			var newIdCell = this.ownerDocument.createElement("listcell");
					            			newIdCell.setAttribute("label", foundLocale.id.replace(foundLocale.package + '.', '', 'gim'));
					            			newIdCell.setAttribute("class", "listcell-iconic");
					            			newIdCell.setAttribute("image", "{IconsBase}/small/element.png");
					            			var newContentCell = this.ownerDocument.createElement("listcell");
					            			newContentCell.setAttribute("label", foundLocale.content);
					            			newListItem.appendChild(newPackageCell);
					            			newListItem.appendChild(newIdCell);
					            			newListItem.appendChild(newContentCell);
					            			list.appendChild(newListItem);
					            		}
					            		else
					            		{
					            			var newListItem = this.ownerDocument.createElement("listitem");
					            			var newPackageCell = this.ownerDocument.createElement("listcell");
					            			if (oldPackage != foundLocale.package)
					            			{
					            				newListItem.setAttribute("style", "border-top: 1px solid #ebebeb;");
					            				newPackageCell.setAttribute("label", foundLocale.package);
						            			newPackageCell.setAttribute("class", "listcell-iconic");
						            			newPackageCell.setAttribute("style", "font-weight: bold;");
						            			if (foundLocale.package.match(/\.php$/i))
						            			{
						            				newPackageCell.setAttribute("image", "{IconsBase}/small/text_code_colored.png");
						            			}
						            			else if (foundLocale.package.match(/\.xml$/i))
						            			{
						            				newPackageCell.setAttribute("image", "{IconsBase}/small/text_tree.png");
						            			}
						            			else if (foundLocale.package.match(/\.xul$/i))
						            			{
						            				newPackageCell.setAttribute("image", "{IconsBase}/small/text_tree.png");
						            			}
						            			else if (foundLocale.package.match(/\.html$/i))
						            			{
						            				newPackageCell.setAttribute("image", "{IconsBase}/small/text_rich_colored.png");
						            			}	
						            			else if (foundLocale.package.match(/\.js$/i))
						            			{
						            				newPackageCell.setAttribute("image", "{IconsBase}/small/text_code_javascript.png");
						            			}
						            			else
						            			{
						            				newPackageCell.setAttribute("image", "{IconsBase}/small/text_code.png");
						            			}
					            			}
					            			else
					            			{
					            				newPackageCell.setAttribute("label", " ");
					            			}
					            							            			
					            			var newIdCell = this.ownerDocument.createElement("listcell");
					            			newIdCell.setAttribute("label", foundLocale.id);
					            			var newContentCell = this.ownerDocument.createElement("listcell");
					            			newContentCell.setAttribute("label", foundLocale.content);
					            			newContentCell.setAttribute("style", "font-family: monospace;");
					            			newListItem.appendChild(newPackageCell);
					            			newListItem.appendChild(newIdCell);
					            			newListItem.appendChild(newContentCell);
					            			list.appendChild(newListItem);
					            			oldPackage = foundLocale.package;
					            		}
				            		}
				            		if (newListItem)
				            		{
				            			newListItem.setAttribute("style", "border-bottom: 1px solid #ebebeb;");
				            		}
				                }				                			                
	            				this.endSearch();
				            }
				        }
	            	}
	            }
	            catch (e)
	            {
	            	wCore.error("wLocaleModule.searchHandler", [], e);
	            	this.endSearch();
	            }
            ]]></body>
            </method>
            
            <method name="selectSearchItem">
            <body><![CDATA[
            	var list = this.ownerDocument.getElementById("result-box");	
            	if (list.selectedIndex >= 0)
            	{
            		var how = this.ownerDocument.getElementById("how").value;
	            	if (how == 1)
	            	{
	            		if (this.searchResults[list.selectedIndex].package.match(/^framework/i))
	            		{
	            			this.ownerDocument.getElementById("open-from-search").setAttribute("disabled", "true");
	            			this.ownerDocument.getElementById("edit-from-search").setAttribute("disabled", "true");
	            		}
	            		else
	            		{
	            			this.ownerDocument.getElementById("open-from-search").removeAttribute("disabled");
	            			this.ownerDocument.getElementById("edit-from-search").removeAttribute("disabled");
	            		}
	            		this.ownerDocument.getElementById("copy-key-from-search").removeAttribute("collapsed");
	            		this.ownerDocument.getElementById("copy-key-from-search").removeAttribute("disabled");
	            		this.ownerDocument.getElementById("copy-content-from-search").removeAttribute("disabled");   
	            		this.ownerDocument.getElementById("copy-path-from-search").setAttribute("disabled", "true");
            			this.ownerDocument.getElementById("copy-path-from-search").setAttribute("collapsed", "true");            		
	            	}
	            	else
	            	{
	            		this.ownerDocument.getElementById("open-from-search").setAttribute("disabled", "true");
	            		this.ownerDocument.getElementById("edit-from-search").setAttribute("disabled", "true");
	            		this.ownerDocument.getElementById("copy-key-from-search").setAttribute("collapsed", "true");
	            		this.ownerDocument.getElementById("copy-path-from-search").removeAttribute("collapsed");
	            		this.ownerDocument.getElementById("copy-path-from-search").removeAttribute("disabled");
	            		this.ownerDocument.getElementById("copy-content-from-search").removeAttribute("disabled");
	            	}         		
            	}
            	else
            	{
            		this.ownerDocument.getElementById("open-from-search").setAttribute("disabled", "true");
            		this.ownerDocument.getElementById("edit-from-search").setAttribute("disabled", "true");
            		this.ownerDocument.getElementById("copy-key-from-search").setAttribute("disabled", "true");
            		this.ownerDocument.getElementById("copy-key-from-search").removeAttribute("collapsed");
            		this.ownerDocument.getElementById("copy-path-from-search").setAttribute("disabled", "true");
            		this.ownerDocument.getElementById("copy-path-from-search").setAttribute("collapsed", "true");
            		this.ownerDocument.getElementById("copy-content-from-search").setAttribute("disabled", "true");
            	}
            ]]></body>
            </method>
            
            <method name="handleHowChange">
            <body><![CDATA[
            	var how = this.ownerDocument.getElementById("how").value;
            	if (how == 1)
            	{
            		this.ownerDocument.getElementById("what-content").removeAttribute("collapsed"); 
            	}
            	else
            	{
            		this.ownerDocument.getElementById("what-content").setAttribute("collapsed", "true");
            		this.ownerDocument.getElementById("what").value = 1;
            	}
            ]]></body>
            </method>
            
            <method name="copyKeyFromSearch">
            <body><![CDATA[
            	var list = this.ownerDocument.getElementById("result-box");	
            	if (list.selectedIndex >= 0)
            	{
	                var gClipboardHelper = Components.classes["@mozilla.org/widget/clipboardhelper;1"]
	                	.getService(Components.interfaces.nsIClipboardHelper);
	                gClipboardHelper.copyString('&' + this.searchResults[list.selectedIndex].id + ';');
            	}
            ]]></body>
            </method>
            
            <method name="copyValueFromSearch">
            <body><![CDATA[
             	var list = this.ownerDocument.getElementById("result-box");	
            	if (list.selectedIndex >= 0)
            	{
            		var gClipboardHelper = Components.classes["@mozilla.org/widget/clipboardhelper;1"]
	                	.getService(Components.interfaces.nsIClipboardHelper);
	                gClipboardHelper.copyString(this.searchResults[list.selectedIndex].content);
            	}
            ]]></body>
            </method>
            
            <method name="copyPathFromSearch">
            <body><![CDATA[
            	var list = this.ownerDocument.getElementById("result-box");	
            	if (list.selectedIndex >= 0)
            	{
            		var gClipboardHelper = Components.classes["@mozilla.org/widget/clipboardhelper;1"]
	                	.getService(Components.interfaces.nsIClipboardHelper);
	                gClipboardHelper.copyString(this.searchResults[list.selectedIndex].package);
            	}
            ]]></body>
            </method>
            
            <method name="openFromSearch">
            <body><![CDATA[
            	var list = this.ownerDocument.getElementById("result-box");	
            	if (list.selectedIndex >= 0)
            	{
            		var moduleName = this.searchResults[list.selectedIndex].package.split('.');
            		wToolkit.dialog('uixul', 'EditLocale', {wemod: moduleName[1]}, {width: 980, height: 650}, true, true);
            	}
            ]]></body>
            </method>
            
            <method name="editFromSearch">
            <parameter name="forceEdit" />
            <body><![CDATA[
            	var list = this.ownerDocument.getElementById("result-box");	
            	if (list.selectedIndex >= 0)
            	{
            		// TODO
            	}
            ]]></body>
            </method>
            
            <method name="haltSearch">
            <body><![CDATA[
            	if (this._search_request)
            	{
            		this._search_request.abort();
            		this.endSearch();
            	}
            ]]></body>
            </method>
            
            <method name="endSearch">
            <body><![CDATA[
            	if (this._search_request)
            	{
					this.ownerDocument.getElementById("run-search").removeAttribute("disabled");
            		this.ownerDocument.getElementById("halt-search").setAttribute("disabled", "true");   
            		this._search_request = null;   
            	}
            ]]></body>
            </method>

            <method name="applyLanguageSetup">
            <body><![CDATA[
                this.ownerDocument.getElementById("applyLanguage").setAttribute("disabled", "true");

                try
                {
                    var prefs = Components.classes["@mozilla.org/preferences-service;1"].
                        getService(Components.interfaces.nsIPrefBranch);

                    var languageSettings = [];

                    var languageList = this.ownerDocument.getElementById("languageList");

                    for (var i = 0; i < languageList.childNodes.length; i++)
                    {
                        languageSettings.push(languageList.childNodes[i].value);
                    }
                    
                    // Update the main list's languages list.
                    this.getElementById('locale-mainList').setDataSourceParameter('handeled-languages', languageSettings.join('/'));
                    this.getElementById('locale-leftTree').setDataSourceParameter('handeled-languages', languageSettings.join('/'));

                    prefs.setCharPref("change.localization.defaultlanguages", languageSettings.join(','));
                }
                catch (e)
                {
					wCore.error("wLocaleModule.applyLanguageSetup", [], e);
                }

                this.getElementById("locale-leftTree")._lang = this.getDefaultLanguage();
                this.getElementById("locale-mainList")._lang = this.getDefaultLanguage();

                try
                {
                    this.getElementById("locale-leftTree").refresh();
                }
                catch (e)
                {
					wCore.error("wLocaleModule.applyLanguageSetup", [], e);
                }

                try
                {
                    this.getElementById("locale-mainList").refresh();
                }
                catch (e)
                {
					wCore.error("wLocaleModule.applyLanguageSetup", [], e);
                }

                if (this.i18n_isEditing)
                {
			        this.getElementById("locale-form-deck").selectedPanel = this.getElementById("locale-form-loading");

                    var rowsItems = this.getElementById("locale-form-rows");

                    for (var i = rowsItems.childNodes.length - 1; i > 1; i--)
    			    {
    			        rowsItems.removeChild(rowsItems.childNodes[i]);
    				}

    			    var controller = this.getModule().getController();

                    var request = controller.createRequest('get');

                    request.addParameter('module', 'uixul');

                    request.addParameter('action', 'InitLocaleForm');

                    request.addParameter('path', this.i18n_currentData.path);

                    request.addParameter('key', this.i18n_currentData.key);

                    request.addParameter('mod', this.i18n_currentData.mod);

                    request.addParameter('rnd', Math.random());

                    this.i18n_currentData.fields = [];

            		request.setHandler(function() { controller.executeHandler(request); });

            		request.senderObject = this;

            		try
            		{
            			controller.enqueue(request);
            		}
            		catch (e)
            		{
            			wCore.error("wLocaleModule.applyLanguageSetup", [], e);
            		}
                }
            ]]></body>
            </method>
            
            <method name="clearLocalizedCache">
            <body><![CDATA[
				if (confirm("&amp;modules.uixul.bo.editlocale.Confirm-clear-localized-cache;")) 
				{
					var controller = this.getModule().getController();
					var request = controller.createRequest('post');
                    request.addParameter('module', 'uixul');
                    request.addParameter('action', 'ClearLocalizedCache');
                    request.send(true);
                    alert("&amp;modules.uixul.bo.editlocale.Cache-cleared;");
					this.setClearLocalizedCacheNotRequired();
				}                
            ]]></body>
            </method>
            
            <method name="setClearLocalizedCacheRequired">
            <body><![CDATA[
            	wCore.debug('[wLocaleModule.setClearLocalizedCacheRequired]');
                this.getElementById('clearCacheRequired').setAttribute('collapsed', 'false');
            ]]></body>
            </method>
            
            <method name="setClearLocalizedCacheNotRequired">
            <body><![CDATA[
                wCore.debug('[wLocaleModule.setClearLocalizedCacheNotRequired]');
                this.getElementById('clearCacheRequired').setAttribute('collapsed', 'true');
            ]]></body>
            </method>

		</implementation>

		<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:change="http://www.rbs-change.eu/change-4.2/taglib/phptal">
		    <commandset>
	            <command id="wCommandWithoutLabel:refresh:modules_uixul_locale_widget_global" tooltiptext="&amp;modules.uixul.bo.actions.Refresh;" image="{IconsBase}/small/shadow/refresh.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
                <command id="wCommand:refresh:modules_uixul_locale_widget_global" label="&amp;modules.uixul.bo.actions.Refresh;" tooltiptext="&amp;modules.uixul.bo.actions.Refresh;" image="{IconsBase}/small/shadow/refresh.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommandWithoutLabel:edit:modules_uixul_locale_widget_mainList" tooltiptext="&amp;modules.uixul.bo.actions.Edit;" image="{IconsBase}/small/shadow/edit.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommand:edit:modules_uixul_locale_widget_mainList" label="&amp;modules.uixul.bo.actions.Edit;" tooltiptext="&amp;modules.uixul.bo.actions.Edit;" image="{IconsBase}/small/shadow/edit.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommandWithoutLabel:check:modules_uixul_locale_widget_mainList" tooltiptext="&amp;modules.uixul.bo.editlocale.Check;" image="{IconsBase}/small/shadow/environment_ok.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommand:check:modules_uixul_locale_widget_mainList" label="&amp;modules.uixul.bo.editlocale.Check;" tooltiptext="&amp;modules.uixul.bo.editlocale.Check;" image="{IconsBase}/small/shadow/environment_ok.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommandWithoutLabel:delete:modules_uixul_locale_widget_mainList" tooltiptext="&amp;modules.uixul.bo.actions.Delete;" image="{IconsBase}/small/shadow/delete2.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommand:delete:modules_uixul_locale_widget_mainList" label="&amp;modules.uixul.bo.actions.Delete;" tooltiptext="&amp;modules.uixul.bo.actions.Delete;" image="{IconsBase}/small/shadow/delete2.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommandWithoutLabel:copykey:modules_uixul_locale_widget_mainList" tooltiptext="&amp;modules.uixul.bo.editlocale.Copy-key;" image="{IconsBase}/small/shadow/clipboard_empty.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommand:copykey:modules_uixul_locale_widget_mainList" label="&amp;modules.uixul.bo.editlocale.Copy-key;" tooltiptext="&amp;modules.uixul.bo.editlocale.Copy-key;" image="{IconsBase}/small/shadow/clipboard_empty.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommandWithoutLabel:copyvalue:modules_uixul_locale_widget_mainList" tooltiptext="&amp;modules.uixul.bo.editlocale.Copy-value;" image="{IconsBase}/small/shadow/clipboard.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommand:copyvalue:modules_uixul_locale_widget_mainList" label="&amp;modules.uixul.bo.editlocale.Copy-value;" tooltiptext="&amp;modules.uixul.bo.editlocale.Copy-value;" image="{IconsBase}/small/shadow/clipboard.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommandWithoutLabel:duplicate:modules_uixul_locale_widget_mainList" tooltiptext="&amp;modules.uixul.bo.actions.Duplicate;" image="{IconsBase}/small/shadow/documents_new.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommand:duplicate:modules_uixul_locale_widget_mainList" label="&amp;modules.uixul.bo.actions.Duplicate;" tooltiptext="&amp;modules.uixul.bo.actions.Duplicate;" image="{IconsBase}/small/shadow/documents_new.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        
		        <command id="wCommandWithoutLabel:createEntity:modules_uixul_locale_widget_leftTree" tooltiptext="&amp;modules.uixul.bo.editlocale.Create-entity;" image="{IconsBase}/small/shadow/add.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
				<command id="wCommand:createEntity:modules_uixul_locale_widget_leftTree" label="&amp;modules.uixul.bo.editlocale.Create-entity;" tooltiptext="&amp;modules.uixul.bo.editlocale.Create-entity;" image="{IconsBase}/small/shadow/add.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommandWithoutLabel:export:modules_uixul_locale_widget_leftTree" tooltiptext="&amp;modules.uixul.bo.editlocale.Export;" image="{IconsBase}/small/shadow/export1.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommand:export:modules_uixul_locale_widget_leftTree" label="&amp;modules.uixul.bo.editlocale.Export;" tooltiptext="&amp;modules.uixul.bo.editlocale.Export;" image="{IconsBase}/small/shadow/export1.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
				<command id="wCommandWithoutLabel:exportuseredited:modules_uixul_locale_widget_leftTree" tooltiptext="&amp;modules.uixul.bo.editlocale.ExportUserEdited;" image="{IconsBase}/small/shadow/export2.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
		        <command id="wCommand:exportuseredited:modules_uixul_locale_widget_leftTree" label="&amp;modules.uixul.bo.editlocale.ExportUserEdited;" tooltiptext="&amp;modules.uixul.bo.editlocale.ExportUserEdited;" image="{IconsBase}/small/shadow/export2.png" oncommand="getModule().executeCommand(this, event)"><observes element="wcontroller" attribute="disabled" /></command>
			</commandset>

		  <vbox flex="1">
			<toolbox>
				<toolbar>
					<toolbarspacer flex="1" />
					<vbox collapsed="true" anonid="clearCacheRequired">
						<spacer flex="1" />
						<image src="{IconsBase}/small/warning.png" tooltiptext="&amp;modules.uixul.bo.editlocale.Localized-cache-clear-required;" />
						<spacer flex="1" />
					</vbox>
					<toolbarbutton anonid="refreshCache" image="{IconsBase}/small/recycle.png" tooltiptext="&amp;modules.uixul.bo.editlocale.Clear-localized-cache;" label="&amp;modules.uixul.bo.editlocale.Clear-localized-cache;" oncommand="clearLocalizedCache()" />
					<toolbarspacer style="width: 10px" />
				</toolbar>
			</toolbox>
			
			<tabbox id="mainTabbox" flex="1" style="margin-top: 4px">
	          <tabs id="mainTabs">
	            <tab id="editTab" change:icon="environment_edit/small shadow" i18n:attributes="label &modules.uixul.bo.editlocale.EditSpaced;" onclick="focusDefaultField();" />
	            <tab id="configTab" change:icon="environment_preferences/small shadow" i18n:attributes="label &modules.uixul.bo.editlocale.SetupSpaced;" />
	            <tab id="searchTab" change:icon="environment_view/small shadow" i18n:attributes="label &modules.uixul.bo.editlocale.SearchSpaced;" />
	          </tabs>
	          <tabpanels flex="1">
	
	            <!-- EDIT TAB -->
	            <tabpanel id="editTabContent">
				     <hbox flex="1">
		                <vbox width="208">
		                    <wtoolbar id="modules_uixul_locale_widget_toolbar" attachment="modules_uixul_locale_widget_leftTree" class="change-toolbar-empty" />
		    		        <wtree class="locale" anonid="locale-leftTree" id="modules_uixul_locale_widget_leftTree" hideheader="true" flex="1"/>
		    		        <wpopup id="modules_uixul_locale_widget_leftTreePopup" attachment="modules_uixul_locale_widget_leftTree" />
		                </vbox>
		                <splitter collapse="before" />
		                <vbox flex="1">
		                    <vbox flex="20">
		                        <wtoolbar id="modules_uixul_locale_widget_mainListToolbar" attachment="modules_uixul_locale_widget_mainList" class="change-toolbar-empty" />
		        				<wlist class="locale" anonid="locale-mainList" id="modules_uixul_locale_widget_mainList" attachment="modules_uixul_locale_widget_leftTree" flex="1" />
		    		            <wpopup id="modules_uixul_locale_widget_mainListPopup" attachment="modules_uixul_locale_widget_mainList" />
		                    </vbox>
		    				<vbox anonid="locale-form" collapsed="true" style="border-top: 1px solid grey;" flex="1">
		                        <hbox>
		        				    <toolbox flex="1" orient="horizontal" dir="normal" class="change-toolbox">
		            					<toolbar flex="1" orient="horizontal" dir="normal" class="change-toolbar">
		            						<toolbarbutton anonid="save" image="{IconsBase}/small/shadow/disk_blue.png" tooltiptext="&amp;modules.uixul.bo.general.buttons.Save;" label="&amp;modules.uixul.bo.general.buttons.Save;" oncommand="save()" />
		            						<toolbarbutton anonid="saveclose" image="{IconsBase}/small/shadow/disk_blue_error.png" tooltiptext="&amp;modules.uixul.bo.general.buttons.Save-and-close;" label="&amp;modules.uixul.bo.general.buttons.Save-and-close;" oncommand="saveAndClose()" />
		            						<toolbarbutton anonid="savenext" image="{IconsBase}/small/shadow/disk_blue_add.png" tooltiptext="&amp;modules.uixul.bo.editlocale.Save-and-next;" label="&amp;modules.uixul.bo.editlocale.Save-and-next;" oncommand="saveAndNext()" />
		            						<toolbarseparator />
		            						<toolbarbutton anonid="next" image="{IconsBase}/small/shadow/add2.png" tooltiptext="&amp;modules.uixul.bo.editlocale.Next;" label="&amp;modules.uixul.bo.editlocale.Next;" oncommand="next()" />
		            						<toolbarbutton anonid="reset" image="{IconsBase}/small/shadow/selection.png" tooltiptext="&amp;modules.uixul.bo.general.buttons.Reset;" label="&amp;modules.uixul.bo.general.buttons.Reset;" oncommand="reset()" />
		            						<toolbarspacer flex="1"/>
		            						<toolbarbutton anonid="close" image="{IconsBase}/small/shadow/error.png" tooltiptext="&amp;modules.uixul.bo.general.buttons.Close;" oncommand="closeForm()" />
		            					</toolbar>
		            				</toolbox>
		                        </hbox>
		                        <deck anonid="locale-form-deck">
		                            <scrollbox anonid="locale-form-content" style="overflow: auto;height:232px;min-height:232px;max-height:232px" >
		                                <grid>
		                                    <columns>
		                                        <column />
		                                        <column />
		                                        <column />
		                                        <column />
		                                    </columns>
		                                    <rows anonid="locale-form-rows">
		                                    </rows>
		                                </grid>
		                            </scrollbox>
		                            <hbox anonid="locale-form-loading" flex="1" align="center" style="min-height: 150px;">
		                                <vbox flex="1" align="center">
		                                    <image src="{IconsBase}/big/shadow/hourglass.png" />
		                                    <label value="&amp;modules.uixul.bo.editlocale.Loading;" class="toolbarLabel" />
		                                </vbox>
		                            </hbox>
		                            <hbox anonid="locale-form-saving" flex="1" align="center" style="min-height: 150px;">
		                                <vbox flex="1" align="center">
		                                    <image src="{IconsBase}/big/shadow/disk_blue.png" />
		                                    <label value="&amp;modules.uixul.bo.editlocale.Saving;" class="toolbarLabel" />
		                                </vbox>
		                            </hbox>
		                            <hbox anonid="locale-form-error" flex="1" align="center" style="min-height: 150px;">
		                                <vbox flex="1" align="center">
		                                    <image src="{IconsBase}/big/shadow/warning.png" />
		                                    <label value="&amp;modules.uixul.bo.editlocale.Error;" class="toolbarLabel" />
		                                    <label value="&amp;modules.uixul.bo.messages.Confirm-close-form2;" />
		                                    <spacer height="15px" />
		                                    <hbox align="center">
		                                        <button image="{IconsBase}/small/shadow/nav_left_green.png" label="&amp;modules.uixul.bo.messages.Confirm-createnew-form-noSpaced;" oncommand="backToForm()" />
		                                        <button image="{IconsBase}/small/shadow/delete2.png" label="&amp;modules.uixul.bo.messages.Confirm-close-form-yesSpaced;" oncommand="closeForm(true)" />
		                                    </hbox>
		                                </vbox>
		                            </hbox>
		                            <hbox anonid="locale-form-stop-close" flex="1" align="center" style="min-height: 150px;">
		                                <vbox flex="1" align="center">
		                                    <image src="{IconsBase}/big/shadow/stop.png" />
		                                    <label value="&amp;modules.uixul.bo.messages.Confirm-close-form1;" class="toolbarLabel" />
		                                    <label value="&amp;modules.uixul.bo.messages.Confirm-close-form2;" />
		                                    <spacer height="15px" />
		                                    <hbox align="center">
		                                        <button image="{IconsBase}/small/shadow/disk_blue.png" label="&amp;modules.uixul.bo.messages.Confirm-close-form-saveSpaced;" oncommand="saveAndClose()" />
		                                        <button image="{IconsBase}/small/shadow/nav_left_green.png" label="&amp;modules.uixul.bo.messages.Confirm-createnew-form-noSpaced;" oncommand="backToForm()" />
		                                        <button image="{IconsBase}/small/shadow/delete2.png" label="&amp;modules.uixul.bo.messages.Confirm-close-form-yesSpaced;" oncommand="closeForm(true)" />
		                                    </hbox>
		                                </vbox>
		                            </hbox>
		                            <hbox anonid="locale-form-stop-new" flex="1" align="center" style="min-height: 150px;">
		                                <vbox flex="1" align="center">
		                                    <image src="{IconsBase}/big/shadow/stop.png" />
		                                    <label value="&amp;modules.uixul.bo.messages.Confirm-close-form1;" class="toolbarLabel" />
		                                    <label value="&amp;modules.uixul.bo.messages.Confirm-createnew-form2;" />
		                                    <spacer height="15px" />
		                                    <hbox align="center">
		                                        <button image="{IconsBase}/small/shadow/disk_blue.png" label="&amp;modules.uixul.bo.messages.Confirm-createnew-form-saveSpaced;" oncommand="saveAndCreate()" />
		                                        <button image="{IconsBase}/small/shadow/nav_left_green.png" label="&amp;modules.uixul.bo.messages.Confirm-createnew-form-noSpaced;" oncommand="backToForm()" />
		                                        <button image="{IconsBase}/small/shadow/delete2.png" label="&amp;modules.uixul.bo.messages.Confirm-createnew-form-yesSpaced;" oncommand="createEntity(null, true)" />
		                                    </hbox>
		                                </vbox>
		                            </hbox>
		                            <hbox anonid="locale-form-stop-edit" flex="1" align="center" style="min-height: 150px;">
		                                <vbox flex="1" align="center">
		                                    <image src="{IconsBase}/big/shadow/stop.png" />
		                                    <label value="&amp;modules.uixul.bo.messages.Confirm-close-form1;" class="toolbarLabel" />
		                                    <label value="&amp;modules.uixul.bo.messages.Confirm-load-form2;" />
		                                    <spacer height="15px" />
		                                    <hbox align="center">
		                                        <button image="{IconsBase}/small/shadow/disk_blue.png" label="&amp;modules.uixul.bo.messages.Confirm-load-form-saveSpaced;" oncommand="saveAndEdit()" />
		                                        <button image="{IconsBase}/small/shadow/nav_left_green.png" label="&amp;modules.uixul.bo.messages.Confirm-createnew-form-noSpaced;" oncommand="backToForm()" />
		                                        <button image="{IconsBase}/small/shadow/delete2.png" label="&amp;modules.uixul.bo.messages.Confirm-load-form-yesSpaced;" oncommand="edit(null, true)" />
		                                    </hbox>
		                                </vbox>
		                            </hbox>
		                        </deck>
		    				</vbox>
		    		    </vbox>
		            </hbox>
	            </tabpanel>
	
	            <!-- CONFIG TAB -->
	            <tabpanel id="configTabContent">
	                <hbox flex="1">
	                    <spacer flex="1"/>
	                    <vbox flex="1">
	                        <spacer flex="1"/>
	                        <grid class="change-toolbox" style="border: 1px solid #ccc !important; padding: 15px;">
	                            <columns>
	                                <column flex="10" />
	                                <column flex="1" />
	                            </columns>
	                            <rows>
	                                <description i18n:translate="&modules.uixul.bo.editlocale.ChooseLanguagesLabel;" style="font-weight: bold; font-size: 12px; width: 200px;" />
	                                <row align="center">
	                                     <listbox id="languageList" onselect="handleLanguageSelect();" />
	                                     <vbox>
	                                        <button id="moveUpLanguage" change:icon="arrow_up_green/small shadow" i18n:attributes="label &modules.uixul.bo.orderChildrenPanel.Move-upSpaced;" oncommand="moveLanguageItemUp();" orient="vertical" disabled="true" />
	                                        <button id="moveDownLanguage" change:icon="arrow_down_green/small shadow" i18n:attributes="label &modules.uixul.bo.orderChildrenPanel.Move-downSpaced;" oncommand="moveLanguageItemDown();" orient="vertical" disabled="true" />
	                                        <spacer height="15px"/>
	                                        <button id="removeLanguage" change:icon="delete2/small shadow" i18n:attributes="label &modules.uixul.bo.actions.DeleteSpaced;" oncommand="removeLanguageItem();" disabled="true" />
	                                     </vbox>
	                                </row>
	                                <spacer height="15px"/>
	                                <description i18n:translate="&modules.uixul.bo.editlocale.AddLanguageLabel;" style="font-weight: bold; font-size: 12px;" />
	                                <row align="center">
	                                     <textbox id="languageText" maxlength="2" oninput="handleLanguageInput();" />
	                                     <button id="addLanguage" change:icon="add2/small shadow" i18n:attributes="label &modules.uixul.bo.layout.AddSpaced;" oncommand="addLanguageItem();" disabled="true" />
	                                </row>
	                                <spacer height="15px"/>
	                                <hbox>
	                                    <spacer flex="1"/>
	                                    <button id="applyLanguage" change:icon="check/small shadow" i18n:attributes="label &modules.uixul.bo.layout.ApplySpaced;" oncommand="applyLanguageSetup();" disabled="true" />
	                                    <spacer flex="1"/>
	                                </hbox>
	                            </rows>
	                        </grid>
	                        <spacer flex="1"/>
	                    </vbox>
	                    <spacer flex="1"/>
	                </hbox>
	            </tabpanel>
	
	            <!-- SEARCH TAB -->
	            <tabpanel id="searchTabContent">
	                <vbox flex="1">
	                    <spacer height="3px"/>
	                    <toolbox orient="vertical" dir="normal" class="change-toolbar-empty">
						    <toolbar flex="1" orient="horizontal" dir="normal" class="change-toolbar-empty">
	                            <hbox flex="1" align="center">
	                                <label i18n:attributes="value &modules.uixul.bo.editlocale.Find-where-are;"/>
	                                <menulist id="how" oncommand="handleHowChange();">
	                                  <menupopup>
	                                    <menuitem value="1" i18n:attributes="label &modules.uixul.bo.editlocale.defined;"/>
	                                    <menuitem value="2" i18n:attributes="label &modules.uixul.bo.editlocale.used;"/>
	                                  </menupopup>
	                                </menulist>
	                                <label i18n:attributes="value &modules.uixul.bo.editlocale.the-elements-of-type;"/>
	                                <menulist id="what">
	                                  <menupopup>
	                                    <menuitem value="1" i18n:attributes="label &modules.uixul.bo.editlocale.locale-key;"/>
	                                    <menuitem id="what-content" value="2" i18n:attributes="label &modules.uixul.bo.editlocale.locale-content;"/>
	                                  </menupopup>
	                                </menulist>
	                                <menulist id="match">
	                                  <menupopup>
	                                    <menuitem value="1" i18n:attributes="label &modules.uixul.bo.editlocale.exactly-matching;"/>
	                                    <menuitem value="2" i18n:attributes="label &modules.uixul.bo.editlocale.containing;"/>
	                                    <menuitem value="3" i18n:attributes="label &modules.uixul.bo.editlocale.starting-with;"/>
	                                    <menuitem value="4" i18n:attributes="label &modules.uixul.bo.editlocale.ending-with;"/>
	                                  </menupopup>
	                                </menulist>
	                                <label value=":"/>
	                                <menulist id="value" editable="true" sizetopopup="none" width="140" >
	                                  <menupopup>
	                                    <menuitem label=""/>
	                                  </menupopup>
	                                </menulist>
	                                <toolbarspacer flex="1"/>
	                                <toolbarbutton id="run-search" change:icon="check/small shadow" oncommand="runSearch();" i18n:attributes="tooltiptext &modules.uixul.bo.editlocale.Search;" />
	                                <toolbarbutton id="halt-search" change:icon="delete2/small shadow" disabled="true" oncommand="haltSearch();" i18n:attributes="tooltiptext &modules.uixul.bo.general.buttons.Cancel;" />
	                            	<toolbarspacer flex="1"/>
	                                <toolbarbutton id="open-from-search" disabled="true" change:icon="windows/small shadow" i18n:attributes="tooltiptext &modules.uixul.bo.editlocale.Edit-in-new-window;" oncommand="openFromSearch();" />
	                                <toolbarbutton collapsed="true" id="edit-from-search" disabled="true" change:icon="edit/small shadow" i18n:attributes="tooltiptext &modules.uixul.bo.actions.Edit;" oncommand="editFromSearch();" />
	                                <toolbarbutton id="copy-key-from-search" disabled="true" change:icon="clipboard_empty/small shadow" i18n:attributes="tooltiptext &modules.uixul.bo.editlocale.Copy-key;" oncommand="copyKeyFromSearch();" />
	                                <toolbarbutton id="copy-path-from-search" disabled="true" collapsed="true" change:icon="clipboard_empty/small shadow" i18n:attributes="tooltiptext &modules.uixul.bo.editlocale.Copy-path;" oncommand="copyPathFromSearch();" />
	                                <toolbarbutton id="copy-content-from-search" disabled="true" change:icon="clipboard/small shadow" i18n:attributes="tooltiptext &modules.uixul.bo.editlocale.Copy-value;" oncommand="copyValueFromSearch();" /> 
	                            </hbox>
	                        </toolbar>
	    				</toolbox>
	    				<label id="result-header-package-alt-one" collapsed="true" i18n:attributes="value &modules.uixul.bo.editlocale.Package;"/>
	    				<label id="result-header-package-alt-two" collapsed="true" i18n:attributes="value &modules.uixul.bo.editlocale.Result-file;"/>
	    				<label id="result-header-key-alt-one" collapsed="true" i18n:attributes="value &modules.uixul.bo.editlocale.Key;"/>
	    				<label id="result-header-key-alt-two" collapsed="true" i18n:attributes="value &modules.uixul.bo.editlocale.Result-line;"/>
	    				<label id="result-header-content-alt-one" collapsed="true" i18n:attributes="value &modules.uixul.bo.editlocale.Default-lang-value;"/>
	    				<label id="result-header-content-alt-two" collapsed="true" i18n:attributes="value &modules.uixul.bo.editlocale.Result-file-content;"/>
	    				<listbox id="result-box" class="search-result-box" flex="1" onselect="selectSearchItem();">
						  <listhead flex="1">
						    <listheader id="result-header-package" i18n:attributes="label &modules.uixul.bo.editlocale.Package;"/>
						    <listheader id="result-header-key" i18n:attributes="label &modules.uixul.bo.editlocale.Key;"/>
						    <listheader id="result-header-content" i18n:attributes="label &modules.uixul.bo.editlocale.Default-lang-value;"/>
						  </listhead>					
						  <listcols flex="1">
						    <listcol maxwidth="280" flex="1"/>
						    <listcol id="result-col-key" maxwidth="250" flex="1"/>
						    <listcol id="result-col-content" maxwidth="400" flex="3"/>
						  </listcols>
						</listbox>
	                </vbox>
	            </tabpanel>	
	          </tabpanels>
	        </tabbox>
	      </vbox>            
		</xbl:content>
	</binding>
</bindings>
