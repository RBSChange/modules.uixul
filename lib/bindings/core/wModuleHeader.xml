<?xml version="1.0" encoding="utf-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xbl="http://www.mozilla.org/xbl">

	<binding id="wModuleHeader">
		<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xbl="http://www.mozilla.org/xbl">
			<vbox flex="1">
				<toolbox orient="horizontal" flex="1" class="module-header-toolbox">
					<menubar orient="horizontal" flex="1" align="center" class="module-header-toolbar">
						<hbox align="center">
							<image xbl:inherits="src=image" width="16" height="16" style="margin-top:2px; margin-left:5px;margin-right:5px;" />
							<label xbl:inherits="value=title" class="toolbarSmallerLabel" style="margin-right:0px;" />
						</hbox>
						<label anonid="additionalTitle" class="toolbarSmallerLabel" collapsed="true" crop="center" />
						<toolbarspacer flex="2" />
						<wsearchbox anonid="searchBox" />
					</menubar>
				</toolbox>
			</vbox>
		</xbl:content>

		<implementation>
			<field name="mCurrentPath">[]</field>
			<field name="mModule">null</field>
			<field name="mModuleName">null</field>

			<property name="originalTitle" onget="return this.getAttribute('title')" />

			<constructor><![CDATA[
				//wCore.debug("wModuleHeader.constructor");
				var controller = getController();
				if (controller.hasAttribute("currentmodule"))
				{
					var moduleName = controller.getAttribute("currentmodule");
					this.setCurrentModule(controller.getModuleByName(moduleName));
				}
			]]></constructor>

			<destructor><![CDATA[
				this.mCurrentPath = null;	
				this.mModule = null;			
			]]></destructor>

			<method name="getElementByAnonid">
				<parameter name="id" />
				<body><![CDATA[
                    return document.getAnonymousElementByAttribute(this, "anonid", id);
                ]]></body>
			</method>

			<method name="setCurrentModule">
				<parameter name="module" />
				<body><![CDATA[
					//wCore.debug("wModuleHeader.setCurrentModule");
					if (this.mModule === module) {return;}

					this.mModule = module;
					this.mModuleName = module.id.split('_')[1];
					
					this.mCurrentPath = [];
					this.clearAdditionalLabel();
					
					this.setAttribute('title', this.mModule.getAttribute('title'));
					this.setAttribute('image', this.mModule.hasAttribute('image-small') ? this.mModule.getAttribute('image-small') : this.mModule.getAttribute('image'));
				]]></body>
			</method>

			<method name="getModule">
				<body><![CDATA[
					return this.mModule;
				]]></body>
			</method>

			<method name="setNavigationPath">
				<parameter name="pathItems" />
				<body><![CDATA[
					//wCore.debug('wModuleHeader.setNavigationPath: ' + pathItems.length);
					this.mCurrentPath = [];
					var pathlabels = [" "];
					for (var i = 0; i < pathItems.length; i++)
					{
						var item = pathItems[i];
						this.mCurrentPath.push({id:item.id, label:item.label, type:item.type});
						if (i < 1) {continue;}
						pathlabels.push(item.label);
					}
					//wCore.debug('wModuleHeader.setNavigationPath: ' + pathlabels.join(" > "));
					this.setAdditionalLabel(pathlabels.join(" > "));
				]]></body>
			</method>

			<method name="setEditedItem">
				<parameter name="item" />
				<body><![CDATA[
					//wCore.debug('wModuleHeader.setEditedItem: ' + wCore.dump(item));
					var pathlabels = [" "];
					for (var i = 1; i < this.mCurrentPath.length; i++)
					{
						var pathItem = this.mCurrentPath[i];
						if (item && item.id == pathItem.id) {item = null;}
						pathlabels.push(pathItem.label);	
					}
					if (item) pathlabels.push(item.label);
										
					this.setAdditionalLabel(pathlabels.join(" > "));
				]]></body>
			</method>

			<method name="setAdditionalLabel">
				<parameter name="value" />
				<body><![CDATA[
					this.getElementByAnonid('additionalTitle').setAttribute("value", value);
					this.getElementByAnonid('additionalTitle').removeAttribute("collapsed");
				]]></body>
			</method>

			<method name="clearAdditionalLabel">
				<body><![CDATA[
					this.getElementByAnonid('additionalTitle').removeAttribute("value");
					this.getElementByAnonid('additionalTitle').setAttribute("collapsed", "true");
				]]></body>
			</method>
		</implementation>
	</binding>
</bindings>