<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xbl="http://www.mozilla.org/xbl">
	<binding id="wController">
		<implementation>
			<field name="STACK_LENGTH_ATTRIBUTE" readonly="true">"stacklength"</field>
			<field name="CONTROLLER_ATTRIBUTE" readonly="true">"controller"</field>
			<field name="CONTROLLER_TAGNAME" readonly="true">"wcontroller"</field>
			<field name="ACTION_ACCESSOR" readonly="true">"action"</field>
			<field name="MODULE_ACCESSOR" readonly="true">"module"</field>

			<field name="_actionStack">[]</field>
			<field name="_windowStatusTimeout">null</field>
			<field name="_currentRequest">null</field>
			
			<field name="_permissionInfos">null</field>

			<!-- The maximum action stack length - default is 32 -->
			<property name="stackLength">
				<getter><![CDATA[
					if (this.hasAttribute(this.STACK_LENGTH_ATTRIBUTE))
					{
						return Math.max(1, parseInt(this.getAttribute(this.STACK_LENGTH_ATTRIBUTE)));
					}
					return 32;
				]]></getter>
				<setter><![CDATA[
					val = parseInt(val);
					if (val > 0)
					{
						this.setAttribute(this.STACK_LENGTH_ATTRIBUTE, val);
					}
					else
					{
						this.removeAttribute(this.STACK_LENGTH_ATTRIBUTE);
					}
				]]></setter>
			</property>

			<!-- The URL of the server controller -->
			<field name="controllerUrl">"{ControllerUrl}"</field>

			<!-- Indicates if the controller is currently busy or not -->
			<property name="isBusy">
				<getter><![CDATA[
					return this.getAttribute('disabled') == 'true';
				]]></getter>
				<setter><![CDATA[
					if (!val)
					{
						this.removeAttribute('disabled');
						this.setAttribute("available", "true");
					}
					else
					{
						this.setAttribute('disabled', 'true');
						this.removeAttribute("available");
					}
				]]></setter>
			</property>

			<method name="release">
				<body><![CDATA[
					this.isBusy = false;
				]]></body>
			</method>

			<!-- Initializes the wController. -->
			<constructor><![CDATA[
				// checks whether another "wcontroller" exists or not
				wCore.debug('wcontroller.constructor');
				
				var c = getController();
				if (c && c !== this)
				{
					throw new Error("[wController] CONTROLLER_ALREADY_EXISTS ('" + this.CONTROLLER_TAGNAME + "')");
				}

				// sets the controller id if it is not set
				if (!this.hasAttribute('id'))
				{
					this.setAttribute('id', this.CONTROLLER_TAGNAME);
				}

				wCore.debug('Controller  : ' + this.controllerUrl);
				wCore.debug('Stack length: ' + this.stackLength);
				
				try
				{
					this._permissionInfos = wCore.executeJSON('users', 'GetBackEndUserAccess', {}, null, true).contents;
					var me = this;
					window.setTimeout(function() {me.preLoadStdBindings();}, 10);
					
					var dashboard = this.getModuleByName('dashboard');
					if (dashboard) {this.showModule(dashboard); }
				}
				catch (e)
				{
					wCore.error('wController.constructor', [], e);
				}
				
			]]></constructor>
			
			<method name="getElementByAnonid">
				<parameter name="id" />
				<body><![CDATA[
                    return document.getAnonymousElementByAttribute(this, "anonid", id);
                ]]></body>
			</method>
						
			<method name="preLoadStdBindings">
				<body><![CDATA[
					this.preLoadBinding('form.cField');	
					this.preLoadBinding('form.cConstraint');
					this.preLoadBinding('widgets.cNavigation');
					this.preLoadBinding('layout.cDocumentEditor');
					this.preLoadBinding('core.cRichText');
					this.preLoadBinding('form.cRichTextFieldToolbar');				
				]]></body>			
			</method>
			
			<method name="preLoadBinding">
				<parameter name="src" />
				<body><![CDATA[
					try
					{
						wCore.debug('preLoadBinding : ' + src);
						var baseBindingurl = Context.CHROME_BASEURL + '/module=uixul&action=GetBinding&binding=' + src +'&uilang=' + Context.W_UILANG;
						return document.loadBindingDocument(baseBindingurl);
					}
					catch (e)
					{
						wCore.error('preLoadBinding', [src], e);
					}
					return null;
				]]></body>
			</method>	
			
			<method name="getModuleByName">
				<parameter name="moduleName" />
				<body><![CDATA[
					return document.getElementById('wmodule_'+moduleName);
				]]></body>
			</method>				

			<method name="showModule">
				<parameter name="module" />
				<body><![CDATA[
					var moduleName = module.id.split('_')[1];
					wCore.debug('wcontroller.showModule: ' + moduleName);
					this.setAttribute("currentmodule", moduleName);
					var deck = document.getElementById("deck_wmodules");
					var originalDeckIndex = deck.selectedIndex;
					for (var i = 0 ; i<deck.childNodes.length ; i++)
					{
						if (deck.childNodes[i] === module && deck.selectedIndex != i)
						{
							var fromModule = deck.childNodes[deck.selectedIndex];
							var fromModulename = fromModule.id.split('_')[1];
							wCore.debug('Switch from ' + fromModulename + ' to ' + module.id);
							if ('onSwitchFrom' in module)
							{
								module.onSwitchFrom(fromModule);
							}
							else
							{
								module.setAttribute("switchfrom", fromModulename);
							}
							deck.selectedIndex = i;
						}
					}
					var header = document.getElementById("module_header");
					if ('setCurrentModule' in header) {header.setCurrentModule(module);}
				]]></body>
			</method>
			
			<!-- Clean up when the wController is about to be destructed. -->
			<destructor><![CDATA[
				wCore.debug('wcontroller.destructor');
				this._actionStack = []; // empties the action stack
			]]></destructor>
			
			<method name="getUserInfos">
				<body><![CDATA[
					if (this._permissionInfos == null || this._permissionInfos.userinfos == null)
					{
						return {};
					}
					return this._permissionInfos.userinfos;
				]]></body>
			</method>
			
			<method name="getUserPreferences">
				<body><![CDATA[
					if (this._userPreferences == null)
					{
						if (this._permissionInfos && this._permissionInfos.userPreferences)
						{
							this._userPreferences = this._permissionInfos.userPreferences;
						}
						else
						{
							this._userPreferences = {};
						}
					}
					return this._userPreferences;
				]]></body>
			</method>
			
			<method name="saveUserPreferences">
				<body><![CDATA[
					if (this._userPreferences != null)
					{
						var parameters = {'userPreferences' : wCore.stringifyJSON(this._userPreferences)}
						wCore.executeJSON('users', 'SaveUserPreferences', parameters, null, true);
					}
					setCookie("cacheversion", -1, 365);
					enableReloadInterface();			
				]]></body>
			</method>	
			
			<method name="getUserPreference">
				<parameter name="name" />
				<body><![CDATA[
					var prefs = this.getUserPreferences();
					if (name in prefs)
					{
						return prefs[name];
					}
					return null;
				]]></body>
			</method>		
			
			<method name="checkModuleAccess">
				<parameter name="moduleName" />
				<body><![CDATA[
					if (this._permissionInfos == null || this._permissionInfos.userinfos == null)
					{
						return false;
					}
					//wCore.debug('wcontroller.checkModuleAccess' + moduleName);
					if (this._permissionInfos[moduleName])
					{
						return this._permissionInfos[moduleName].access;
					}
					else if (this._permissionInfos.userinfos.root)
					{
						return true;
					} 
					else if ('changepassword' == moduleName)
					{
						return true;
					}
					return false;
				]]></body>
			</method>
			
			<method name="checkModuleAsRessource">
				<parameter name="moduleName" />
				<body><![CDATA[
					if (this._permissionInfos == null || this._permissionInfos.userinfos == null)
					{
						return false;
					}
					if (this._permissionInfos[moduleName])
					{
						return this._permissionInfos[moduleName].list;
					}
					else if (this._permissionInfos.userinfos.root)
					{
						return true;
					} 
					else if ('changepassword' == moduleName)
					{
						return true;
					}
					return false;
				]]></body>
			</method>
			
			<method name="checkModuleVersion">
				<parameter name="moduleName" />
				<parameter name="version" />
				<body><![CDATA[
					if (this._permissionInfos != null && this._permissionInfos[moduleName])
					{
						var reg = new RegExp("[.-]+", "g");
						var requiredVersionParts = version.split(reg);
						var moduleVersionParts = this._permissionInfos[moduleName].version.split(reg);
						for (var i = 0; i < 4; i++)
						{
							//wCore.debug('i = '+i+', requiredVersionParts[i] = '+requiredVersionParts[i]+', moduleVersionParts[i] = '+moduleVersionParts[i]);
							if (requiredVersionParts[i] > moduleVersionParts[i])
							{
								return false;
							}
							else if (requiredVersionParts[i] < moduleVersionParts[i])
							{
								return true;
							}
						}
						return true;
					}
					return false;
				]]></body>
			</method>
			
			<method name="makeUrl">
				<parameter name="module" />
				<parameter name="action" />
				<parameter name="parameters" />
				<body><![CDATA[
					return wCore.buildeServerUrl(module, action, parameters);
				]]></body>
			</method>

			<method name="closeErrorPanel" >
				<body><![CDATA[
					this.closeModalDialog();
					this.getElementByAnonid('errorMainContainer').hidden = true;;
					this.getElementByAnonid('errorMessageWindow').hidden = true;					
				]]></body>
			</method>

			<method name="openErrorPanel">
				<parameter name="message" />
				<parameter name="stacktrace" />
				<body><![CDATA[
					this.getElementByAnonid('errorMainContainer').hidden = false;
					this.getElementByAnonid('errorMessageWindow').hidden = false;
					var ew = this.getElementByAnonid('errorMessageWindow');
					ew.setAttribute('width', Math.min(window.innerWidth, 800));
					ew.setAttribute('left', Math.round((window.innerWidth-parseInt(ew.getAttribute('width')))/2));
					ew.setAttribute('top', Math.round((window.innerHeight-parseInt(ew.getAttribute('height')))/2));
					this.getElementByAnonid('errorMessageTextbox').value = message;
				]]></body>
			</method>

			<method name="openModalDialog">
				<parameter name="sender" />
				<parameter name="template" />
				<parameter name="parametres" />
				<body><![CDATA[
					wCore.debug("wController.openModalDialog" + sender);
					this.getElementByAnonid('errorMainContainer').hidden = false;
					var ew = this.getElementByAnonid('modalDialogWindow');						
					ew.hidden = false;
					ew.removeAttribute("template");
					ew.setAttribute("template", template);
					
					ew.setAttribute('width', Math.min(window.innerWidth, 600));
					ew.setAttribute('height', Math.min(window.innerWidth, 400));
					ew.setAttribute('left', Math.round((window.innerWidth-parseInt(ew.getAttribute('width')))/2));
					ew.setAttribute('top', Math.round((window.innerHeight-parseInt(ew.getAttribute('height')))/2));	
														
					wCore.executeOnMethodExists(ew, "onInitialize" , function(xbl) {xbl.onOpen(sender, parametres);});
					wCore.debug("wController.openModalDialog : OK ");
				]]></body>
			</method>
			
			<method name="alert">
				<parameter name="message" />
				<body><![CDATA[
					wCore.debug("wController.alert");
					var ew = this.getElementByAnonid('modalDialogWindow');
					if (ew.getAttribute("template") == 'alert')
					{
						wCore.executeOnMethodExists(ew, "append" , function(dlg) {dlg.append(message);});
						wCore.debug(ew);
					}
					else
					{
						this.openModalDialog(this, 'alert', message);
					}
				]]></body>
			</method>			
			
			<method name="closeModalDialog">
				<parameter name="returnValue" />
				<body><![CDATA[
					this.getElementByAnonid('errorMainContainer').hidden = true;;
					this.getElementByAnonid('modalDialogWindow').removeAttribute("template");
					this.getElementByAnonid('modalDialogWindow').hidden = true;
				]]></body>
			</method>
			
			<method name="getPathToIdForModule">
				<parameter name="id" />
				<parameter name="moduleName" />
				<body><![CDATA[
					try
					{
						var result = wCore.executeJSON(moduleName, 'GetPathToId', {cmpref: id}, null, true);
						if (result != null && result.status != null && result.status == 'OK')
						{
							wCore.debug('wController.getPathToIdForModule length '+result.contents.length);
							return result.contents;
						}
					} 
					catch (e)
					{
						wCore.error("wBaseList.loadPathToId", [id], e);
					}			
					return [];
				]]></body>
			</method>
			
			<method name="fullScreenRichText">
				<parameter name="richText" />
				<parameter name="originalToolbar" />
				<body><![CDATA[
					try
					{
						var moduleName = this.getAttribute('currentmodule');
						var module = this.getModuleByName(moduleName);
						if (module) {module.setAttribute('collapsetree', 'true');}
						this.getElementByAnonid('fulltexteditor').show(richText, originalToolbar);
					} 
					catch (e)
					{
						wCore.error("maximizeRichText", [richText, originalToolbar], e);
					}			
				]]></body>
			</method>	
			
			<method name="onCloseFullRichText">
				<body><![CDATA[
					try
					{
						var moduleName = this.getAttribute('currentmodule');
						var module = this.getModuleByName(moduleName);
						if (module) {module.removeAttribute('collapsetree');}
					} 
					catch (e)
					{
						wCore.error("onCloseFullRichText", [], e);
					}			
				]]></body>
			</method>
		</implementation>
		<content>
			<xul:stack flex="1">
				<xul:vbox flex="1" style="opacity: 0.99">
					<xbl:children />
				</xul:vbox>
				<xul:cfulltexteditor anonid="fulltexteditor" collapsed="true" flex="1"/>
				<xul:vbox anonid="errorMainContainer" class="errorMainContainer" flex="1" hidden="true"/>
				<xul:vbox anonid="errorMessageWindow" class="errorMessageWindow" flex="1" left="0" top="0" height="400" hidden="true">
					<xul:label value="&amp;modules.uixul.bo.general.The-following-error-occuredLabel;" />
					<xul:textbox readonly="true" multiline="true" anonid="errorMessageTextbox" class="errorMessageTextbox" />
					<xul:hbox>
						<xul:spacer flex="1" />
						<xul:button label="&amp;modules.uixul.bo.general.buttons.CloseSpaced;" oncommand="closeErrorPanel()" />
					</xul:hbox>
				</xul:vbox>			
				<xul:wdialog anonid="modalDialogWindow" class="modalDialogWindow" template="" flex="1" left="0" top="0" height="400" width="600" hidden="true" />
			</xul:stack>
		</content>
		<handlers>
			<handler
				event="keypress" keycode="VK_ESCAPE"><![CDATA[
				this.closeErrorPanel();
			]]></handler>
			
			<handler event="keypress" keycode="VK_BACK"><![CDATA[
				wCore.debug("<-CONTROLER BACK");
	            event.stopPropagation();
			]]></handler>
		</handlers>
    </binding>
</bindings>