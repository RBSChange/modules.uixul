<?xml version="1.0" encoding="utf-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" 
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" 
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
	xmlns:xbl="http://www.mozilla.org/xbl">
	
	<binding id="wDialog">
		<implementation>
			<field name="mController">null</field>
			<field name="sender">null</field>
			<field name="parameters">null</field>
			
			<property name="controller" readonly="true">
				<getter><![CDATA[
					if (this.mController == null)
					{
						this.mController = getController();	
					}
					return this.mController;
				]]></getter>
			</property>
			
			<constructor><![CDATA[
			]]></constructor>

			<method name="onCancel">
				<body><![CDATA[
					this.controller.closeModalDialog();
				]]></body>
			</method>

			<method name="onOpen">
				<parameter name="sender" />
				<parameter name="parameters" />
				<body><![CDATA[
					this.sender = sender;
					this.parameters = parameters;
					this.onInitialize();
				]]></body>
			</method>

			<method name="resizeTo">
				<parameter name="width" />
				<parameter name="height" />
				<body><![CDATA[	
					var minwidth = Math.min(window.innerWidth, width);
					var minheight = Math.min(window.innerHeight, height);
					this.setAttribute('width', minwidth);
					this.setAttribute('height', minheight);
					this.setAttribute('left', Math.round((window.innerWidth - minwidth)/2));
					this.setAttribute('top', Math.round((window.innerHeight - minheight)/2));
				]]></body>
			</method>

			<method name="autoResize">
				<parameter name="width" />
				<parameter name="height" />
				<body><![CDATA[	
					this.resizeTo(Math.min(width, window.innerWidth-10), Math.min(height, window.innerHeight-10));
										
					var me = this;
					var callBack = function(e) { me.resizeTo(Math.min(width, window.innerWidth-10), Math.min(height, window.innerHeight-10));};
					window.addEventListener('resize', callBack, true);
				]]></body>
			</method>
			
			<method name="getElementByAnonId">
				<parameter name="anonId"/>
				<body><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', anonId);
				]]></body>
			</method>
			
			<!-- @deprecated use this.controller -->
			<method name="getController">
				<body><![CDATA[
					return this.controller;
				]]></body>
			</method>
			
			<!-- @deprecated use getElementByAnonId -->
			<method name="getElementById">
				<parameter name="id"/>
				<body><![CDATA[
					return this.getElementByAnonId(id);
				]]></body>
			</method>
		</implementation>

		<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xbl="http://www.mozilla.org/xbl">
			<xbl:children />
		</xbl:content>

		<handlers>
			<handler event="keypress" keycode="VK_ESCAPE"><![CDATA[
				this.onCancel();
			]]></handler>
		</handlers>
	</binding>

	<binding id="alertDialog" extends="core.wDialog#wDialog">
		<implementation>
			<property name="message" readonly="true">
				<getter>return this.getElementByAnonId('message');</getter>
			</property>

			<method name="onInitialize">
				<body><![CDATA[
					this.autoResize(600, 400);
					this.clear();
					this.append(this.parameters);
				]]></body>
			</method>

			<method name="append">
				<parameter name="msg" />
				<body><![CDATA[
					var message = this.message;
					var txts = msg.split("\n");
					for (var i = 0; i < txts.length; i++)
					{
						var node = message.appendChild(document.createElement('description'));
						node.setAttribute('style', 'max-width: 570px');
						node.setAttribute('class', 'allow-text-selection');
						node.textContent = txts[i];
					}
					message.scrollTop = message.scrollHeight;
				]]></body>
			</method>

			<method name="clear">
				<body><![CDATA[
					var message = this.message;
					while (message.lastChild) {message.removeChild(message.lastChild);}
				]]></body>
			</method>

			<method name="onOk">
				<body><![CDATA[									
					this.controller.closeModalDialog(true);					
				]]></body>
			</method>
		</implementation>
		<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xbl="http://www.mozilla.org/xbl">
			<vbox flex="1">
				<hbox align="center">
					<image src="{IconsBase}/small/information.png" width="16" height="16" />
					<spacer width="5px" />
					<label value="${trans:m.uixul.bo.dialog.alert-title,ucf,attr}" class="wizardTitle" />
				</hbox>
				<spacer height="5px" />
				<hbox flex="1" pack="center">
					<vbox flex="1" anonid="message" style="overflow-y: auto;"/>
				</hbox>
				<hbox>
					<spacer flex="1" />
					<button width="100px" image="{IconsBase}/small/check.png" oncommand="onOk();" label="${trans:m.uixul.bo.dialog.ok,ucf,attr}" />
					<spacer flex="1" />
				</hbox>
			</vbox>
		</xbl:content>
	</binding>

	<binding id="cRessourceDialog" extends="core.wDialog#wDialog">
		<resources>
			<stylesheet src="modules.uixul.cEditorGrid" />
		</resources>
		<implementation>
			<field name="mMultiTreePopup">null</field>
			<field name="mNavTree">null</field>
			<field name="mListTree">null</field>
			<field name="mDropData">null</field>
			
			<field name="mInitialized">false</field>
			<field name="mConfig">null</field>
						
			<constructor><![CDATA[
				wCore.debug("cRessourceDialog.constructor");
				this.mInitialized = false;
				this.mMultiTreePopup = this.getElementByAnonId('multiTreePopup');
				this.mNavTree = this.getElementByAnonId("nav_tree");
				this.mListTree = this.getElementByAnonId("list_tree");
				this.autoResize(1000, 600);
				
				var me = this;
				var callBack = function(result) {me.onLoadRessources(result);};
				wCore.executeJSON('uixul', "GetModulesRessource", {}, callBack);				
			]]></constructor>
			
			<method name="onLoadRessources">
				<parameter name="result" />			
				<body><![CDATA[
					this.mConfig = result.contents;
					for (var moduleName in this.mConfig)
					{
						var info = this.mConfig[moduleName];
						this.addModule(moduleName, info.label, info.icon);
					}
					
					this.mInitialized = true;
					if (this.hasAttribute('select-type'))
					{
						this.selectType(this.getAttribute('select-type'));
					}
					if (this.hasAttribute('select-tree'))
					{
						this.selectTree(this.getAttribute('select-tree'));
					}
				]]></body>
			</method>
			
			<method name="addModule">
				<parameter name="modulename" />
				<parameter name="label" />
				<parameter name="icon" />
				<body><![CDATA[
					var menuitem = this.mMultiTreePopup.appendChild(document.createElement('menuitem'));
					menuitem.setAttribute('module', modulename);
					menuitem.setAttribute('label', label);
					menuitem.setAttribute('image', icon);
					menuitem.className = 'menuitem-iconic';
					
					var me = this;
					var mn = modulename;
					menuitem.addEventListener("command", function (event) {me.selectTree(mn);}, true);
					return menuitem;
				]]></body>
			</method>
			
			<method name="onInitialize">
				<body><![CDATA[
					this.selectType(this.parameters.allow);
					this.selectTree(this.parameters.module);

					if (this.parameters.single)
					{
						this.setAttribute("hide-list", "true");
					}
					else 
					{
						this.removeAttribute("hide-list");
						var lst = this.getElementByAnonId("selectedList"); 
						var me = this;
						lst.addEventListener("dragenter", function (event) {me.onDragEnter(event);}, false);
						lst.addEventListener("dragover", function (event) {me.onDragOver(event);}, false);
						lst.addEventListener("drop", function (event) {me.onDrop(event);}, false);
						//lst.addEventListener("dragend", function (event) {me.onDragEnd(event);}, false);
						lst.addEventListener("dragleave", function (event) {me.onDragLeave(event);}, false);						
					}
					this.getElementByAnonId("message-box").showHelpMessage("${trans:m.uixul.bo.dialog.ressource-selector-description,ucf,js}");
				]]></body>
			</method>
			
			<method name="onDragEnter">
				<parameter name="event" />		
				<body><![CDATA[		
					this.mDropData = null;
					var dropNodeInfo = event.dataTransfer.mozGetDataAt("application/json-documentidtype-array", 0);
					if (dropNodeInfo)
					{
						var dropNode = wCore.parseJSON(dropNodeInfo);
						var filterItems = this.sender.filterAllowed(dropNode);
						if (filterItems.length > 0)
						{
							this.mDropData = filterItems;
							wCore.debug(wCore.dump(this.mDropData));
						}
					}
					event.preventDefault();
				]]></body>	
			</method>
			
			<method name="onDragOver">
				<parameter name="event" />			
				<body><![CDATA[
					 if (this.mDropData == null) { return; }
					 event.preventDefault();
				]]></body>	
			</method>
			
			<method name="onDrop">
				<parameter name="event" />			
				<body><![CDATA[				
					if (this.mDropData  != null)
					{
						for (var i = 0; i < this.mDropData.length ; i++) 
						{
							if (this.getElementByAnonId('listitem_' + this.mDropData[i]))
							{
								continue;
							}
							var infos = wCore.getDocumentInfo(this.mDropData[i]);
							infos.label = infos.labels[infos.lang];
							this.addItem(infos);
						}
						this.mDropData = null;
					}
					event.preventDefault();					
				]]></body>	
			</method>
			
			<method name="onDragLeave">
				<parameter name="event" />			
				<body><![CDATA[
				]]></body>	
			</method>
			
			<method name="onOk">
				<body><![CDATA[
					if (!this.parameters.single)
					{
						var currentValue = this.sender.value;
						
						var ids = currentValue.length ? currentValue.split(',') : [];
						var items = this.getElementByAnonId("selectedList").getElementsByTagName('row');
						
						currentValue = ',' + currentValue + ',';
						for (var i = 0; i < items.length; i++) 
						{ 
							if (items[i].hasAttribute("value"))
							{
								if (currentValue.indexOf(items[i].getAttribute("value")) == -1)
								{
									ids.push(items[i].getAttribute("value"));
								}
							}
						}
						wCore.debug(ids.join(','));
						this.sender.value = ids.join(',');
					}
					else
					{
						this.handleSelected(this.getElementByAnonId('list_tree'));
					}
					this.controller.closeModalDialog(true);	
				]]></body>
			</method>

			<method name="setErrorMessage">
				<parameter name="message" />
				<body><![CDATA[
					this.getElementByAnonId("message-box").showMessage("error", message);
				]]></body>
			</method>

			<method name="selectTree">
				<parameter name="moduleName" />
				<body><![CDATA[
					if (!this.mInitialized)
					{
						if (moduleName)
						{
							this.setAttribute('select-tree', moduleName);
						}
						else
						{
							this.removeAttribute('select-tree');
						}
						return;
					}
					this.removeAttribute('select-tree');
					
					if (moduleName && (moduleName in this.mConfig))
					{
						var mCurrentConfig = this.mConfig[moduleName];
						this.mNavTree.setCurrentConfig(mCurrentConfig);	
						this.mListTree.setCurrentConfig(mCurrentConfig);
							
						var menu = this.getElementByAnonId('multiTreeButton');
						menu.setAttribute('image', mCurrentConfig.icon);
						menu.setAttribute('label', mCurrentConfig.label);				
						this.getElementByAnonId('multiTreeTitle').setAttribute('value', mCurrentConfig.label);							
						this.getElementByAnonId('searchButton').removeAttribute("disabled");								
						this.mNavTree.initTree(mCurrentConfig.rootFolderId);
					}
				]]></body>
			</method>
			
			<method name="selectType">
				<parameter name="typeList" />
				<body><![CDATA[
					if (!this.mInitialized)
					{
						if (typeList)
						{
							this.setAttribute('select-type', typeList);
						}
						else
						{
							this.removeAttribute('select-type');
						}
						return;
					}

					this.removeAttribute('select-type');
					var allowedTypes = this.mListTree.selectType(typeList);
					var allowedModules = this.getAllowedModules(allowedTypes);
					
					var menuitems = this.mMultiTreePopup.childNodes;
					var viewModule = false;
					for (var i = 0; i < menuitems.length; i++)
					{
						var mdn = menuitems[i].getAttribute('module');
						if (allowedModules == null || allowedModules[mdn])
						{
							menuitems[i].collapsed = false;
							viewModule = true;
						}
						else
						{
							menuitems[i].collapsed = true;
						}	
					}
					if (!viewModule)
					{
						this.getElementByAnonId("message-box").showWarningMessage("${trans:m.uixul.bo.dialog.ressource-selector-no-module,ucf,js}");
					}
					else
					{
						this.getElementByAnonId("message-box").showHelpMessage("${trans:m.uixul.bo.dialog.ressource-selector-description,ucf,js}");
					}
				]]></body>
			</method>
			
			<method name="getAllowedModules">
				<parameter name="allowedTypes" />
				<body><![CDATA[
					if (allowedTypes == null) {return null;}
					var modulesName = {};
					for (var moduleName in this.mConfig)
					{
						var mfm = this.mConfig[moduleName].listcomponents.split(',');
						for (var i = 0; i < mfm.length; i++)
						{
							if (allowedTypes[mfm[i]])
							{
								modulesName[moduleName] = mfm[i];
								break;
							}
						}
					}
					return modulesName;
				]]></body>
			</method>
			
			<method name="handleSelected">
				<parameter name="list" />
				<body><![CDATA[
					var selectedItems = list.getSelectedItems();
					var filterItems = [];
					var indexedItems = {};
					for (var i = 0; i < selectedItems.length ; i++) 
					{
						filterItems.push([ selectedItems[i].id, selectedItems[i].type ]);
						indexedItems['_'+ selectedItems[i].id ] = {label: selectedItems[i].label, id: selectedItems[i].id};
					}
					
					filterItems = this.sender.filterAllowed(filterItems);
					if (filterItems.length == 0)
					{
					   	this.setErrorMessage("${trans:m.uixul.bo.dialog.ressource-selector-error-not-allowed,ucf,js}");
						return;
					}
					
					if (this.parameters.single)
					{
						this.sender.value = filterItems[0];
						this.controller.closeModalDialog(true);	
					}
					else
					{
						for (var i = 0; i < filterItems.length ; i++) 
						{
							if (this.getElementByAnonId('listitem_' + filterItems[i]))
							{
								continue;
							}
							this.addItem(indexedItems['_'+ filterItems[i]]);
						}
					}
				]]></body>
			</method>

			<method name="refresh">
			<body><![CDATA[
				wCore.debug('cRessourcesSelector.refresh');
				
				]]></body>	
			</method>
			
			<method name="toggleSearch">
		  		<body><![CDATA[
		  			this.mListTree.toggleSearch();
		  		]]></body>
			</method>	

			<method name="delete">
				<parameter name="button" />
				<body><![CDATA[
					var pn = button.parentNode;
					while (pn.localName != 'row') {pn = pn.parentNode;}
					pn.parentNode.removeChild(pn);
				]]></body>
			</method>	
					  
			<method name="addItem">
				<parameter name="jsnode" />
				<body><![CDATA[
					var row = document.createElement('row');
					row.setAttribute('class', 'document');
					row.setAttribute('anonid', 'listitem_' + jsnode.id);
					row.setAttribute('value', jsnode.id);
					 
					var cell = row.appendChild(document.createElement('label'));
					cell.setAttribute('value', jsnode.label);
					cell.setAttribute('crop', 'end');
										
					cell = row.appendChild(document.createElement('toolbar'));
					cell.setAttribute('class', 'actions');
					var button = cell.appendChild(document.createElement('toolbarbutton'));
					button.setAttribute('action', 'delete');
					button.setAttribute('image', '{IconsBase}/small/delete.png');
					button.setAttribute('tooltiptext', "${trans:m.uixul.bo.actions.delete,ucf,js}");
					this.getElementByAnonId('document-rows').appendChild(row);
				]]></body>
			</method>		
		</implementation>
		
		<handlers>
			<handler event="ressourcestreechange"><![CDATA[
				try
				{
					var items = event.originalTarget.getSelectedItems();
					var list = this.getElementByAnonId('list_tree');
					if (items.length == 1)
					{
						list.loadNode(items[0].id, items[0].modelName);
						if (list.isSearchToggled()) {list.search();}
					}
					else
					{
						list.clear();
					}	
				}
				catch (e) {wCore.error("cRessourcesSelector.click", [], e);}
			]]></handler>
			
			<handler event="click" button="0" clickcount="2"><![CDATA[
				if (this.mNavTree)
				{
					var elem = event.originalTarget;
					while (elem && elem !== this.mNavTree) {elem = elem.parentNode;}
					if (elem && elem.getSelectedItems().length == 1)
					{
						this.handleSelected(elem);
					}
				}
			]]></handler>
			
			<handler event="ressourceSelected" button="0" clickcount="2"><![CDATA[
				this.handleSelected(event.originalTarget);
			]]></handler>

			<handler event="select"><![CDATA[
				var resSelect = this.getElementByAnonId('list_tree');
				var items = resSelect.getSelectedItems();
				if (items.length === 1 && items[0].hasPreviewImage)
				{
					var item = items[0];
					var module = item.type.split('_')[1];
					var url = wCore.buildServerUrl(module, 'PreviewImage', {cmpref:item.id, lang:Context.W_LANG, "max-height":190, "max-width":240});
					this.getElementByAnonId("previewimage").setAttribute('src', url);
					return;
				}
				this.getElementByAnonId("previewimage").setAttribute('src', 'about:blank');
			]]></handler>
			
			<handler event="command"><![CDATA[
				var target = event.originalTarget;
				if (target.localName == 'toolbarbutton' && target.hasAttribute('action'))
				{
					switch (target.getAttribute('action'))
					{						
						case 'delete':
							this.delete(target);
							break;
					}
					return;
				}
			]]></handler>		
		</handlers>
		
		<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xbl="http://www.mozilla.org/xbl">
			<vbox flex="1">
				<hbox class="dialog-header">
					<label class="dialog-title">${trans:m.uixul.bo.dialog.select-ressources,ucf}</label>
					<spacer flex="1" />
					<vbox pack="center">
						<toolbarbutton height="16" width="16" image="{IconsBase}/small/delete.png" oncommand="onCancel();" tooltiptexts="${trans:m.uixul.bo.dialog.cancel,ucf,attr}" />
					</vbox>
				</hbox>
				<cmessageinfo anonid="message-box" />	
				<hbox flex="1" style="padding-left:5px;padding-right:5px;">
					<vbox width="250" style="border: thin inset #e3e3e3;">
						<toolbox class="change-toolbox-dark" style="height:25px; padding-top: 0px;">
							<toolbar class="change-toolbar">	
								<toolbarbutton anonid="multiTreeButton" class="module-selector"  image="{IconsBase}/small/modules.png" oncommand="refresh()" type="menu">
									<menupopup anonid="multiTreePopup" />
								</toolbarbutton>
								<spacer flex="1" />
								<label anonid="multiTreeTitle" collapsed="true" class="toolbarLabel"  style="font-size: 1.3em;"/>
							</toolbar>
						</toolbox>
						<cressourcestreeselector anonid="nav_tree" flex="1" xbl:inherits="disabled,collapsed,hidden,hideheader" />
					</vbox>
					<spacer width="5"/>
					<vbox flex="1" style="border: thin inset #e3e3e3; min-width: 200px">
						<toolbox class="change-toolbox-dark" style="height:25px; padding-top: 0px;">
							<toolbar class="change-toolbar">	
								<toolbarbutton anonid="searchButton" disabled="true" image="{IconsBase}/small/search.png" oncommand="toggleSearch()" 
								tooltiptext="${trans:m.uixul.bo.general.togglesearchresourcemode,ucf,etc,attr}"
								crop="end" label="${trans:m.uixul.bo.general.showsearch,ucf,attr}" />					
							</toolbar>
						</toolbox>
						<cressourceslistselector anonid="list_tree" flex="1" treetype="2" xbl:inherits="disabled,collapsed,hidden,hideheader"/>
					</vbox>
					<spacer width="5"/>
					<vbox width="250">
						<vbox flex="1">
							<vbox xbl:inherits="collapsed=hide-list" flex="1" style="border: thin inset #e3e3e3;">
								<label class="change-toolbox-dark">${trans:m.uixul.bo.dialog.ressource-selection,ucf}</label>
								<grid anonid="selectedList" width="250" flex="1" style="overflow-y: scroll; overflow-x: hidden; margin: 0; padding: 0;">
									<columns>
										<column width="200" />
										<column width="20" />
									</columns>
									<rows anonid="document-rows">
									</rows>
								</grid>
							</vbox>
						</vbox>
						<spacer xbl:inherits="collapsed=hide-list" height="5" />
						<vbox style="border: thin inset #e3e3e3;">
							<label class="change-toolbox-dark">${trans:m.uixul.bo.dialog.ressource-preview,ucf}</label>
							<vbox width="250" height="200" align="center" pack="center">
								<image anonid="previewimage" src="{IconsBase}/small/document.png" />
							</vbox>
						</vbox>
					</vbox>
				</hbox>
				<hbox pack="end" align="center">
					<button image="{IconsBase}/small/check.png" oncommand="onOk();" label="${trans:m.uixul.bo.dialog.apply,ucf,attr}" />
				</hbox>
			</vbox>
		</xbl:content>
	</binding>

	<binding id="cRichtextRessourceDialog" extends="core.wDialog#cRessourceDialog">
		<implementation>
			<constructor><![CDATA[
				this.getElementByAnonId('list_tree').setAttribute('treetype', '3');
			]]></constructor>
		
			<method name="handleSelected">
				<parameter name="list" />
				<body><![CDATA[
					var selectedItems = list.getSelectedItems();
					if (selectedItems.length == 0)
					{
						return;
					}
					var selectedItem = selectedItems[0];
					if (selectedItem.htmllink)
					{
						if (selectedItem.htmllink.substring(0,3) == "<a ")
						{
							var sel = this.sender.getCurrentSelection();
							if (!sel.collapsed)
							{
								var div = this.sender.editorDocument.createElement('div');
								div.innerHTML = selectedItem.htmllink;
								var a = div.firstChild;
								while (a.lastChild) {a.removeChild(a.lastChild);}
								try
								{
									sel.range.surroundContents(a);	
									this.sender.updateToolbar(false);
								}
								catch (e)
								{
									wCore.error('cRichtextRessourceDialog', ['Unable to surround content ', selectedItem.htmllink], e);
									this.sender.applyStyle('insertHTML', selectedItem.htmllink);
								}
								this.controller.closeModalDialog(true);
								return;				
							}
						}
						this.sender.applyStyle('insertHTML', selectedItem.htmllink);
						this.controller.closeModalDialog(true);
						return;	
					}
				]]></body>
			</method>
		</implementation>
	</binding>

	<binding id="cUserPreferencesDialog" extends="core.wDialog#wDialog">
		<implementation>
			<constructor><![CDATA[
				wCore.debug("cUserPreferencesDialog.constructor");
			]]></constructor>
			
			<method name="getPref">
				<parameter name="name" />
				<parameter name="defaultValue" />
				<body><![CDATA[
					return (name in this.parameters) ? this.parameters[name] : defaultValue;
				]]></body>
			</method>
			
			<method name="setPref">
				<parameter name="name" />
				<parameter name="value" />
				<body><![CDATA[
					this.parameters[name] = value;
				]]></body>
			</method>
			
			<method name="onInitialize">
				<body><![CDATA[
					this.autoResize(800, 600);
					//toolbarActionView : button, menu
					var prefValue = this.getPref('toolbarActionView' , 'button');
					this.getElementByAnonId("toolbar-action-view").value = prefValue;
					
					//documentEditorDefaultPanel : resume, properties, localization, history
					prefValue = this.getPref('documentEditorDefaultPanel' , 'resume');
					this.getElementByAnonId("documenteditor-defaultpanel").value = prefValue;
					
					//documenteditorHelp : open, hidden, visible
					prefValue = this.getPref('documenteditorHelp' , 'open');
					this.getElementByAnonId('documenteditor-help').value = prefValue;
					
					prefValue = this.getPref('useLeftTreeDblClick' , 'false');
					this.getElementByAnonId('use-left-tree-dbl-click').value = prefValue;
					
					if ('showMessage' in this.getElementByAnonId("message-box"))
					{
						this.getElementByAnonId("message-box").showMessage("help", "${trans:m.uixul.bo.dialog.user-preferences-description,ucf,js}");
					}
				]]></body>
			</method>

			<method name="onOk">
				<body><![CDATA[
					var prefValue = this.getElementByAnonId('toolbar-action-view').value;
					this.setPref('toolbarActionView', prefValue);
					
					prefValue = this.getElementByAnonId('documenteditor-defaultpanel').value;
					this.setPref('documentEditorDefaultPanel', prefValue);
					
					prefValue = this.getElementByAnonId('documenteditor-help').value;
					this.setPref('documenteditorHelp', prefValue);
					
					prefValue = this.getElementByAnonId('use-left-tree-dbl-click').value;
					this.setPref('useLeftTreeDblClick', prefValue);
					
					this.controller.saveUserPreferences();
					this.controller.closeModalDialog(true);	
				]]></body>
			</method>

			<method name="setErrorMessage">
				<parameter name="message" />
				<body><![CDATA[
					this.getElementByAnonId("message-box").showMessage("error", message);
				]]></body>
			</method>

		</implementation>
		<handlers>
		</handlers>
		<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xbl="http://www.mozilla.org/xbl">
			<vbox flex="1">
				<hbox class="dialog-header">
					<label value="${trans:m.uixul.bo.dialog.user-ressources,ucf,attr}" class="dialog-title" />
					<spacer flex="1" />
					<vbox pack="center">
						<toolbarbutton height="16" width="16" image="{IconsBase}/small/delete.png" oncommand="onCancel();" 
						tooltiptexts="${trans:m.uixul.bo.dialog.cancel,ucf,attr}" />
					</vbox>
				</hbox>
				<cmessageinfo anonid="message-box" />
				<hbox style="border:1px solid black" flex="2">
				<grid>
					<columns>
						<column /><column flex="1"/>
					</columns>
					<rows>
						<row>
							<label value="${trans:m.uixul.bo.dialog.user-pref-toolbaractionview,ucf,attr}" />
							<menulist anonid="toolbar-action-view">
							  <menupopup>
								<menuitem label="${trans:m.uixul.bo.dialog.user-pref-toolbaractionview-button,ucf,attr}" value="button" />
								<menuitem label="${trans:m.uixul.bo.dialog.user-pref-toolbaractionview-menu,ucf,attr}" value="menu" />
							  </menupopup>
							</menulist>
						</row>
						<row>
							<label value="${trans:m.uixul.bo.dialog.user-pref-documenteditordefaultpanel,ucf,attr}" />
							<menulist anonid="documenteditor-defaultpanel">
							  <menupopup>
								<menuitem label="${trans:m.uixul.bo.doceditor.tab.resume,ucf,attr}" value="resume" />
								<menuitem label="${trans:m.uixul.bo.doceditor.tab.properties,ucf,attr}" value="properties" />
								<menuitem label="${trans:m.uixul.bo.doceditor.tab.localization,ucf,attr}" value="localization" />
								<menuitem label="${trans:m.uixul.bo.doceditor.tab.history,ucf,attr}" value="history" />
							  </menupopup>
							</menulist>
						</row>
						<row>
							<label value="${trans:m.uixul.bo.dialog.user-pref-documenteditorhelp,ucf,attr}" />						
							<menulist anonid="documenteditor-help">
							  <menupopup>
								<menuitem label="${trans:m.uixul.bo.dialog.user-pref-documenteditorhelp-open,ucf,attr}" value="open" />
								<menuitem label="${trans:m.uixul.bo.dialog.user-pref-documenteditorhelp-hidden,ucf,attr}" value="hidden" />
								<menuitem label="${trans:m.uixul.bo.dialog.user-pref-documenteditorhelp-visible,ucf,attr}" value="visible" />
							  </menupopup>
							</menulist>
						</row>					 
						<row>
							<label value="${trans:m.uixul.bo.dialog.user-pref-uselefttreedblclick,ucf,attr}" />						
							<radiogroup anonid="use-left-tree-dbl-click" orient="horizontal">
								<radio label="${trans:f.boolean.false,ucf,attr}" value="false" selected="true"/>
								<radio label="${trans:f.boolean.true,ucf,attr}" value="true" />
							</radiogroup>
						</row>						
					</rows>
				</grid>
				</hbox>
				<hbox>
					<button image="{IconsBase}/small/check.png" oncommand="onOk();" label="${trans:m.uixul.bo.dialog.apply,ucf,attr}" />
				</hbox>
			</vbox>
		</xbl:content>
	</binding>
</bindings>