<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" 
	xmlns:xbl="http://www.mozilla.org/xbl"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	
	<binding id="cModule">
		<implementation>
			<field name="mConfig">null</field>
			<field name="mRootFolderId">null</field>
			<field name="mNavigationTree">null</field>
			<field name="mDocumentlist">null</field>
			<field name="mMainViewDeck">null</field>
			<field name="mMainViewStackPanel">[]</field>
			<field name="mDocumentsEditor">null</field>
			<field name="mRessourcesSelector">null</field>
			
			<property name="name" readonly="true">
				<getter><![CDATA[
					return this.getAttribute('name');
				]]></getter>
			</property>
			
			<constructor><![CDATA[
				//wCore.debug('cModule.constructor:' + this.name);
				this.mMainViewDeck = document.getAnonymousElementByAttribute(this, "anonid", "mainViewDeck");
				this.mDocumentsEditor = {};
				this.preLoadEditor();
				
				// Handle document locate.
				if (this.getAttribute('onload-locate-document'))
				{
					this.locateDocument(this.getAttribute('onload-locate-document'));
				}
			]]></constructor>
			
			<method name="preLoadEditor">
				<body><![CDATA[
					//wCore.debug('preLoadEditor');
					var name = this.name;
					for (var deckIdx = 0; deckIdx < this.mMainViewDeck.childNodes.length; deckIdx++)
					{
						var element = this.mMainViewDeck.childNodes[deckIdx];
						if (element.localName === 'cdocumenteditor')
						{
							element.setAttribute('deckIndex', deckIdx);
							this.mDocumentsEditor[element.getAttribute('documentname')] = element;
							element.setAttribute('modulename', name);
							element.id = element.getAttribute('anonid');
						}
					}				
				]]></body>
			</method>
			
			<method name="selectDeckPanel">
				<parameter name="panel"/>				
				<body><![CDATA[
					//wCore.debug('selectDeckPanel : ' + panel.localName + '.' + panel.getAttribute('documentname'));
					this.mMainViewDeck.selectedPanel = panel;
					if (panel.localName == 'cdocumenteditor')
					{
						this.setAttribute('documenteditor', panel.getAttribute('documentname'));
					}
					else
					{
						this.removeAttribute('documenteditor');
					}			
				]]></body>
			</method>
			
			<method name="isStackedPanel">
				<parameter name="panel"/>				
				<body><![CDATA[
					for (var i = 0; i < this.mMainViewStackPanel.length; i++)
					{
						if (this.mMainViewStackPanel[i] === panel)
						{
							return true;
						}
					}	
					return false;			
				]]></body>
			</method>	
			
			<method name="openMainView">
				<parameter name="element"/>				
				<body><![CDATA[
					//wCore.debug('openMainView');
					while (element.parentNode != null)
					{
						if (element.parentNode === this.mMainViewDeck)
						{
							var current = this.mMainViewDeck.selectedPanel;
							if (current !== element)
							{
								if (this.hasAttribute('fromURI'))
								{
									//wCore.debug('backMainView prepare backToURI: ' + this.getAttribute('fromURI'));
									element.setAttribute('backToURI', this.getAttribute('fromURI'));
									this.removeAttribute('fromURI');
								}
								
								if (!this.isStackedPanel(current))
								{
									//wCore.debug('backMainView push: ' + current.localName + ' ' +  current.getAttribute('documentname'));
									this.mMainViewStackPanel.push(current);
									//wCore.debug('backMainView new stack length: ' + this.mMainViewStackPanel.length);
								}
								this.selectDeckPanel(element);
							}
							else
							{
								this.refreshMainViewDeck();
							}
							return;
						}
						element = element.parentNode;
					}
					wCore.warn('openMainView : panel not found');				
				]]></body>
			</method>
						
			<method name="backMainView">
				<parameter name="from"/>					
				<body><![CDATA[
					wCore.debug('backMainView : ' + this.mMainViewStackPanel.length);
					var element = null;
					if (this.mMainViewStackPanel.length > 0)
					{
						element = this.mMainViewStackPanel.pop();
						//wCore.debug('backMainView remove from stack : ' + element.localName + ' ' + element.getAttribute('documentname'));
					}
					else
					{
						element = this.mMainViewDeck.firstChild;
					}
					this.selectDeckPanel(element);
					this.refreshMainViewDeck();
										
					if (from && from.hasAttribute('backToURI'))
					{
						var backToURI = from.getAttribute('backToURI');
						from.removeAttribute('backToURI');
						//wCore.debug('backMainView backToURI: ' + backToURI);
						openActionUri(backToURI);
						return;					
					}		
				]]></body>
			</method>	
						
			<method name="clearMainViewStack">				
				<body><![CDATA[
					//wCore.debug('clearMainViewStack');
					if (this.mMainViewStackPanel.length > 0)
					{
						this.mMainViewStackPanel = [];				
						this.mMainViewDeck.selectedIndex = 0;
						this.removeAttribute('documenteditor')
					}			
				]]></body>
			</method>					
						
			<method name="refreshMainViewDeck">
				<body><![CDATA[
					wCore.debug('cModule_' + this.name + '.refreshMainDeck');
					if (this.hasAttribute('documenteditor'))
					{
						var editor = this.getDocumentEditorByDocumentName(this.getAttribute('documenteditor'));
						if (editor && 'refresh' in editor) {editor.refresh();}
					}
					else
					{
						this.refresh();
					}
				]]></body>
			</method>	
								
			<method name="getController">
				<body><![CDATA[
					return getController();
				]]></body>
			</method>
			
			<method name="getElementByAnonId">
				<parameter name="id"/>
				<body><![CDATA[
					return document.getAnonymousElementByAttribute(this, "anonid", id);
				]]></body>
			</method>
			
			<!-- Refresh the current mainList and leftTree -->
			<method name="refreshAll">
				<body><![CDATA[
					   //wCore.debug('cModule_' + this.name + '.refreshAll');
					   this.refresh();
					   if (this.mRessourcesSelector) {this.mRessourcesSelector.refresh();}
				]]></body>
			</method>
			
			<method name="refresh">
				<body><![CDATA[
					//wCore.debug('cModule_' + this.name + '.refresh');
					if (this.mNavigationTree) {this.mNavigationTree.refresh();}	
				]]></body>
			</method>
			
			<method name="onContextLangChanged">
				<body><![CDATA[
					try 
					{
						var lang = this.getAttribute('contextlang');			
						//wCore.debug('cModule_' + this.name + '.onContextLangChanged(' + lang + ')');
						this.refresh();
					}
					catch (e)
					{
						wCore.error("wBaseModule.onContextLangChanged", [], e);
					}					
				]]></body>				
			</method>
			
			<method name="getContextLang">
				<parameter name="tree" />
				<body><![CDATA[
					return Context.W_LANG;
				]]></body>
			</method>
			
			<method name="createDocument">
				<parameter name="listWidget" />
				<parameter name="module" />
				<parameter name="doctype" />
				<body><![CDATA[
					var items = listWidget.getSelectedItems();
					if (items.length == 1)
					{
						var item = items[0];
						if (this.createDocumentEditor("modules_" + module + "_" + doctype, item.id)) {return;}
					}
					return null;
				]]></body>
			</method>

			<method name="_checkConfig">
				<body><![CDATA[
					 //wCore.debug('cModule_' + this.name + '._checkConfig');
				]]></body>
			</method>

			<method name="onModuleInit">
				<body><![CDATA[
					//wCore.debug('cModule_' + this.name + '.onModuleInit');
				]]></body>
			</method>
			
			<method name="onSwitchFrom">
				<parameter name="fromModule" />
				<body><![CDATA[
					//wCore.debug('cModule_' + this.name + '.onSwitchFrom');
				]]></body>
			</method>

			<method name="getModuleHeader">
				<body><![CDATA[
					return document.getElementById('module_header');
				]]></body>
			</method>
			
			<method name="setNavigationTree">
				<parameter name="navigationTree" />
				<body><![CDATA[
					this.mNavigationTree = navigationTree;
					if (navigationTree)
					{
						navigationTree.loadNode(this.getRootFolderId(), 'modules_generic/rootfolder');
					}
				]]></body>
			</method>
			
			<method name="setDocumentlist">
				<parameter name="documentlist" />
				<body><![CDATA[
					this.mDocumentlist = documentlist;
				]]></body>
			</method>	
			
			<method name="setRessourcesSelector">
				<parameter name="ressourcesSelector" />
				<body><![CDATA[
					this.mRessourcesSelector = ressourcesSelector;
				]]></body>
			</method>	
			
			<method name="getRessourcesSelector">
				<body><![CDATA[
					return this.mRessourcesSelector;
				]]></body>
			</method>			

			<method name="openRessourcesSelector">
				<parameter name="moduleName" />
				<body><![CDATA[
					if (this.mRessourcesSelector)
					{
						this.mRessourcesSelector.removeAttribute("collapsed");
						if (moduleName)
						{
							this.mRessourcesSelector.selectTree(moduleName);
						}
					}
				]]></body>
			</method>
			
			<!-- New DocumentEditor functionnalities -->
			
			<method name="addObserves">
				<parameter name="element" />
				<parameter name="attribute" />
				<body><![CDATA[
					//wCore.debug(this.name + '.addObserves:' + attribute);
					var observes = document.createElement("observes");
					observes.setAttribute("element", element);
					observes.setAttribute("attribute", attribute);
					var me = this;
					var attrName = attribute;
					observes.addEventListener("broadcast", function (event) {me.onAttributeChange(attrName);}, false); 
					this.appendChild(observes);
				]]></body>
			</method>

			<method name="onAttributeChange">
				<parameter name="attrName" />
				<body><![CDATA[
					//wCore.debug(this.name + ".onAttributeChange: " + attrName + ":" + this.getAttribute(attrName));
					if (attrName === 'contextlang') {this.onContextLangChanged();}
					if (attrName === 'execute' && this.hasAttribute('execute')) 
					{
						var uriParts = this.getAttribute(attrName).split(',');
						if (uriParts[0] === this.name)
						{
							//wCore.debug(wCore.dump(uriParts));
							switch (uriParts[1])
							{
								case 'openDocument':
									var defaultPanel = uriParts.length >= 4 ? uriParts[4] : null;
									var widget = {type: uriParts[2], id: uriParts[3]};
									this.openDocumentEditor(widget, defaultPanel);
									break;
								case 'locateDocument':								
									this.locateDocument(uriParts[3]);	
									break;
								default:
									if (uriParts[1] in this)
									{
										this[uriParts[1]](uriParts);
									}
									break;
							}
							actionUriOpened();
						}
						else
						{
							wCore.warn(this.name + ".onAttributeChange: Ignored");
						}
					}
				]]></body>
			</method>
			
			<method name="locateDocument">	
				<parameter name="id" />
				<body><![CDATA[
					//wCore.debug(this.name + ".locateDocument: " + id);
					var result = wCore.executeJSON(this.name, "GetPathToId", {cmpref:id, withRootFolder:true}, null, true);
					if (result.status === 'OK')
					{
						this.clearMainViewStack();
						var path = result.contents;
						this.setAttribute('locateDocument', path.pop()); 
						var me = this;
						var predicate = function () {return (me.mNavigationTree && ('openPath' in me.mNavigationTree))}
						var func = function(context) {context.mNavigationTree.openPath(path)}
						wCore.executeOnPredicate(predicate, func, me);
					}
					else
					{
						this.showErrorMessage(result.contents.errorMessage, result.contents.errorStackTrace);
					}				
				]]></body>
			</method>											
			
			<method name="getRootFolderId">
				<parameter name="editor" />
				<body><![CDATA[
					return this.mRootFolderId;
				]]></body>
			</method>				
						
			<method name="getDocumentEditor">
				<parameter name="type" />
				<body><![CDATA[
					var documentName = type.split('_').pop();
					return this.getDocumentEditorByDocumentName(documentName);
				]]></body>
			</method>
			
			<method name="getDocumentEditorByDocumentName">
				<parameter name="documentName" />
				<body><![CDATA[
					//wCore.debug("getDocumentEditorByDocumentName: " + documentName);
					return this.mDocumentsEditor[documentName];
				]]></body>
			</method>			
			
			<method name="onCloseDocumentEditor">
				<parameter name="editor" />
				<body><![CDATA[
					//wCore.debug("onCloseDocumentEditor");
					this.backMainView(editor);
				]]></body>
			</method>
			
			<method name="closeCurrentEditor">
				<body><![CDATA[
					//wCore.debug("closeCurrentEditor");
					var documentName = this.getAttribute('documenteditor');
					if (documentName)
					{
						var editor = this.getDocumentEditorByDocumentName(documentName);					
						if (editor && 'close' in editor) {editor.close();}
					}
				]]></body>
			</method>					
			
			<method name="openDocumentEditor">
				<parameter name="item" />
				<parameter name="defaultPanel" />
				<body><![CDATA[
					var id = item.id;
					wCore.debug('openDocumentEditor : ' + id);
					
					this.getModuleHeader().setEditedItem(item);
					var type = item.type;
					var editor = this.getDocumentEditor(type);
					if (editor)
					{
						if (!defaultPanel) 
						{
							defaultPanel = this.getController().getUserPreference('documentEditorDefaultPanel') || "resume";
						}					
						this.openMainView(editor);
						if ('open' in editor) 
						{
							editor.open(id, defaultPanel);
						}
						else
						{
							editor.setAttribute("openid", id);
							editor.setAttribute("defaultpanel", defaultPanel);
						}
						return editor;
					}
					else
					{
						wCore.warn("Document editor not found for type : " + type);
					}
					return null;
				]]></body>
			</method>
					
			<method name="createDocumentEditor">
				<parameter name="type" />
				<parameter name="parentid" />
				<body><![CDATA[
					//wCore.debug("createDocumentEditor : " + type + ", " + parentid);
					this.getModuleHeader().setEditedItem({id:-1, label:"${trans:m.uixul.bo.general.new-document-title,ucf,js}"});
					var editor = this.getDocumentEditor(type);
					if (editor)
					{
						this.openMainView(editor);
						if ('create' in editor)
						{
							editor.create(parentid);
						}
						else
						{
							editor.setAttribute("createparentid", parentid);
							editor.setAttribute("defaultpanel", 'create');
						}
						return editor;
					}
					return null;
				]]></body>
			</method>	
						
			<method name="getConfigModelByName">
				<parameter name="name" />						
				<body><![CDATA[
					return this.mConfig.models[name];			
				]]></body>
			</method>			
			
			<method name="getChildrenModelName">
				<parameter name="modelName" />
				<parameter name="containerOnly" />								
				<body><![CDATA[
					if (!modelName) {modelName = 'modules_generic/rootfolder';}
					containerOnly = (containerOnly == true);
					var model = this.getConfigModelByName(modelName);
					var result = {};				
					if (!model || (containerOnly && !model.cc)) return result;
					for (var subname in model.children)
					{
						if (!containerOnly || model.children[subname].c)
						{
							result[subname] = model.children[subname].from;
						}
					}
					return result;
				]]></body>
			</method>
			
			<method name="getColumnsForParentModelName">
				<parameter name="parentModelname" />								
				<body><![CDATA[
					var model = this.getConfigModelByName(parentModelname);
					if (!model || !model.columns) return null;
					return model.columns;
				]]></body>
			</method>
			
			<method name="getStyleForParentModelName">
				<parameter name="parentModelname" />								
				<body><![CDATA[
					var model = this.getConfigModelByName(parentModelname);
					if (!model || !model.styles) return null;
					return model.styles.split(' ');
				]]></body>
			</method>
									
			<method name="getDropAction">
				<parameter name="parentModelName" />
				<parameter name="childModelName" />
				<body><![CDATA[
					var model = this.getConfigModelByName(parentModelName);
					if (!model || !model.drops || !model.drops[childModelName]) return null;
					return model.drops[childModelName].action;
				]]></body>
			</method>				

			<method name="getActionInfo">
				<parameter name="actionName" />
				<body><![CDATA[
					return (actionName in this.mConfig.actions) ? this.mConfig.actions[actionName] : null;
				]]></body>
			</method>		
			
			<method name="getActionsForModelName">
				<parameter name="modelName" />
				<body><![CDATA[
					var actions = this.mConfig.actions;
					var modelinfo = this.mConfig.models[modelName];
					var result = {};
					if (modelinfo)
					{
						for (var name in modelinfo.contextactions)
						{
							if (name in actions)
							{
								var action = actions[name]; 
								if (modelinfo.contextactions[name].actions && !action.actions)
								{
									action.actions = {};
									for (var subname in modelinfo.contextactions[name].actions)
									{
										action.actions[subname] = actions[subname]
									}
								}
								result[name] = action;
							}
						}
					}
					for (var globalAction in actions)
					{
						if (actions[globalAction].global)
						{
							result[globalAction] = actions[globalAction];
						}
					}
					
					return result;		
				]]></body>
			</method>
			
			<method name="getActionsForModelNames">
				<parameter name="modelNames" />
				<body><![CDATA[	
					var actions = this.mConfig.actions;
					var models = this.mConfig.models;

					var modelinfo = models[modelNames[0]];
					var multi = (modelNames.length > 1);
					var result = {};
					if (modelinfo)
					{
						var name; var ko; var y; var action;
						for (name in modelinfo.contextactions)
						{
							if (multi)
							{
								ko = false;
								for (y = 1; y < modelNames.length; y++)
								{
									if (!models[modelNames[y]].contextactions[name])
									{
										ko = true;
										break;
									}
								}
								if (ko) {continue;}
							}
							if (name in actions)
							{
								action = actions[name]; 
								if (!action.single && !modelinfo.contextactions[name].actions)
								{
									result[name] = action;
								}
							}
						}
					}
					for (var globalAction in actions)
					{
						if (actions[globalAction].global)
						{
							result[globalAction] = actions[globalAction];
						}
					}
					return result;
				]]></body>
			</method>
					
			<method name="getActionsForToolbar">
				<parameter name="modelName" />
				<body><![CDATA[
					var actions = this.mConfig.actions;
					var toolbar = this.mConfig.toolbar;
					var result = {};
					for (var name in toolbar)
					{
						var action = actions[name]; 
						result[name] = action;
					}
					return result;		
				]]></body>
			</method>
			
			<method name="getGlobalActions">
				<body><![CDATA[
					var result = {};
					var actions = this.mConfig.actions;
					for (var name in actions)
					{
						var action = actions[name]; 
						if (action.global)
						{
							result[name] = action;
						}
					}
					return result;	
				]]></body>
			</method>			
			
			<method name="getInsertActionsForToolbar">
				<parameter name="modelName" />
				<body><![CDATA[
					var result = {};
					var ok = false;
					var actions = this.mConfig.actions;
					for (var name in actions)
					{
						var action = actions[name]; 
						if (action.permission && action.permission.indexOf('Insert_') === 0)
						{
							result[name] = action;
							ok = true;
						}
					}
					return (ok) ? result : null;		
				]]></body>
			</method>			
			
			<method name="checkActiveCommand">
				<parameter name="cmdName" />
				<parameter name="itemData" />
				<body><![CDATA[
					var action = this.mConfig.actions[cmdName];
					var permissions = itemData.compiledPermissions; 
					if (!action || !permissions) {return false;}
					var perm = action.permission;
					if (!perm || permissions.allpermissions || permissions[perm])
					{
						if (cmdName + 'IsActive' in this)
						{
							return this[cmdName + 'IsActive'](itemData);
						}
						return true;
					}					
					return false;	
				]]></body>
			</method>				
			
			<method name="executeContextCommand">
				<parameter name="cmdName" />
				<parameter name="widget" />
				<body><![CDATA[
					if (cmdName in this)
					{
						//wCore.debug("Execute Context Command ["+cmdName+"] in module ["+this.name+"]");
						try
						{
							this[cmdName](widget);
						} 
						catch (e)
						{
							wCore.error("cModule.executeContextCommand", [cmdName], e);
						}
					}
					else
					{
						wCore.warn("Command ["+cmdName+"] not found in module ["+this.name+"]");
					}				
				]]></body>
			</method>

			<method name="executeDropCommand">
				<parameter name="dropInfos" />
				<parameter name="widget" />			
				<body><![CDATA[
					//dropInfos = {action:'', cmpref:0, parentid:0, beforeid:0, afterid:0};
					var cmdName = dropInfos.action;
					if (cmdName in this)
					{
						//wCore.debug("Execute Drop Command ["+cmdName+"] in module ["+this.name+"]");
						try
						{
							this[cmdName](widget, dropInfos);
						} 
						catch (e)
						{
							wCore.error("cModule.executeDropCommand", [dropInfos], e);
						}
					}
					else
					{
						wCore.warn("DropCommand ["+cmdName+"] not found in module ["+this.name+"]");
					}				
				]]></body>
			</method>
			
			<!-- GENERIC METHODS -->
			
			<method name="executeJSON">
				<parameter name="actionName" />
				<parameter name="parameters" />
				<body><![CDATA[
					var me = this;
					var callBackName = 'on' + actionName;
					var callBack = function(result) {me.onExecuteJSON(result, callBackName);}
					wCore.executeJSON(this.name, actionName, parameters, callBack, true);
				]]></body>
			</method>			

			<method name="onExecuteJSON">
				<parameter name="result" />
				<parameter name="callBackName" />
				<body><![CDATA[
					if (result.status === 'OK')
					{
						if (callBackName+'Success' in this)
						{
							this[callBackName+'Success'](result);
						}
						else
						{
							this.refresh();
						}
					}
					else
					{
						if (callBackName+'Error' in this)
						{
							this[callBackName+'Error'](result);
						}
						else
						{
							this.showErrorMessage(result.contents.errorMessage, result.contents.errorStackTrace);
						}
					}		
				]]></body>
			</method>
						
			<method name="showErrorMessage">
				<parameter name="message" />
				<parameter name="stackTrace" />
				<body><![CDATA[
					this.getController().openErrorPanel(message, stackTrace);
				]]></body>
			</method>
			
			<method name="edit">
				<parameter name="listWidget" />
				<body><![CDATA[
					var items = listWidget.getSelectedItems();
					if (items.length == 1)
					{
						if (this.openDocumentEditor(items[0])) {return;}
					}
				]]></body>
			</method>
			
			<method name="duplicate">
				<parameter name="listWidget" />
				<body><![CDATA[
					var ids = listWidget.getSelectedIds();
					var parentref = listWidget.getSelectedParentItem().id;
					this.executeJSON("Duplicate", {cmpref: ids, lang: this.getContextLang(), parentref: parentref});
				]]></body>
			</method>
			
			<method name="startWorkflow">
				<parameter name="itemData"/>
				<body><![CDATA[
					var parameters = {id: itemData.id, label: itemData.label, lang: this.getContextLang()};
					var controller = this.getController();
					controller.openModalDialog(this, "startworkflow", parameters); 
				]]></body>
			</method>
						
			<method name="activate">
				<parameter name="listWidget"/>
				<body><![CDATA[
					var items = listWidget.getSelectedItems();
					if ('hasWorkflow' in items[0])
					{
						this.startWorkflow(items[0]);
					}
					else
					{
						var lang = this.getContextLang();
						this.activateCount = items.length;
						
						for (var i = 0; i < items.length; i++)
						{
							this.executeJSON("ActivateJSON", {cmpref: items[i].id, lang: lang});
						}
					}
				]]></body>
			</method>	  
			<method name="activateIsActive">
				<parameter name="itemData"/>
				<body><![CDATA[
					return itemData.langAvailable && ((itemData.status === 'DRAFT') || (itemData.publicationStatus === 'correction'));
				]]></body>
			</method>
			<method name="onActivateJSONSuccess">
				<parameter name="result"/>
				<body><![CDATA[
					this.activateCount--;
					if (this.activateCount <= 0)
					{
						this.refresh();
					}
				]]></body>
			</method>			
			<method name="onActivateJSONError">
				<parameter name="result"/>
				<body><![CDATA[
					this.onActivateJSONSuccess(result);
				]]></body>
			</method>				
			
			<method name="deactivated">
				<parameter name="listWidget"/>
				<body><![CDATA[
					var ids =  listWidget.getSelectedIds();
					var lang = this.getContextLang();
					this.deactivatedCount = ids.length;
					for (var i = 0; i < ids.length; i++)
					{
						this.executeJSON("DeactivatedJSON", {cmpref: ids[i], lang: lang});
					}
				]]></body>
			</method>
			<method name="deactivatedIsActive">
				<parameter name="itemData"/>
				<body><![CDATA[
					return (itemData.status === 'ACTIVE') || (itemData.status === 'PUBLISHED');
				]]></body>
			</method>
			<method name="onDeactivatedJSONSuccess">
				<parameter name="result"/>
				<body><![CDATA[
					this.deactivatedCount--;
					if (this.deactivatedCount <= 0)
					{
						this.refresh();
					}
				]]></body>
			</method>			
			<method name="onDeactivatedJSONError">
				<parameter name="result"/>
				<body><![CDATA[
					this.onDeactivatedJSONSuccess(result);
				]]></body>
			</method>	
				

			<method name="reactivate">
				<parameter name="listWidget"/>
				<body><![CDATA[
					var ids =  listWidget.getSelectedIds();
					var lang = this.getContextLang();
					this.reactivateCount = ids.length;
					for (var i = 0; i < ids.length; i++)
					{
						this.executeJSON("ReActivateJSON", {cmpref: ids[i], lang: lang});
					}
				]]></body>
			</method>
			<method name="reactivateIsActive">
				<parameter name="itemData"/>
				<body><![CDATA[
					return (itemData.status === 'DEACTIVATED');
				]]></body>
			</method>			
			<method name="onReActivateJSONSuccess">
				<parameter name="result"/>
				<body><![CDATA[
					this.reactivateCount--;
					if (this.reactivateCount <= 0)
					{
						this.refresh();
					}
				]]></body>
			</method>			
			<method name="onReActivateJSONError">
				<parameter name="result"/>
				<body><![CDATA[
					this.onReActivateJSONSuccess(result);
				]]></body>
			</method>	
			
			<method name="openFolder">
				<parameter name="listWidget" />
				<body><![CDATA[
					var itemData = listWidget.getSelectedItems()[0];
					if (this.mNavigationTree && 'openContainer' in this.mNavigationTree)
					{
						this.mNavigationTree.openContainer(itemData.id);
					}
				]]></body>
			</method>
			
			<method name="openTreeNodeOrder">
				<parameter name="listWidget" />
				<body><![CDATA[
					this.openOrderChildrenPanel(listWidget, null, null);
				]]></body>
			</method>				  				  
			
			<method name="delete">
				<parameter name="listWidget" />
				<body><![CDATA[
					var itemsData = listWidget.getSelectedItems();
					var labels = [];
					var ids = [ ], parentIds = [ ];
					var lang = this.getContextLang();

					for (var i=0 ; i < itemsData.length ; i++)
					{	
						var itemData = itemsData[i];
						ids.push(itemData.id);
						labels.push(itemData.label);
					}

					var label;
					if (labels.length > 10)
					{
						label = "${trans:m.uixul.bo.general.confirmdeletemessage,ucf,js} (" + labels.length + " ${trans:m.uixul.bo.general.items,ucf,js})";
					}
					else
					{
						label = "${trans:m.uixul.bo.general.confirmdeletemessagelist,ucf,js}\n - " + labels.join("\n - ");
					}

					if (confirm(label))
					{
						this.deleteCount = ids.length;
						for (var i = 0; i < ids.length; i++)
						{
							this.executeJSON("DeleteJSON", {cmpref: ids[i], lang: lang});
						}
					}
				]]></body>
			</method>
			<method name="deleteIsActive">
				<parameter name="itemData"/>
				<body><![CDATA[
					return (itemData.langAvailable && itemData.publicationStatus !== 'workflow');
				]]></body>
			</method>				
			<method name="onDeleteJSONSuccess">
				<parameter name="result"/>
				<body><![CDATA[
					this.deleteCount--;
					if (this.deleteCount <= 0)
					{
						this.refresh();
					}
				]]></body>
			</method>			
			<method name="onDeleteJSONError">
				<parameter name="result"/>
				<body><![CDATA[
					this.onDeleteJSONSuccess(result);
					this.showErrorMessage(result.contents.errorMessage, result.contents.errorStackTrace);
				]]></body>
			</method>
						
			<method name="purgeDocument">
				<parameter name="listWidget" />
				<body><![CDATA[
					var itemsData = listWidget.getSelectedItems();
					var id = itemsData[0].id;
					var lang = this.getContextLang();
					var confirmLabel = "${trans:m.uixul.bo.general.confirmpurgemessage,ucf,js}".replace("{label}", itemsData[0].label);
					if (confirm(confirmLabel))
					{
						this.executeJSON("PurgeDocument", {cmpref: id, lang: lang});
					}
				]]></body>
			</method>					
			<method name="onPurgeDocumentSuccess">
				<parameter name="result"/>
				<body><![CDATA[
					if (this.hasAttribute('documenteditor'))
					{
						this.backMainView();
					}
					else
					{
						this.refresh();
					}
				]]></body>
			</method>			
			<method name="onPurgeDocumentError">
				<parameter name="result"/>
				<body><![CDATA[
					if (this.hasAttribute('documenteditor'))
					{
						var editor = this.getDocumentEditorByDocumentName(this.getAttribute('documenteditor'));
						if (editor) 
						{
							var panel = editor.getCurrentBindingPanel();
							panel.showErrorMessage(result.contents.errorMessage);
							return
						}
					}
					this.showErrorMessage(result.contents.errorMessage, result.contents.errorStackTrace);
				]]></body>
			</method>

			<method name="move">
				<parameter name="listWidget"/>
				<parameter name="dropInfos"/>
				<body><![CDATA[
					// dropInfos = {action:'', cmpref:0, parentid:0, beforeid:0, afterid:0};
					var params = {cmpref: dropInfos.cmpref, destref: dropInfos.parentid, lang: this.getContextLang()};
					if (dropInfos.beforeid) 
					{
						params.beforeid = dropInfos.beforeid;
					}
					else if (dropInfos.afterid) 
					{
						params.afterid = dropInfos.afterid;
					}				
					this.executeJSON("Move", params);
				]]></body>
			</method>		
			<method name="moveIsActive">
				<parameter name="itemData"/>
				<body><![CDATA[
					return (itemData.langAvailable);
				]]></body>
			</method>
			
			<method name="remove">
				<parameter name="listWidget" />
				<body><![CDATA[
					var ids = listWidget.getSelectedIds();
					if (ids.length > 0)
					{
						var parentid = listWidget.getSelectedParentItem().id;
						this.executeJSON("Remove", {cmpref: ids, lang: this.getContextLang(), parentref: parentid });
					}
				]]></body>
			</method>
			
			<method name="openTags">
				<parameter name="listWidget" />
				<body><![CDATA[
					var id = listWidget.getSelectedIds()[0]
					this.getController().openModalDialog(this, "manageTags", id);
					
					var tagpanel = document.getAnonymousElementByAttribute(this, "anonid", "tagsPanel");
					if (tagpanel)
					{
						tagpanel.setAttribute('selectedids', listWidget.getSelectedIds()[0]);
						tagpanel.show();
						tagpanel.handleBroadcast();
					}
				]]></body>
			</method>
			
			<method name="openOrderChildrenPanel">
				<parameter name="listWidget" />
				<parameter name="relationName" />
				<parameter name="componentTypes" />
				<parameter name="icons" />
				<body><![CDATA[
					var params = {id: listWidget.getSelectedIds()[0], 
						relationName: relationName,
						componentTypes: componentTypes,
						icons: icons};
					this.getController().openModalDialog(this, "orderChildren", params);
				]]></body>
			</method>
			
			<method name="openUrlRewritingPanel">
				<parameter name="listWidget"/>
				<body><![CDATA[
					var items = listWidget.getSelectedItems();
					if (items.length == 1)
					{
						this.openDocumentEditor(items[0], 'redirect');
					}
				]]></body>
			</method>
			
			<method name="addTopic">
   				<parameter name="listWidget"/>
				<body><![CDATA[
					var ids = listWidget.getSelectedIds();
					var uri = [this.name, 'openDocument', 'modules_generic_rootfolder', ids[0], 'properties'].join(',');
					openActionUri(uri);
				]]></body>
  			</method>
  			
  			<method name="openTopicOrder">
				<parameter name="listWidget" />
				<body><![CDATA[
					this.openOrderChildrenPanel(listWidget, "topics", null);
				]]></body>
			</method>
			
			<!-- DEPRECATED METHODS FOR ACTIONS COMPATIBILITY -->
			<method name="execute">
				<parameter name="actionLabel" />
				<parameter name="actionName" />
				<!-- Parameters to transmit to the action : Associative array (Object)-->
				<parameter name="parameters" />
				<parameter name="sender" />
				<body><![CDATA[
					if (!sender) sender = this;
					this.getController().execute(actionLabel, sender, this.name, actionName, parameters);
				]]></body>
			</method>
			
			<method name="onActionSuccess">
				<parameter name="e4x" />
				<body><![CDATA[
					//wCore.debug('onActionSuccess');
					this.refresh();
				]]></body>
			</method>

			<method name="onActionError">
				<parameter name="e4x" />
				<body><![CDATA[
					//wCore.debug('onActionError');
					this.showErrorMessage(e4x.message.toString(), '');
				]]></body>
			</method>
		</implementation>

		<handlers>
			<handler event="documenteditorclosed"><![CDATA[
				this.onCloseDocumentEditor(event.originalTarget);
			]]></handler>
			
			<handler event="navigationchange"><![CDATA[
				this.getModuleHeader().setNavigationPath(event.originalTarget.getNavigationPath());
			]]></handler>
		</handlers>
	</binding>
</bindings>
