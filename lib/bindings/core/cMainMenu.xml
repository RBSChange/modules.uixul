<?xml version="1.0" encoding="UTF-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="cMainMenu">
		<resources>
			<stylesheet src="modules.uixul.cMainMenu" />
		</resources>
		<content>
			<xul:menubar flex="1">
				<xul:hbox class="container" flex="1" align="center">
					<xul:hbox flex="1" pack="start" class="logo-product">
						<xul:image anonid="logo-product" src="{HttpHost}/media/backoffice/logo_product.png" />
						<xul:vbox>
							<xul:spacer flex="1" />
							<xul:label class="phase" />
							<xul:label class="version-number" onclick="about()" />
						</xul:vbox>
					</xul:hbox>
					<xul:hbox flex="3" pack="center">
						<xul:hbox anonid="hot"></xul:hbox>
						<xul:toolbarbutton hidden="true" label="${trans:m.uixul.bo.modules.base-modules,ucf,attr}" 
							image="{IconsBase}/normal/modules.png" type="menu" class="mainMenu">
							<xul:menupopup anonid="base-modules"></xul:menupopup>
						</xul:toolbarbutton>
						<xul:toolbarbutton hidden="true" label="${trans:m.uixul.bo.modules.e-commerce,ucf,attr}" image="{IconsBase}/normal/ecommerce.png" type="menu" class="mainMenu">
							<xul:menupopup anonid="e-commerce"></xul:menupopup>
						</xul:toolbarbutton>
						<xul:toolbarbutton label="${trans:m.uixul.bo.modules.admin,ucf,attr}" image="{IconsBase}/normal/admin.png" type="menu" class="mainMenu">
							<xul:menupopup anonid="admin">
								<xul:menu onselect="setWorkingLang(this)" label="${trans:m.uixul.bo.general.set-working-language,ucf,attr}" image="{IconsBase}/small/change-password.png">
									<xul:menupopup anonid="lang-menu"></xul:menupopup>
								</xul:menu>
								<xul:menuitem class="menuitem-iconic" label="${trans:m.users.bo.general.changepassword,ucf,attr}" image="{IconsBase}/small/change-password.png"
									oncommand="changePassword()" />
								<xul:menuitem anonid="webconsole" hidden="true" class="menuitem-iconic" label="${trans:m.uixul.bo.actions.console,ucf,attr}" image="{IconsBase}/small/application-terminal.png"
									oncommand="document.getBindingParent(this).openWebConsole()" />
									
								<xul:menuitem class="menuitem-iconic" label="${trans:m.uixul.bo.actions.preferences,ucf,attr}" image="{IconsBase}/small/preferences.png"
									oncommand="document.getBindingParent(this).openPreferences()" />
								
								<xul:menuseparator anonid="admin-separator" hidden="true"/>
							</xul:menupopup>
						</xul:toolbarbutton>
					</xul:hbox>
					<xul:hbox flex="1" pack="end">
						<xul:vbox pack="center">
							<xul:toolbarbutton hidden="true" xbl:inherits="hidden=hide-reload-interface" id="reloadInterface" class="mainMenu" image="{IconsBase}/normal/reload.png" oncommand="clearCache()" 
							tooltiptext="${trans:m.uixul.bo.general.reloadinterface,ucf,attr,space}" />
						</xul:vbox>
						<xul:toolbarbutton id="helpbutton" class="mainMenu" type="menu" tooltiptext="${trans:m.generic.backoffice.showhelp,ucf,etc,attr}" image="{IconsBase}/normal/help.png">
							<xul:menupopup>
								<xul:menuitem oncommand="openWebsite(this)" label="${trans:m.uixul.bo.general.aboutchangerbslinktitle,ucf,attr}" 
								href="${trans:m.uixul.bo.general.aboutchangerbslink,attr}" />
								<xul:menuitem oncommand="about()" label="${trans:m.uixul.bo.general.aboutchange,ucf,attr}" />
							</xul:menupopup>
						</xul:toolbarbutton>
						<xul:toolbarbutton tooltiptext="${trans:m.users.bo.general.disconnect,ucf,etc,attr}" 
							tmplabel="${trans:m.users.bo.general.disconnectconfirm,ucf,attr}" id="disconnectbutton" 
							oncommand="disconnect()" class="mainMenu" image="{IconsBase}/normal/exit.png" />
					</xul:hbox>
				</xul:hbox>
			</xul:menubar>
		</content>
		<implementation>
			<constructor><![CDATA[
				this.setAttribute("hide-reload-interface", String(!Context.DEV_MODE));
				if (Context.DEV_MODE)
				{
					var logo = document.getAnonymousElementByAttribute(this, "anonid", "logo-product");
					logo.setAttribute('src', '{HttpHost}/media/backoffice/logo_product_dev.png');
				}
				var me = this;
				var callBack = function(result) {me.onGetMainMenu(result);};
				var parameters = {lang:Context.W_LANG, uilang:Context.W_UILANG};
				wCore.executeJSON("uixul", "GetMainMenu", parameters, callBack, true);
			]]></constructor>
			
			<method name="getController">
				<body><![CDATA[
					return getController();
				]]></body>
			</method>	
					
			<method name="onGetMainMenu">
				<parameter name="result" />
				<body><![CDATA[
					if (result.status === 'OK')
					{
						this.buildModuleMenu(result.contents.modules);
						this.buildLangsMenu(result.contents.langs);
						var container = document.getAnonymousElementByAttribute(this, "class", "container");
						container.setAttribute("class", "container " + result.contents.phase);
						var versionNode = document.getAnonymousElementByAttribute(this, "class", "version-number");
						versionNode.value = 'v' + result.contents.version;
						var phaseNode = document.getAnonymousElementByAttribute(this, "class", "phase");
						phaseNode.value = result.contents.phaseLabel;
					}
				]]></body>
			</method>
			
			<method name="buildModuleMenu">
				<parameter name="modulesObj" />
				<body><![CDATA[
						for(var i = 0; i < 	modulesObj.length; i++)
						{
							var moduleObj = modulesObj[i];
							if (!moduleObj.visible)
							{
								continue;
							}
							var container = document.getAnonymousElementByAttribute(this, "anonid", moduleObj.category);
							if (!container)
							{
								continue;
							}
							if (!this.getController().checkModuleAccess(moduleObj.name))
							{
								continue;
							}
							if (container.parentNode.hasAttribute("hidden"))
							{
								container.parentNode.removeAttribute("hidden");
							}
							var item = document.createElement(moduleObj.category == "hot" ? "toolbarbutton" : "menuitem");
							item.setAttribute("class", moduleObj.category == "hot" ? "mainMenu" : "menuitem-iconic");
							item.setAttribute("oncommand", "loadModule('" + moduleObj.name +  "')");
							item.setAttribute("label",  moduleObj.label);
							if (moduleObj.category == 'hot')
							{
								item.setAttribute("image",  moduleObj['icon']);
							}
							else
							{
								item.setAttribute("image",  moduleObj['small-icon']);
							}
							
							if (moduleObj.category == 'admin')
							{
								document.getAnonymousElementByAttribute(this, "anonid", "admin-separator").removeAttribute("hidden");
							}
							item.setAttribute("wmodule",  'wmodule_' +  moduleObj.name);
							item.setAttribute("version",  moduleObj.version);
							container.appendChild(item);
						}
						if (this.getController().getUserInfos().root)
						{
							//document.getAnonymousElementByAttribute(this, "wmodule", "wmodule_testmail").removeAttribute("hidden");
							document.getAnonymousElementByAttribute(this, "anonid", "webconsole").removeAttribute("hidden");
						}
				]]></body>
			</method>
			
			<method name="openPreferences">
				<body><![CDATA[
					var controller = this.getController();
					var parameters = controller.getUserPreferences();
					controller.openModalDialog(this, "userpreferences", parameters);
					
					this
				]]></body>
			</method>
			
			<method name="openWebConsole">
				<body><![CDATA[
					var parameters = this.getController().getUserInfos();
					this.setAttribute("login", parameters.login);
					this.setAttribute("url", Context.UIBASEURL);
					var data = Context.CHROME_BASEURL.split('/');
					this.setAttribute("projectid", data[data.length-1]);
					var evt = document.createEvent("Events");
					evt.initEvent("RBSChangeExtensionOpenWebConsole", true, false);   
					this.dispatchEvent(evt);
				]]></body>
			</method>
			
			<method name="buildLangsMenu">
				<parameter name="langsObj" />
				<body><![CDATA[
					for(var i = 0; i < langsObj.length; i++)
					{
						var lang = langsObj[i];
						var container = document.getAnonymousElementByAttribute(this, "anonid", "lang-menu");
						var item = document.createElement("menuitem");
						item.setAttribute("label",  lang.label);
						item.setAttribute("value",  lang.value);
						item.setAttribute("checked",  lang.default);
						item.setAttribute("type",  "radio");
						var me = this;
						var eventListener = function(event){me.setWorkingLang(event.originalTarget.value);};
						item.addEventListener("command", eventListener, true);
						container.appendChild(item);
					}
				]]></body>
			</method>

			<method name="setWorkingLang">
				<parameter name="lang" />
				<body><![CDATA[
					Context.W_LANG = lang;
					var controller = this.getController();
					var oldLang = controller.getAttribute('contextlang');
					if (oldLang != Context.W_LANG)
					{
						controller.setAttribute('contextlang', Context.W_LANG);
					}
				]]></body>
			</method>
			
		</implementation>
	</binding>
</bindings>