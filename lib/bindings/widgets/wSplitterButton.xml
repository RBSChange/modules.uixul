<?xml version="1.0" encoding="UTF-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xbl="http://www.mozilla.org/xbl">

	<binding id="wSplitterButton">
		<handlers>
			<handler event="click" clickcount="1"><![CDATA[
				toggle();
			]]></handler>
		</handlers>
		<implementation>
			<constructor><![CDATA[
				var button = this.getElementByAnonid("button");
				var collapse = this.parentNode.getAttribute('collapse');
				if (collapse == 'after')
				{
					var widget = this.parentNode.nextSibling;
					if (widget.collapsed)
					{
						button.setAttribute("class", "griddy-right");
						button.setAttribute("tooltiptext", "${trans:m.uixul.bo.general.showwidget,ucf,etc,js}");
					}
					else
					{
						button.setAttribute("class", "griddy-left");
						button.setAttribute("tooltiptext", "${trans:m.uixul.bo.general.hidewidget,ucf,etc,js}");
					}
				} else
				{
					var widget = this.parentNode.previousSibling;
					if (!widget.collapsed)
					{
						button.setAttribute("class", "griddy-right");
						button.setAttribute("tooltiptext", "${trans:m.uixul.bo.general.hidewidget,ucf,etc,js}");						
					}
					else
					{
						button.setAttribute("class", "griddy-left");
						button.setAttribute("tooltiptext", "${trans:m.uixul.bo.general.showwidget,ucf,etc,js}");
					}
				}
			]]></constructor>
			
			<method name="getElementByAnonid">
				<parameter name="id" />
				<body><![CDATA[
					return document.getAnonymousElementByAttribute(this, "anonid", id);
				]]></body>
			</method>
			
			<method name="hideWidget">
				<body><![CDATA[
					if (!this.parentNode.hasAttribute('collapse'))
					{
						return;
					}
					var collapse = this.parentNode.getAttribute('collapse');
					var widget = undefined;
					var button = this.getElementByAnonid("button");
					if (collapse == 'after')
					{
						widget = this.parentNode.nextSibling;
						button.setAttribute("class", "griddy-right");
						
					}
					else
					{
						widget = this.parentNode.previousSibling;
						button.setAttribute("class", "griddy-left");
					}
					this.collapseWidget(widget);
				]]></body>
			</method>
			
			<method name="showWidget">
				<body><![CDATA[
					if (!this.parentNode.hasAttribute('collapse'))
					{
						return;
					}
					var collapse = this.parentNode.getAttribute('collapse');
					var widget = undefined;
					var button = this.getElementByAnonid("button");
					if (collapse == 'after')
					{
						widget = this.parentNode.nextSibling;
						button.setAttribute("class", "griddy-left");
						
					} else
					{
						widget = this.parentNode.previousSibling;
						button.setAttribute("class", "griddy-right");
					}
					this.uncollapseWidget(widget);
				]]></body>
			</method>
			
			<method name="collapseWidget">
				<parameter name="widget"/>
				<body><![CDATA[
					widget.collapsed = true;
					this.getElementByAnonid("button").setAttribute("tooltiptext", "${trans:m.uixul.bo.general.showwidget,ucf,etc,js}");
				]]></body>
			</method>
			
			<method name="uncollapseWidget">
				<parameter name="widget"/>
				<body><![CDATA[
					widget.collapsed = false;
					this.getElementByAnonid("button").setAttribute("tooltiptext", "${trans:m.uixul.bo.general.hidewidget,ucf,etc,js}");
				]]></body>
			</method>
						
			<method name="toggle">
				<body><![CDATA[
					
					if (!this.parentNode.hasAttribute('collapse'))
					{
						return;
					}
					var collapse = this.parentNode.getAttribute('collapse');
					var widget = undefined;
					var button = this.getElementByAnonid("button");
					if (collapse == 'after')
					{
						var widget = this.parentNode.nextSibling;
						if (!widget.collapsed)
						{
							button.setAttribute("class", "griddy-right");
							this.collapseWidget(widget);
						}
						else
						{
							button.setAttribute("class", "griddy-left");
							this.uncollapseWidget(widget);
						}
					}
					else
					{
						var widget = this.parentNode.previousSibling;
						if (widget.collapsed)
						{
							button.setAttribute("class", "griddy-right");
							this.uncollapseWidget(widget);
						}
						else
						{
							button.setAttribute("class", "griddy-left");
							this.collapseWidget(widget);
						}
					}
				]]></body>
			</method>
		</implementation>

		<content>
			<xul:hbox>
				<xul:toolbarbutton class="griddy-left" anonid="button" />
			</xul:hbox>
		</content>
	</binding>
</bindings>