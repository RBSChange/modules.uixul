<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="wTagsPanel" extends="widgets.wPanel#wPanel">
		<implementation>
			<field name="_defaultAttachmentAttribute">'selectedids'</field>
			<field name="_selectedId">null</field>
			<field name="_lastSuccessResult">null</field>
			<field name="_lastSelectedPackage">null</field>
			<field name="_firstVisiblePackage">null</field>

			<property
				name="blocking"
				doc-text="Indicates if the operations on tags are blocking or not"
				doc-type="Boolean"
				doc-access="private">
				<getter><![CDATA[
					return (this.hasAttribute('blocking') && this.getAttribute('blocking') == 'true');
				]]></getter>
			</property>

			<property name="columnsCount">
				<getter><![CDATA[
					var cols = null;
					if (this.hasAttribute('cols'))
					{
						cols = parseInt(this.getAttribute('cols'));
					}
					if (cols === null || isNaN(cols))
					{
						cols = 3;
					}
					return cols;
				]]></getter>
			</property>

			<method name="handleBroadcast" doc-access="private">
				<parameter name="observes" />
				<body><![CDATA[
					if (!this.hasAttribute('collapsed'))
					{
						var val = this.getAttribute(this._defaultAttachmentAttribute);
						if (val.length > 0)
						{
							this.getElementById('tagsDeck').setAttribute('selectedIndex', '1');
							
							this._selectedId = val;
							var result = wCore.executeJSON('uixul', 'LoadTags', { {K::COMPONENT_ID_ACCESSOR}: this._selectedId }, null, true);
							this.resetPanel();
							this.highlightAffectedTags(result['contents']);
							this.showRelatedElements();
							
							this.getElementById('tagsDeck').setAttribute('selectedIndex', '0');
						}
						else
						{
							this.hide();
						}
					}
					]]></body>
			</method>
			
			<method name="resetPanel" doc-access="private">
				<body><![CDATA[
					// Collapse all menuitems.
					var selector = this.getElementById('selector');
					$(selector).find('menuitem').each(function (index, node) {
						node.setAttribute('collapsed', 'true');
						node.removeAttribute('hasAffectedTags');
						node.setAttribute('label', node.getAttribute('short-label'));
					});
					
					// Collapse all grids containing tags buttons.
					var deck = this.getElementById('deck');
					$(deck).find('grid[content-type]').each(function (index, node) {
						node.setAttribute('collapsed', 'true');
					});
					
					// Unselect all tags.
					$(deck).find('toolbarbutton').each(function (index, node) {
						node.removeAttribute('class');
						node.removeAttribute('checked');
						node.removeAttribute('isAffected');
					});
				]]></body>
			</method>
			
			<method name="showRelatedElements" doc-access="private">
				<body><![CDATA[
					var tagsPanel = this;
					var documentInfo = wCore.getDocumentInfo(this._selectedId);
					var deck = this.getElementById('deck');
					var selector = this.getElementById('selector');
					
					this.setTitle(documentInfo['labels'][this.getModule().getContextLang()]);
					
					this._firstVisiblePackage = null;
					for (var i in deck.childNodes)
					{
						var panel = deck.childNodes[i];
						if (panel.nodeType == 1)
						{
							var package = panel.getAttribute('package');
							var modelParts = documentInfo['model'].split('/');
							var modelPatern = modelParts[0] + '/*';
							$(panel).children('[content-type='+documentInfo['model']+'], [content-type='+modelPatern+']').each(function (index, node) {
								node.removeAttribute('collapsed');
								optionNode = tagsPanel.getElementById('tag_option_' + package);
								optionNode.removeAttribute('collapsed');
								optionNode.setAttribute('label', optionNode.getAttribute('short-label') + ' (' + node.getAttribute('tags-count') + ')');
								if (tagsPanel._firstVisiblePackage == null)
								{
									tagsPanel._firstVisiblePackage = package;
								}
							});
						}
					}

					// If there is no affectable tags, close the panel.
					if (tagsPanel._firstVisiblePackage == null)
					{
						this.hide();
					}
					// Else display the last selected panel, or by default, le first visible one.
					else
					{
						var index = -1;
						if (this._lastSelectedPackage != null)
						{
							var item = this.getElementById('tag_option_' + this._lastSelectedPackage);
							if (selector.contains(item) && !item.hasAttribute('collapsed'))
							{
								index = selector.getIndexOfItem(item);
							}
						}
						if (index == -1 && this._firstVisiblePackage != null)
						{
							var item = this.getElementById('tag_option_'+this._firstVisiblePackage);
							if (selector.contains(item))
							{
								index = selector.getIndexOfItem(item);
							}
						}
						deck.selectedIndex = index;
						selector.selectedIndex = index;
					}
				]]></body>
			</method>
			
			<method name="highlightAffectedTags" doc-access="private">
				<parameter name="affectedTags" />
				<body><![CDATA[
					var tagsPanel = this;
					for (var i in affectedTags)
					{
						var tagInfo = affectedTags[i];
						var tagNode = this.getElementById('tag_' + tagInfo['tag']);						
						if (tagInfo['affected'])
						{
							tagNode.setAttribute('class', 'affectedTag');
						}
						if (tagInfo['selfAffected'])
						{
							tagNode.setAttribute('checked', 'true');
							tagNode.setAttribute('isAffected', 'true');
							$(tagNode).parents('[package]').each(function (index, node) {
								var package = node.getAttribute('package');
								var optionNode = tagsPanel.getElementById('tag_option_' + package);
								if (optionNode)
								{
									optionNode.setAttribute('hasAffectedTags', 'true');
								}
							});
						}
					}
				]]></body>
			</method>

			<method name="setTitle">
				<parameter name="title" />
				<body><![CDATA[
					if (title && title.length)
					{
						title = " ("+title+")";
					}
					this.getElementById('panelHeader').setAttribute(
						'label',
						"&modules.uixul.bo.tagsPanel.Panel-title;"+title
					);
				]]></body>
			</method>

			<method name="addOrRemoveTag" doc-text="Adds or remove a tag according to the button status" doc-access="private">
				<parameter name="button" doc-text="The button that sent the action" doc-type="DOMElement" />
				<body><![CDATA[
					var tag = button.getAttribute('value');
					var tagLabel = button.getAttribute('label');
					if (button.hasAttribute("isAffected"))
					{
						if (button.getAttribute('tag-type') != 'simple' && !confirm("&modules.uixul.bo.tagsPanel.Remove-exclusive-tag-confirmation-message;"))
						{
							return;
						}
						this.getModule().doRemoveTag(this._selectedId, tag, this);
						button.removeAttribute("isAffected");
					}
					else
					{					
						if (button.getAttribute('class').indexOf('affectedTag') != -1)
						{
							var locale = new wLocale("&modules.uixul.bo.tagsPanel.Set-already-affected-exclusive-tag-confirmation-message;");
							locale.setAttribute('currentElement', this.getAttachedComponent().getSelectedLabels()[0]);
							locale.setAttribute('tag', tagLabel);
							if (!confirm(locale.toString()))
							{
								return;
							}
						}
						this.getModule().doAddTag(this._selectedId, tag, this);
					}
				]]></body>
			</method>

			<method name="onAddTagSuccess">
				<parameter name="e4x" />
				<body><![CDATA[
					this.handleBroadcast();
				]]></body>
			</method>
			
			<method name="onAddTagError">
				<parameter name="e4x" />
				<body><![CDATA[
				]]></body>
			</method>

			<method name="onRemoveTagSuccess">
				<parameter name="e4x" />
				<body><![CDATA[
					this.handleBroadcast();
				]]></body>
			</method>
			
			<method name="onRemoveTagError">
				<parameter name="e4x" />
				<body><![CDATA[

				]]></body>
			</method>

			<method name="viewPanel">
				<parameter name="panelIndex" />
				<body><![CDATA[
				try
				{
					this.getElementById('deck').selectedIndex = panelIndex;
					var selector = this.getElementById('selector');
					var selectedItem = selector.getItemAtIndex(panelIndex);
					if (selectedItem && selectedItem.getAttribute)
					{
						this._lastSelectedPackage = selectedItem.getAttribute('package');
					}
					else
					{
						this._lastSelectedPackage = null;
					}
				}
				catch (e)
				{
					wCore.error("viewPanel", [], e);
				}
				]]></body>
			</method>
		</implementation>

		<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xbl="http://www.mozilla.org/xbl">
			<vbox class="panel" flex="1">
				<wpanelheader anonid="panelHeader" icon="{IconsBase}/small/tags.png" label="&amp;modules.uixul.bo.tagsPanel.Panel-title;" />
				<deck anonid="tagsDeck" flex="1" selectedIndex="0">
					<vbox class="change-toolbox">
						<!-- FIXME: the 50px height is required to have the menulist popup open at the right place... Maybe there is a better way to do that... -->
						<description style="height: 50px">&amp;modules.uixul.bo.tagsPanel.Help-text;</description>
	    				<menulist anonid="selector" oncommand="viewPanel(this.selectedIndex)">{TAGS_OPTIONS}</menulist>
						{TAGS_PANELS}
					</vbox>
					<vbox flex="1" pack="center" style="background-color:white; opacity:0.7">
		        		<spacer flex="1"/>
		        		<hbox pack="center">
		       					<image change:image="loading_40.gif" height="40px" width="40px" />
		        		</hbox>
		        		<separator height="16px"/>
		        		<hbox pack="center">
		       				<description style="font-size:18px" i18n:attributes="value &amp;modules.uixul.bo.tagsPanel.LoadingEllipsis;"/>
		        		</hbox>
		        		<spacer flex="1"/>
		        	</vbox>
				</deck>
			</vbox>        
		</xbl:content>
	</binding>
</bindings>
