<?xml version="1.0" encoding="utf-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xbl="http://www.mozilla.org/xbl">


	<binding id="wWidget" inheritstyle="true" extends="core.wBox#wBox">

		<implementation>

			<field name="_attachedComponent" doc-access="private">[]</field>

			<field name="_attachedComponentAttribute" doc-access="private">[]</field>

			<field name="_defaultAttachmentAttribute">null</field>

			<field name="_observers" doc-access="private">[]</field>

			<field name="_maxAttachements" doc-access="private">100</field>

			<constructor><![CDATA[
				this.setupAttachment();
			]]></constructor>

<!-- #### ATTACHMENT AND BROADCASTING ##################################### -->


			<method name="setupAttachment">
				<body><![CDATA[
					// attach the component if an "attachment" attribute is found
					if (this.hasAttribute('attachment'))
					{
						var attachments = this.getAttribute('attachment').split(' ');

						for (var i = 0; i < attachments.length; i++)
						{
							var attachment = attachments[i];
							
							if (i == this._maxAttachements)
							{
								throw new Error("[" + this.tagName + "] MAX_ATTACHMENT_NUMBER_REACHED (\"" + attachment + "\")");
							}

							var attachmentInfosArray = attachment.split(/[\/\.]+/);

							if (attachmentInfosArray.length == 1)
							{
								this.attach(attachmentInfosArray[0], this._defaultAttachmentAttribute, false, i);
							}
							else if (attachmentInfosArray.length == 2)
							{
								this.attach(attachmentInfosArray[0], attachmentInfosArray[1], false, i);
							}
							else
							{
								throw new Error("[" + this.tagName + "] INVALID_ATTACHMENT_ATTRIBUTE (\"" + attachment + "\")");
							}
						}
					}
				]]></body>
			</method>

<!--
Attaches the component to the component "component", listening on the attribute "attribute".
@param object component The component to attach to.
@param string attribute The component's attribute to listen to.
-->
			<method name="attach">
				<parameter name="component" />
				<parameter name="attribute" />
				<parameter name="handleBroadcastNow"/>
				<parameter name="index"/>
				<body><![CDATA[
					var xulcomponent = document.getElementById(component);
					if (xulcomponent == null)
					{
						wCore.warn("Component not found [" + [component, attribute, handleBroadcastNow, index].join(", ") + "] for attach to [" + this.id + "]");
						return;
					}
			
					if (typeof(index) == "undefined")
					{
						index = 0;
					}

					if (index == 0)
					{
						// first detach the currently attached component
						this.detach();
					}

					// create the "observes" element
					var elm = document.createElement('observes');
					elm.setAttribute('element', component);
					if (!attribute || attribute == 'null') {
						attribute = '*';
					}
					elm.setAttribute('attribute', attribute);
					// give a unique ID to this "observes" element
					elm.setAttribute('id', this.id + '_attachmentObserver_' + index);

					// add the event listener for the "onbroadcast" event
					var _this = this;
					
					try
					{
						elm.removeEventListener('broadcast', function(e) {_this.handleBroadcast(this);}, false);
					}
					catch (e)
					{
						wCore.error("wWidget.attach", [component, attribute, handleBroadcastNow, index], e);
					}

					elm.addEventListener('broadcast', function(e) { _this.handleBroadcast(this); }, false);

					// add the "observes" element to this binding
					this.appendChild(elm);

					this._attachedComponent[index] = xulcomponent;
					this._attachedComponentAttribute[index] = attribute;


					
					if (typeof(xulcomponent.addObserver) == "function" )
					{
						try
						{
							this._attachedComponent[index].addObserver(this);
						}
						catch (e)
						{
							wCore.error("wWidget.attach", [component, attribute, handleBroadcastNow, index], e);
						}
					}
					else
					{
						var wWidgetFrom = this;
						wCore.executeOnMethodExists(xulcomponent, "addObserver", function(xbl) {xbl.addObserver(wWidgetFrom);});						
					}
					
                    // call the handleBroadcast() method to simulate a change
                    // for this binding to update according to its newly
                    // attached component
					if (handleBroadcastNow)
					{
						this.handleBroadcast();
					}
                ]]></body>
            </method>

            <method name="addObserver">
				<parameter name="observer" />
				<body><![CDATA[
				    this._observers.push(observer.id);
					this.handleAddObserver(observer);
                ]]></body>
            </method>

            <method name="handleAddObserver">
				<parameter name="observer" />
				<body><![CDATA[
                ]]></body>
            </method>

<!--
Detaches the component from the currently attached component.
-->
	        <method name="detach">
			<body><![CDATA[
				for (var i = 0; i < this._maxAttachements; i++)
				{
	
	           		var observer = document.getElementById(this.id + '_attachmentObserver_' + i);
	           		if (observer)
	           		{
	               		try
	               		{
	               		    this.removeChild(observer);
	               		}
	               		catch (e)
	              		{
	              			wCore.error("wWidget.detach", [], e);
	              		}
					}
	           		if (this._attachedComponent[i])
	           		{
	               		try
	               		{
	               		    this._attachedComponent[i].removeObserver(this);
	               		}
	               		catch (e)
	          		 	{
	          		 		wCore.error("wWidget.detach", [], e);
	          		 	}
					}
				}
			]]></body>
            </method>

            <method name="removeObserver">
				<parameter name="observer" />
				<body><![CDATA[
				    var newObservers = [];
				    for (var i = 0; i < this._observers.length; i++)
				    {
				        if (this._observers[i] != observer.id)
				        {
				            newObservers.push(observer.id);
				        }
				    }
				    this._observers = newObservers;
				    this.handleRemoveObserver(observer);
                ]]></body>
            </method>

            <method name="handleRemoveObserver">
				<parameter name="observer" />
				<body><![CDATA[
                ]]></body>
            </method>

			<method name="reattach">
				<parameter name="handleBroadcastNow" />
				<body><![CDATA[
					for (var i = 0; i < this._maxAttachements; i++)
					{
						if (this._attachedComponent[i])
						{
							this.attach(this._attachedComponent[i].id, this._attachedComponentAttribute[i], handleBroadcastNow, i);
						}
					}
				]]></body>
			</method>

<!--
Called every time the selection has changed in the component pointed by the
"component" attribute.
@param observes element The <observes> element handling the related broadcast event.
-->
            <method name="handleBroadcast">
		<parameter name="observes" />
                <body><![CDATA[
                ]]></body>
            </method>


            <method name="hasAttachedComponent">
                <body><![CDATA[
			return (this._attachedComponent.length > 0);
                ]]></body>
            </method>


			<method name="getAttachedComponent">
				<parameter name="index" />
				<body><![CDATA[
					if (typeof(index) == "undefined")
					{
						index = 0;
					}
                	return this._attachedComponent[index];
                ]]></body>
            </method>
            
            
            <method name="getAttachedComponents">
					<body><![CDATA[
                	return this._attachedComponent;
                ]]></body>
            </method>
            

            <method name="hasObservers">
                <body><![CDATA[
                	return (this._observers.length > 0);
                ]]></body>
            </method>


            <method name="getObservers">
                <body><![CDATA[
                    var observers = [];
                    for (var i = 0; i < this._observers.length; i++)
				    {
				        try
				        {
				            var observer = document.getElementById(this._observers[i]);
				            if (observer)
				            {
				                observers.push(observer);
				            }
				        }
				        catch (e)
				        {
				        	wCore.error("wWidget.getObservers", [], e);
				        }
				    }
                	return observers;
                ]]></body>
            </method>


		</implementation>


	</binding>


</bindings>
