<?xml version="1.0"?>
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">


<!--
wContextActionsContainer
	@author INTbonjF
	@date   2006-03-21

	A container	for contextual actions widgets.
	This is the base class for wToolbar and wPopup widgets.
-->
	<binding id="wContextActionsContainer" extends="widgets.wWidget#wWidget">

		<implementation>



<!--
For each document types combination, this binding keeps the actions list
in memory to avoid calling the server each time.
-->
			<field name="_actionCache">[]</field>

			<field name="_commandPrefix">"wCommand"</field>

			<field name="_dynamicActionsOffset">0</field>

			<field name="_isToolBar">false</field>

			<field name="_hasEditButton">false</field>

			<method name="getEventType">
				<body><![CDATA[
					return '';
				]]></body>
			</method>


			<method name="refresh">
				<body><![CDATA[
					this.getAttachedComponent().refresh();
				]]></body>
			</method>


<!--
Called every time the selection has changed in the component pointed by the
"component" attribute.
	TODO cmp, widgetref and eventType are hard-coded
-->
<!--
			<method name="handleBroadcast">
				<parameter name="observes" />
				<body><![CDATA[
					var val = this.getAttribute('selectedtypes');
					var key = this.getEventType() + '/' + val;
					// if this combination of types has already been
					// retrieve on the server, do not reload them.
					if (key in this._actionCache) {
						this.onGetAvailableActionsSuccess(this._actionCache[key]);
					} else {
						this.getController().execute(
							'Get actions',
							this,
							'uixul',
							'GetAvailableActions',
							{ cmp: val.split(/\s+/), widgetref: this.getAttachedComponent().id, eventType: this.getEventType(), {K::WEBEDIT_MODULE_ACCESSOR}: this.getModule().name }
							);
					}
				]]></body>
			</method>
-->

<!--
This handler is called each time the "GetAvailableActions" action has completed
successfully. It updates the contents of the widgets according to the response,
populating it with items created via the createItem() method.
@param object e4x The server response of the action as an E4X XML object.
-->
<!--
			<method name="onGetAvailableActionsSuccess">
				<parameter name="e4x" />
				<body><![CDATA[
					var widgetsContainer = this.getElementById('widgetsContainer');

					var key = this.getEventType() + '/' + e4x.documenttypes.toString();
					if ( ! (key in this._actionCache) ) {
						this._actionCache[key] = e4x;
					}

					// remove all the buttons from the widgetsContainer
					var count = widgetsContainer.childNodes.length;
					for (var i=0; i<count; i++) {
						widgetsContainer.removeChild(widgetsContainer.childNodes[0]);
					}
					for (var i=0; i<e4x.actions.action.length(); i++) {
						var commandId = e4x.actions.action[i].toString();
						if (commandId == '|') {
							widgetsContainer.appendChild( this.createSeparator() );
						} else {
							widgetsContainer.appendChild( this.createItem( commandId ) );
						}
					}
				]]></body>
			</method>
-->


			<method name="handleBroadcast">
				<parameter name="observes" />
				<body><![CDATA[
					var widgetsContainer = this.getElementById('widgetsContainer');
					// remove all the buttons from the widgetsContainer
					if (!this._isToolBar && this._hasEditButton)
					{
						widgetsContainer.removeChild(widgetsContainer.childNodes[0]);
						this._hasEditButton = false;
					}

					var count = widgetsContainer.childNodes.length;
					for (var i=this._dynamicActionsOffset; i<count; i++)
					{
						widgetsContainer.removeChild(widgetsContainer.childNodes[this._dynamicActionsOffset]);
					}
					
					var actions = trim(this.getAttribute('actions-' + this.getEventType()));
					if (actions.length > 0)
					{
						var actionGroup = null;

						actions = actions.split(/\s+/);

						var lastItemIsSeparator = true;

						var lastAddedChild = null;

						var firstItem = true;						

						for (var i=0; i<actions.length; i++)
						{
							var commandId = actions[i];
								
							if (!this._isToolBar && (commandId == "edit"))
							{
								this._hasEditButton = true;								
								var defaultCommand = true;
							}
							else
							{
								var defaultCommand = false;
							}

							var cmdItem = null;
							actionGroup = this.getAttachedComponent().getActionGroup(commandId);
							if (actionGroup != null)
							{
								cmdItem = this.createActionGroup(actionGroup.label, actionGroup.icon, actionGroup.actions);
							}
							else if (!this._isToolBar && this.getAttachedComponent().getAttachedComponent())
							{
								actionGroup = this.getAttachedComponent().getAttachedComponent().getActionGroup(commandId);
								if (actionGroup != null)
								{
									cmdItem = this.createActionGroup(actionGroup.label, actionGroup.icon, actionGroup.actions);
								}
								else
								{
									cmdItem = this.createCommand(commandId);
								}
							}
							else
							{
								cmdItem = this.createCommand(commandId);
							}

							if (cmdItem != null)
							{
							    if (cmdItem.hasAttribute('separator'))
    							{
    							   if (lastItemIsSeparator)
    							   {
    							       cmdItem = null;
    							   }
    							   lastItemIsSeparator = true;
    							}
    							else
    							{
    							   lastItemIsSeparator = false;
    							}
    					    }

							if (cmdItem != null)
							{
								if (firstItem)
								{
								    if (cmdItem.hasAttribute('separator'))
								    {
								        continue;
								    }
								    else
								    {
								        firstItem = false;
								        cmdContainer = this.createItemContainer(widgetsContainer);
								        if (cmdContainer != null)
								        {
								    	   cmdItem = cmdContainer.appendChild( cmdItem );
								    	}
								    	else if (defaultCommand)
								    	{
								    	   	cmdItem = widgetsContainer.insertBefore( cmdItem, widgetsContainer.firstChild );
										   	cmdItem.setAttribute("style", "font-weight: bold !important;");
										}
										else
										{
									   		cmdItem = widgetsContainer.appendChild( cmdItem );
										}
								    }
    						    }
    						    else
    						    {
    						        cmdContainer = this.createItemContainer(widgetsContainer);
								    if (cmdContainer != null)
							        {
							    		cmdItem = cmdContainer.appendChild( cmdItem );
							    	}
							    	else if (defaultCommand)
									{
									    cmdItem = widgetsContainer.insertBefore( cmdItem, widgetsContainer.firstChild );
									    cmdItem.setAttribute("style", "font-weight: bold !important;");
									} 
									else
									{
										cmdItem = widgetsContainer.appendChild( cmdItem );
									}
    						    }

								if (!cmdItem.hasAttribute('disabled'))
								{
									var observesElm = document.createElement('observes');
									observesElm.setAttribute('element', 'wcontroller');
									observesElm.setAttribute('attribute', 'disabled');
									cmdItem.appendChild(observesElm);
								}

								lastAddedChild = cmdItem;
								if ((actionGroup == null) && (!cmdItem.hasAttribute('separator')))
								{
									var commandId = cmdItem.getAttribute('commandid');
									var addLabel = (this._commandPrefix == "wCommand");
									this.handleCommand(commandId, cmdItem, addLabel);
								}
							}
						}

						if ((lastAddedChild != null) && lastAddedChild.hasAttribute('separator'))
						{
						    try
						    {
						        widgetsContainer.removeChild(lastAddedChild.parentNode);
						    }
						    catch (e)
						    {
						    	wCore.error("wContextActionsContainer.handleBroadcast", [observes], e);
						        widgetsContainer.removeChild(lastAddedChild);
						    }
						}
					}
				]]></body>
			</method>


<!--
Creates an item to be displayed as an action in the container.
This method may be overloaded to create the desired element
in the desired container, depending on the widget.
@param string commandId The command ID to affect to the item.
-->
			<method name="createItem">
				<parameter name="commandId" />
				<body><![CDATA[
					var item = document.createElement('label');
					item.setAttribute('value', commandId);
					return item;
				]]></body>
			</method>


			<method name="createItemContainer">
			    <parameter name="widgetsContainer" />
				<body><![CDATA[
					return widgetsContainer.appendChild( document.createElement('hbox') );
				]]></body>
			</method>


			<method name="createCommand">
				<parameter name="commandId" />
				<body><![CDATA[
					var disabled = false;
					if (commandId.charAt(0) == '!')
					{
						commandId = commandId.substring(1, commandId.length);
						disabled = true;
					}
					if (commandId == '|')
					{
						elm = this.createSeparator();
						elm.setAttribute('disabled', 'true');
						elm.setAttribute('separator', 'true');
						return elm;
					}
					else if (commandId == '-')
					{
						elm = this.createSpacer();
						elm.setAttribute('disabled', 'true');
						elm.setAttribute('separator', 'true');
						return elm;
					}
					else
					{
						var elm = this.createItem(commandId);
						if (disabled)
						{
						    if (this._isToolBar)
						    {
							    elm.setAttribute('disabled', 'true');
							}
							else
							{
							    return null;
							}
						}
						return elm;
					}
				]]></body>
			</method>

			<method name="createSeparator">
				<body><![CDATA[
					var item = document.createElement('menuseparator');
					return item;
				]]></body>
			</method>


			<method name="createSpacer">
				<body><![CDATA[
					var item = document.createElement('spacer');
					item.setAttribute('flex', '1');
					return item;
				]]></body>
			</method>


			<method name="createActionGroup">
				<parameter name="label" />
				<parameter name="icon" />
				<parameter name="actions" />
				<body><![CDATA[
					return null;
				]]></body>
			</method>


			<method name="doPostItemsAdded">
				<body><![CDATA[
				]]></body>
			</method>

			<method name="handleCommand">
				<parameter name="commandId" />
				<parameter name="cmdItem" />
				<parameter name="addLabel" />
				<body><![CDATA[
					//wCore.debug('wContextActionsContainer.handleCommand:' + commandId);
					var widget = this.getAttachedComponent();
					var module = widget.getModule();
					
					var actionInfo = module.getActionInformation(commandId);
					if (actionInfo != null)
					{
						cmdItem.setAttribute('image', actionInfo.image);
						if (addLabel)
						{
							cmdItem.setAttribute('label', actionInfo.label);
						}
						cmdItem.setAttribute('tooltiptext', actionInfo.label);
						var handler =
						{
							module : module,
							widget : widget,
							commandId : commandId,
							handleEvent: function(event)
							{
								this.module.performSecureActionOnWidget(this.commandId, this.widget);
							}
						};
						cmdItem.addEventListener('command', handler, false);
						return true;
					}
					else
					{
						wCore.debug('wContextActionsContainer.handleCommand, command not found :' + commandId);
						cmdItem.setAttribute('disabled', 'true');
						return false;
					}
				]]></body>
			</method>
		</implementation>
    </binding>
</bindings>
