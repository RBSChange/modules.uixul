<?xml version="1.0" encoding="utf-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:xbl="http://www.mozilla.org/xbl">

    <binding id="cOrderChildrenDialog" extends="core.wDialog#wDialog">
    	<resources>
    		<stylesheet src="modules.uixul.cDocumentEditor" />
			<stylesheet src="modules.uixul.cOrderChildrenDialog" />
		</resources>
		<implementation>
			<field name="mInitialized">false</field>
			<field name="mGridOk">false</field>
			<field name="mDataOk">false</field>
			<field name="mDataLoaded">false</field>
			<field name="mData"></field>

			<method name="onInitialize">
				<body><![CDATA[
					this.autoResize(700, 550);
					this.lockCommandsUI();
					var param = this.parameters;
					this.mData = wCore.executeJSON('uixul', 'GetDocumentsToSort', {cmpref: param.id, relationName: param.relationName, modelNames: param.componentTypes, lang: Context.W_LANG}, null, true);
					this.mDataOk = true;
					this.loadData();
					this.mInitialized = true;
				]]></body>
			</method>
			
			<method name="loadData">
				<body><![CDATA[
					if (!this.mDataOk || !this.mGridOk)
					{
						return;
					}

					var result = this.mData;
					if (result.status == 'OK')
					{
						var contents = result.contents;
						var dataset = (contents.nodes.length > 0) ? contents.nodes : null;
						this.gridlist.initJSONDataset(dataset);
						this.modified = false;
						this.updateCommandsUI();
						this.mDataLoaded = true;
					}
					else
					{
						this.getElementByAnonId('scrollctrl').setAttribute('collapsed', 'true');
						this.gridlist.initJSONDataset(null);
						this.showErrorMessage(result.contents.errorMessage);
						this.modified = false;
						this.mDataLoaded = true;
					}
				]]></body>
			</method>

			<property name="gridlist" readonly="true">
				<getter><![CDATA[
					return this.getElementByAnonId('documentlist');
				]]></getter>
			</property>
			
			<property name="modified">
				<getter><![CDATA[
					return this.getAttribute('modified') === 'true';
				]]></getter>
				<setter><![CDATA[
					if (val != this.modified) 
					{
						if (val)
						{
							this.setAttribute('modified', 'true');
						}
						else
						{
							this.removeAttribute('modified');
						}
						this.updateCommandsUI();
					}
				]]></setter>
			</property>
			
			<method name="updateCommandsUI">
				<body><![CDATA[						
					this.getElementByAnonId('save').disabled = !this.modified;
				]]></body>
			</method>
						
			<method name="lockCommandsUI">
				<body><![CDATA[													
					this.getElementByAnonId('save').disabled = true;
				]]></body>
			</method>
			
			<method name="onSave">
				<body><![CDATA[
					this.showTextMessage('&modules.uixul.bo.doceditor.Update-in-progress;');
					
					var childrenOrder = this.getChildrenOrder();
					
					var param = this.parameters;
					result = wCore.executeJSON('generic', 'OrderJSON', {cmpref: param.id, co: childrenOrder, relationName: param.relationName, lang: Context.W_LANG}, null, true);
					if (result.status == 'OK')
					{
						this.sender.refresh();
						this.controller.closeModalDialog(true);
					}
					else
					{
						this.showErrorMessage(result.contents.errorMessage);
					}
				]]></body>
			</method>
			
			<method name="getChildrenOrder">
				<body><![CDATA[
					var list = this.getElementByAnonId('documentlist');
					var value = list.getJSONDataset();
					var childrenOrder = [];
					for (var i = 0; i < value.length; i++)
					{
						childrenOrder.push(value[i].id);
					}
					return childrenOrder;
				]]></body>
			</method>
			
			<property name="messageBox" readonly="true">
				<getter><![CDATA[
					return this.getElementByAnonId("message");
				]]></getter>
			</property>
			
			<method name="showErrorMessage">
				<parameter name="text"/>
				<body><![CDATA[
					if (this.messageBox) {this.messageBox.showMessage("error", text);}
				]]></body>
			</method>
			
			<method name="showWarningMessage">
				<parameter name="text"/>
				<body><![CDATA[					
					if (this.messageBox) {this.messageBox.showMessage("warning", text);}
				]]></body>
			</method>

			<method name="showHelpMessage">
				<parameter name="text"/>
				<body><![CDATA[	
					if (this.messageBox) {this.messageBox.showMessage("help", text);}
				]]></body>
			</method>
									
			<method name="showTextMessage">
				<parameter name="text"/>
				<body><![CDATA[	
					if (this.messageBox) {this.messageBox.showMessage("information", text);}				
				]]></body>
			</method>
		</implementation>
		<handlers>
			<handler event="gridChanged"><![CDATA[
				if (this.mDataLoaded && !this.modified)
				{
					this.modified = true;
				}
			]]></handler>
			<handler event="gridInitialised"><![CDATA[
				this.mGridOk = true;
				this.loadData();
			]]></handler>
		</handlers>
		<xbl:content xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xbl="http://www.mozilla.org/xbl">
			<vbox flex="1">
				<hbox class="dialog-header">
					<label anonid="title" value="&amp;modules.uixul.bo.orderChildrenPanel.Order-children-panel-title;" class="dialog-title" />
					<spacer flex="1" />
					<vbox pack="center">
						<toolbarbutton image="{IconsBase}/small/delete.png" oncommand="onCancel();" tooltiptexts="&amp;modules.uixul.bo.dialog.Cancel;" />
					</vbox>
				</hbox>
				<xul:cmessageinfo anonid="message" />
				<xul:hbox anonid="action-bar">
					<xul:button anonid="save" oncommand="onSave()" label="&amp;modules.uixul.bo.dialog.Apply;" image="{IconsBase}/small/check.png" />
					<xul:button anonid="delete" oncommand="onCancel()" label="&amp;modules.uixul.bo.dialog.Cancel;" image="{IconsBase}/small/undo.png" />
					<xul:spacer flex="1" />
				</xul:hbox>
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:cdocumentlist anonid="documentlist" flex="1" />
					<xul:spacer flex="1" />
				</xul:scrollbox>				
			</vbox>
		</xbl:content>
    </binding>
	
	<binding id="cDocumentList" extends="widgets.cGrid#cAbstractOrderableGrid">	
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled" style="padding-left: 5px;padding-right: 5px;">
				<xul:columns>
					<xul:column />
					<xul:column flex="1" />
					<xul:column />
				</xul:columns>
				<xul:rows>
					<xul:row class="head" anonid="head-row">
						<xul:label name="icon" />
						<xul:label name="label" value="&amp;modules.catalog.bo.doceditor.panel.declinations.Column-label;" />
						<xul:label name="actions" />
					</xul:row>
				</xul:rows>
			</xul:grid>			
			<xul:row anonid="template-row" class="document orderable" hidden="true">
				<xul:ciconcell value="" />
				<xul:label value="" />
				<xul:toolbar class="action">
					<xul:toolbarbutton action="up" image="{IconsBase}/small/arrow-up-blue.png" tooltiptext="&amp;modules.uixul.bo.actions.Up;" />
					<!-- <xul:toolbarbutton action="up10" image="{IconsBase}/small/arrow-up-blue-10.png" tooltiptext="&amp;modules.uixul.bo.actions.Up-10;" /> -->
					<xul:toolbarbutton action="up100" image="{IconsBase}/small/arrow-up-blue-100.png" tooltiptext="&amp;modules.uixul.bo.actions.Up-100;" />
					<xul:toolbarbutton action="down" image="{IconsBase}/small/arrow-down-blue.png" tooltiptext="&amp;modules.uixul.bo.actions.Down;" />
					<!-- <xul:toolbarbutton action="down10" image="{IconsBase}/small/arrow-down-blue-10.png" tooltiptext="&amp;modules.uixul.bo.actions.Down-10;" /> -->
					<xul:toolbarbutton action="down100" image="{IconsBase}/small/arrow-down-blue-100.png" tooltiptext="&amp;modules.uixul.bo.actions.Down-100;" />
				</xul:toolbar>
			</xul:row>
		</content>
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>	
			
			<method name="getDatarowKey">
				<parameter name="datarow" />
				<body><![CDATA[
					return datarow.id;
				]]></body>
			</method>
					
			<method name="execute_up10">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					var dataset = this.buildDataset();
					var idx = this.getDataRowIndex(dataset, rowData);
					if (idx - 10 >= 0)
					{
						this.moveBeforeTo(dataset, rowData, idx - 10);  
					}
					else if (idx !== 0)
					{
						this.moveBeforeTo(dataset, rowData, 0);  
					}
				]]></body>
			</method>
			
			<method name="execute_up100">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					var dataset = this.buildDataset();
					var idx = this.getDataRowIndex(dataset, rowData);
					if (idx - 100 >= 0)
					{
						this.moveBeforeTo(dataset, rowData, idx - 100);  
					}
					else if (idx !== 0)
					{
						this.moveBeforeTo(dataset, rowData, 0);  
					}
				]]></body>
			</method>
			
			<method name="execute_down10">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					var dataset = this.buildDataset();
					var idx = this.getDataRowIndex(dataset, rowData);
					if (idx + 11 <= dataset.length)
					{
						this.moveBeforeTo(dataset, rowData, idx + 11);  
					}
					else if (idx !== dataset.length)
					{
						this.moveBeforeTo(dataset, rowData, dataset.length);  
					}
				]]></body>
			</method>
			
			<method name="execute_down100">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					var dataset = this.buildDataset();
					var idx = this.getDataRowIndex(dataset, rowData);
					if (idx + 101 <= dataset.length)
					{
						this.moveBeforeTo(dataset, rowData, idx + 101);  
					}
					else if (idx !== dataset.length)
					{
						this.moveBeforeTo(dataset, rowData, dataset.length);  
					}
				]]></body>
			</method>			
		</implementation>
	</binding>
</bindings>