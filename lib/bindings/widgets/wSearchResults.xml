<?xml version="1.0" encoding="UTF-8"?>
<bindings xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<binding id="wSearchResults" extends="widgets.wWidget#wWidget">
		<handlers>
			<handler event="click" clickcount="1"><![CDATA[
			    var tn = event.originalTarget.tagName;	    
			    if (tn == "treecol")
			    {
			        this.handleSort(event.originalTarget);
			        return;
			    }
			]]></handler>
			
			<handler event="click" clickcount="2"><![CDATA[
				var tn = event.originalTarget.tagName;
				if (tn != 'treechildren')
				{
					return;
				}
			  	if (this.hasSelectedDocument())
				{
					this.editCurrentResult();
				}
			]]></handler>

			<handler event="contextmenu" phase="capturing"><![CDATA[
				if (!this.hasSelectedDocument() || this.hasAttribute("disablecontextmenu") )
				{
					event.preventDefault();
					event.stopPropagation();
            	}
			]]></handler>

		</handlers>

		<implementation>
			<field name="searchTerms">""</field>
			<field name="searchParameters">{}</field>
			<field name="inQueue">false</field>
			<field name="currentTimer">null</field>
			<field name="sortOnColId">'scoreColumn'</field>
			<field name="limit">100</field>
			<field name="parentList">undefined</field>

			<constructor><![CDATA[
				var popupset = this.getElementById("contextualMenuPopupset");
				var popup = this.getElementById("contextualMenuSearchResults");
				if (!this.hasAttribute("disablecontextmenu"))
				{
					popup.setAttribute("id", this.getModule().name +"_contextualMenuSearchResults");
					this.getElementById("searchTree").setAttribute("context", this.getModule().name +"_contextualMenuSearchResults");
				}
				this.setAttribute("candrag", "true");
    			this.registerDragAndDrop(this);
			]]></constructor>
			
			<method name="getSelectedItems">
				<body><![CDATA[
				var list = [];
				var start = new Object();
				var end = new Object();
				var tree = this.getElementById("searchTree");
				var numRanges = tree.view.selection.getRangeCount();
				for (var t = 0; t < numRanges; t++)
				{
					tree.view.selection.getRangeAt(t, start, end);
					for (var v = start.value; v <= end.value; v++)
					{
						var node = tree.view.getItemAtIndex(v);
						list.push(node);
					}
				}
				return list;
				]]></body>
			</method>
			
			<method name="initDragData">
				<body><![CDATA[
               		var treeItems = this.getSelectedItems();      
               		if (treeItems.length == 0)
               		{
               			return;
               		}  
               		
               		idArray = [ ];
               		labelArray = [ ];
               		htmllinkContent = '';
               		blockParamRefs = '';
               		components =  this.buildXmlFromTreeItems(treeItems);

               		for (var i = 0 ; i <   treeItems.length ; i++)
               		{
               			var treeItem = treeItems[i];
               			idArray.push(treeItem.getAttribute("documentId"));
               			labelArray.push(treeItem.getAttribute("documentLabel"));
               			htmllinkContent += treeItem.getAttribute("htmllink");
               			blockParamRefs += " " + treeItem.getAttribute("documentId");
               		}           		             	
                    	
                  	var dragData =
                       [
                            {
                                flavour: "listitem/id",
                                data: idArray
                            },
                            {
                                flavour: "listitem/label",
                                data: labelArray
                            },
                            {
                                flavour: "listitem/component",
                                data: components
                            },
                        ];  
                        
					var ids = [];  	
					for (var i=0; i < components.document.length(); i++)
					{
						var idtype = [components.document[i].component.(@name=="id").toString(),
							components.document[i].component.(@name=="type").toString()];
						ids.push(idtype);
					}
					dragData.push({flavour: "application/json-documentidtype-array", data: wCore.stringifyJSON(ids)});    

                    if (htmllinkContent)
                    {
                    	var htmllinkData = {
                        	flavour: "text/html",
                            data: htmllinkContent
                        };
                        dragData.push(htmllinkData);
                    }	
                    
                   	var selectedComponent = components.document[0].component;
                   	if (treeItems[0].hasAttribute("block"))
                    {
                    	var blockParams = {
                            lang: treeItems[0].getAttribute("lang"),
                           	type: treeItems[0].getAttribute("type"),
                            label: treeItems[0].getAttribute("label"),
                            }
                       	var blockType = blockParams.type.split('_');
                        blockParams.display = "class: " + blockType.join('-');
                        blockParams.ref = blockParamRefs;
                        var blockData = {
                    		flavour: "document/block",
                     	   data: objectToAssocString(blockParams)
                 	   };
					}
                    dragData.push(blockData);
                    return dragData;
                ]]></body>
			</method>

			<method name="hasSelectedDocument">
				<body><![CDATA[
					var tree = this.getElementById("searchTree");
           		 	var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
           		 	return currentelement.hasAttribute("documentId");
				]]></body>
			</method>
			
			<method name="locateCurrentResult">
				<body><![CDATA[
					var tree = this.getElementById("searchTree");
           		 	var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);
           			this.getModule().stopSearch();
           			locateDocumentInModule(currentelement.getAttribute("documentId"), currentelement.getAttribute("module"));
            	]]></body>
			</method>

			<method name="editCurrentResult">
				<body><![CDATA[
					var tree = this.getElementById("searchTree");
					var currentelement = tree.treeBoxObject.view.getItemAtIndex(tree.currentIndex);	
					var moduleName = currentelement.getAttribute("module");
					var destModule = getModuleByName(moduleName);
					if (destModule.getAttribute('version') === 'v3')
					{
						this.getModule().stopSearch();
						var uri = [moduleName, 'openDocument', currentelement.getAttribute("type"), currentelement.getAttribute("documentId")].join(',');
						openActionUri(uri);
					}
					else
					{
						this.removeAttribute('editcomponent');
           				this.setAttribute('editcomponent', this.buildXmlFromTreeItem(currentelement));
					}
            	]]></body>
			</method>
			
			<method name="buildXmlFromTreeItem">
				<parameter name="item"/>
				<body><![CDATA[
					var result = new XML('<documents><document index="1"/></documents>');
					result.document[0].component[0] = new XML('<component name="id"><![CDATA[' + item.getAttribute("documentId") + ']]'+'></component>');
					result.document[0].component[1] = new XML('<component name="lang"><![CDATA[' + item.getAttribute("lang") + ']]'+'></component>');
					result.document[0].component[2] = new XML('<component name="type"><![CDATA[' + item.getAttribute("type") + ']]'+'></component>');
					result.document[0].component[3] = new XML('<component name="parentid"><![CDATA[' + item.getAttribute("parentId") + ']]'+'></component>');
					result.document[0].component[4] = new XML('<component name="label"><![CDATA[' + item.getAttribute("documentLabel") + ']]'+'></component>');
					return result.toString();				
				]]></body>
			</method>
			
			<method name="buildXmlFromTreeItems">
				<parameter name="items"/>
				<body><![CDATA[
					var result = new XML('<documents />');
					for (var i = 0; i < items.length ;i++)
					{
						var item = items[i];
						result.document[i] = new XML('<document/>');
						result.document[i].component[0] = new XML('<component name="id"><![CDATA[' + item.getAttribute("documentId") + ']]'+'></component>');
						result.document[i].component[1] = new XML('<component name="lang"><![CDATA[' + item.getAttribute("lang") + ']]'+'></component>');
						result.document[i].component[2] = new XML('<component name="type"><![CDATA[' + item.getAttribute("type") + ']]'+'></component>');
						result.document[i].component[3] = new XML('<component name="parentid"><![CDATA[' + item.getAttribute("parentId") + ']]'+'></component>');
						result.document[i].component[4] = new XML('<component name="label"><![CDATA[' + item.getAttribute("documentLabel") + ']]'+'></component>');
						// We only display results that are available in the given lang anyway
						result.document[i].component[5] = new XML('<component name="langAvailable"><![CDATA[true]]'+'></component>');
						result.document[i].@index = i+1;
					}
					return result;				
				]]></body>
			</method>
			
			<method name="onFormSaveSucces">
				<body><![CDATA[
					this.refresh();
				]]></body>
			</method>
			
			<method name="onFormEditLoaded">
				<parameter name="form"/>
				<body><![CDATA[
					form.toolbar.createButton.setAttribute("collapsed", true);
				]]></body>
			</method>

			<method name="handleSort">
				<parameter name="treecol" />
				<body><![CDATA[
					if (!treecol.hasAttribute("sortonfield"))
					{
						return;
					}
					if (treecol == this.getElementById(this.sortOnColId))
					{
						if (treecol.getAttribute("sortDirection") == 'ascending')
						{
							treecol.setAttribute("sortDirection", 'descending');
						}
						else
						{
							treecol.setAttribute("sortDirection", 'ascending');
						}
					}
					else
					{
						this.getElementById(this.sortOnColId).removeAttribute("sortDirection");
						this.sortOnColId = treecol.getAttribute("anonid");
						treecol.setAttribute("sortDirection", 'ascending');
					}
					this.refresh();
				]]></body>
			</method>

			<method name="refresh">
				<parameter name="parameters" />
				<body><![CDATA[	
				if (this.inQueue)
				{
					window.clearTimeout(this.currentTimer);				
				}
				if (parameters)
				{
					this.searchParameters = parameters;
				}
				if (this.searchBox != null && 'setIsBusy' in this.searchBox)
				{
					this.searchBox.setIsBusy(true);
				}
				this.sendRequest();
				]]></body>
			</method>
			
			<method name="setLang">
				<parameter name="lang" />
				<body><![CDATA[
					if (this.searchParameters && 'lang' in this.searchParameters)
					{
						this.searchParameters['lang'] = lang;
					}
				]]></body>
			</method>
			
			<field name="searchBox">null</field>	
		
			<method name="search">
				<parameter name="string" />
				<parameter name="parameters" />
				<parameter name="searchBox" />
				<body><![CDATA[
				this.searchTerms = string;
				this.searchParameters = parameters;
				if (searchBox)
				{
					this.searchBox = searchBox;
				}
				if (this.searchBox != null && 'setIsBusy' in this.searchBox)
				{
					this.searchBox.setIsBusy(true);
				}
				this.sendRequest();
				]]></body>
			</method>
			<method name="cancel">
				<body><![CDATA[
					if (this.currentTimer)
					{
						clearTimeout(this.currentTimer);
						this.inQueue = false;
					}
				]]></body>
			</method>			
			<method name="sendRequest">
				<body><![CDATA[
					var xbl = this;
					if (this.searchTerms == "")
					{
						return;
					}
					var treecol = this.getElementById(this.sortOnColId);
					var sortOnField = treecol.getAttribute("sortonfield");
					var sortDirection = treecol.getAttribute("sortDirection");
					var parameters = this.searchParameters;
					parameters['module'] = 'solrsearch';
					parameters['action'] = 'SearchBackoffice';
					parameters['terms'] = this.searchTerms;
					parameters['sortOnField'] = sortOnField;
					parameters['sortDirection'] = sortDirection;
					parameters['limit'] = this.limit;
					if (!('lang' in parameters))
					{
						parameters['lang'] = this.getModule().getContextLang();
					}
					$.get("{HttpHost}/xul_controller.php?", parameters,
						function(data)
						{
							var xmlParser = new DOMParser();
							var xmlDoc = xmlParser.parseFromString(data, 'text/xml');
							xbl.updateResults(xmlDoc);
							if (xbl.searchBox != null && 'setIsBusy' in xbl.searchBox)
							{
								xbl.searchBox.setIsBusy(false);
							}
						}, 
						'text'
					);
					this.inQueue = false;
				]]></body>
			</method>
			
			<method name="getDocumentIdFromSolrResult">
				<parameter name="solrResult" />
				<body><![CDATA[
					return solrResult.getAttribute("id").split("/")[0];
				]]></body>
			</method>

			<method name="getDocumentTypeFromSolrResult">
				<parameter name="solrResult" />
				<body><![CDATA[
					return solrResult.getAttribute("documentModel").replace(/\//, "_");
				]]></body>
			</method>
			
			<method name="getDocumentLangFromSolrResult">
				<parameter name="solrResult" />
				<body><![CDATA[
					return solrResult.getAttribute("id").split("/")[1];
				]]></body>
			</method>
			
			<method name="getDocumentModuleFromSolrResult">
				<parameter name="solrResult" />
				<body><![CDATA[
					return solrResult.getAttribute("module");
				]]></body>
			</method>
			
			<method name="getDocumentLabelFromSolrResult">
				<parameter name="solrResult" />
				<body><![CDATA[
					return solrResult.getAttribute("label").replace(/\&\#39\;/g,"'");
				]]></body>
			</method>
			
			<method name="getDocumentParentIdFromSolrResult">
				<parameter name="solrResult" />
				<body><![CDATA[
					return solrResult.getAttribute("parentid");
				]]></body>
			</method>
			
			<method name="getBlockFromSolrResult">
				<parameter name="solrResult" />
				<body><![CDATA[
					return solrResult.getAttribute("block");
				]]></body>
			</method>
			
			<method name="getHtmllinkFromSolrResult">
				<parameter name="solrResult" />
				<body><![CDATA[
					return solrResult.getAttribute("htmllink");
				]]></body>
			</method>
			
			<method name="onEmptySearch">
				<body><![CDATA[
					this.cancel();
					var treechildren = this.getElementById("tree");
					var item = document.createElement("treeitem");
					var row = document.createElement("treerow");
					var cell = document.createElement("treecell");
					row.appendChild(cell);
					$(this.getElementById("tree")).empty();
					cell = document.createElement("treecell");
					row.appendChild(cell);
					cell = document.createElement("treecell");
					row.appendChild(cell);
					item.appendChild(row);

					cell.setAttribute("label", "&amp;modules.uixul.bo.general.search.NoSearchString;");
					treechildren.appendChild(item);				
					]]></body>
			</method>
			<method name="updateResults">
				<parameter name="xmlDoc" />
				<body><![CDATA[
					var treechildren = this.getElementById("tree");
					var importedNode = this.ownerDocument.importNode(xmlDoc.documentElement, true);
					$(this.getElementById("tree")).empty();
					var totalResultsCount = parseInt(importedNode.getAttribute("totalCount"));
					var resultsCount = parseInt(importedNode.getAttribute("count"));
					var item = document.createElement("treeitem");
					var row = document.createElement("treerow");
					var cell = document.createElement("treecell");
					row.appendChild(cell);
					
					cell = document.createElement("treecell");
					row.appendChild(cell);
					cell = document.createElement("treecell");
					cell.setAttribute("properties", "searchresults-header");
					row.appendChild(cell);
					item.appendChild(row);
					if (resultsCount == 0)
					{
						cell.setAttribute("label", "&amp;modules.uixul.bo.general.search.NoResults;");
					}
					else if (resultsCount == totalResultsCount)
					{
						cell.setAttribute("label", "&amp;modules.uixul.bo.general.search.SearchResultCountLabel;" + " " + totalResultsCount);
					}
					else
					{
						cell.setAttribute("label", "&amp;modules.uixul.bo.general.search.FirstHundred;" + " (" +"&amp;modules.uixul.bo.general.search.TotalSearchResultCountLabel;" + totalResultsCount + " )");
					}
					treechildren.appendChild(item);
					var xbl = this;
					$("doc", importedNode).each(function(i){
						treechildren.appendChild(xbl.buildTreeItemFormSolrResult(this));
					});
				]]></body>
			</method>
			
			<method name="buildTreeItemFormSolrResult">
				<parameter name="solrResult" />
				<body><![CDATA[
						var item = document.createElement("treeitem");
						item.setAttribute("type", this.getDocumentTypeFromSolrResult(solrResult));
						item.setAttribute("documentId", this.getDocumentIdFromSolrResult(solrResult));
						item.setAttribute("lang", this.getDocumentLangFromSolrResult(solrResult));
						item.setAttribute("module", this.getDocumentModuleFromSolrResult(solrResult));
						item.setAttribute("documentLabel", this.getDocumentLabelFromSolrResult(solrResult));
						item.setAttribute("parentId", this.getDocumentParentIdFromSolrResult(solrResult));
						item.setAttribute("block", this.getBlockFromSolrResult(solrResult));
						item.setAttribute("htmllink", this.getHtmllinkFromSolrResult(solrResult));
						var row = document.createElement("treerow");
						
						// publicationstatus
						var cell = document.createElement("treecell");
						cell.setAttribute("properties", solrResult.getAttribute("publicationstatus"));
						//cell.setAttribute("label", );
						row.appendChild(cell);
						
						//score 
						var cell = document.createElement("treecell");
						cell.setAttribute("label", solrResult.getAttribute("normalizedScore") + '%');
						row.appendChild(cell);
						
						// Label
						var cell = document.createElement("treecell");
						cell.setAttribute("properties", this.getDocumentTypeFromSolrResult(solrResult));
						cell.setAttribute("label",  this.getDocumentLabelFromSolrResult(solrResult));
						row.appendChild(cell);
						
						// patch
						var cell = document.createElement("treecell");
						cell.setAttribute("label", solrResult.getAttribute("documentpath"));
						row.appendChild(cell);
						

						
						// modificationdate
						var cell = document.createElement("treecell");
						cell.setAttribute("label", solrResult.getAttribute("modificationdate"));
						row.appendChild(cell);
						
						// creationdate
						var cell = document.createElement("treecell");
						cell.setAttribute("label", solrResult.getAttribute("creationdate"));
						row.appendChild(cell);
						
						item.appendChild(row);				
						return item;
				]]></body>
			</method>

			<method name="reset">
				<body><![CDATA[
					$(this.getElementById("tree")).empty();
				]]></body>
			</method>

			<method name="setLimit">
				<parameter name="value" />
				<body><![CDATA[
					this.limit = value;
				]]></body>
			</method>
			
			<method name="hideColumns">
				<parameter name="colArray" />
				<body><![CDATA[
					for (var i = 0 ; i < colArray.length; i++)
					{
						if ('columnPicker' == colArray[i])
						{
							this.getElementById('searchTree').setAttribute("hidecolumnpicker", "true");
						}
						if (this.getElementById(colArray[i]) != undefined)
						{
							this.getElementById(colArray[i]).setAttribute("collapsed", "true");
						}
					}
				]]></body>
			</method>
		</implementation>
		<xbl:content
			xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
			xmlns:xbl="http://www.mozilla.org/xbl">
			<tree anonid="searchTree" flex="1" xbl:inherits="seltype">
				<treecols anonid="treecols" style="min-height:24px">
				   <treecol anonid="publicationstatus"
				  			class="treecol-image"
							label="&amp;modules.uixul.bo.general.Publicated;" 
							src="{IconsBase}/small/eyeglasses.png"
							tooltiptext="&amp;modules.uixul.bo.general.Publicated-tooltip;"
							style="padding-right: 5px;" />
					<treecol sortonfield="score" anonid="scoreColumn"
						label="&amp;modules.uixul.bo.general.search.Score;" sortDirection="descending" />
					<treecol sortonfield="label" flex="8"
						anonid="labelColumn" label="&amp;modules.uixul.bo.general.search.Label;" />
					<treecol flex="6" anonid="documentPath" label="&amp;modules.uixul.bo.general.search.DocumentPath;" />
					<treecol sortonfield="modificationdate" flex="1"
						anonid="modificationdateColumn" label="&amp;modules.uixul.bo.general.search.Modificationdate;" />
					<treecol sortonfield="creationdate" flex="1"
						anonid="creationdateColumn" label="&amp;modules.uixul.bo.general.search.Creationdate;" />
				</treecols>
				<treechildren anonid="tree" />
			</tree>
			<popupset anonid="contextualMenuPopupset">
				<popup anonid="contextualMenuSearchResults">
					<menuitem style="font-weight:bolder" class="menuitem-iconic"
						label="&amp;modules.uixul.bo.general.search.EditDocumentEllipsis;"
						image="{IconsBase}/small/shadow/edit.png"
						oncommand="editCurrentResult();" />
					<menuitem class="menuitem-iconic"
						label="&amp;modules.uixul.bo.general.search.LocateDocumentEllipsis;"
						image="{IconsBase}/small/shadow/view.png"
						oncommand="locateCurrentResult();" />
				</popup>
			</popupset>
		</xbl:content>
	</binding>
</bindings>