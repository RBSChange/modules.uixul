<?xml version="1.0" encoding="utf-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xbl="http://www.mozilla.org/xbl">

<!--
wMultitree
	@author INTcourS
	@date   2006-06-15

	Multi tree view.
-->
	<binding id="wMultitree" inheritstyle="true" extends="widgets.wWidget#wWidget">

		<implementation>

		    <field name="_availableActions">[ ]</field>
			<field name="_availableColumns">[ ]</field>
			<field name="_dataSources">[ ]</field>
			<field name="_treeDataSources">[ ]</field>
			<field name="_listDataSources">[ ]</field>
			<field name="_trees">[ ]</field>
			<field name="_deckIndex">0</field>
			<field name="_currentTree">0</field>
			<field name="_currentTreeName">null</field>

            <constructor><![CDATA[
                this.__setupActions();
				this.__setupColumns();
				this.__setupDatasource();
				var multitree = this;
                for (var i = 0; i < this._dataSources.length; i++)
                {
                    this._treeDataSources[i] = {
                        module: this._dataSources[i].module,
                        components: this._dataSources[i].treecomponents,
                        parser: this._dataSources[i].treeparser,
                        order: this._dataSources[i].treeorder,
                        treeFilter: this._dataSources[i].treefilter
                    };
                    if (!this._dataSources[i].treeparser)
                    {
                        this._treeDataSources[i].parser = 'Xml';
                    }
                    this._listDataSources[i] = {
                        module: this._dataSources[i].module,
                        components: this._dataSources[i].listcomponents,
                        parser: this._dataSources[i].listparser,
                        order: this._dataSources[i].listorder,
                        treeFilter: this._dataSources[i].listfilter
                    };
                    if (!this._dataSources[i].listparser)
                    {
                        this._listDataSources[i].parser = 'XmlList';
                    }
                    var id = this.getAttribute("id") + "_" + this._dataSources[i].module + "_" + i;
                    this._trees.push({
                        module: this._dataSources[i].module,
                        label: this._dataSources[i].label,
                        icon: this._dataSources[i].icon,
                        documentTypes: this._dataSources[i].listcomponents.split(/,/),
                        index: i,
                        opened: false,
                        deckIndex: null,
                        id: id
                    });
                    var menuItem = document.createElement("menuitem");
                    menuItem.setAttribute("class", "menuitem-iconic");
                    menuItem.setAttribute("label", this._dataSources[i].label);
                    menuItem.setAttribute("image", this._dataSources[i].icon);
                    menuItem.setAttribute("index", i);
                    menuItem.setAttribute("module", this._dataSources[i].module);
                    var onCommand = function (event)
                    {
                        multitree.openTree(this.getAttribute("index"));
                    }
                    wCore.addEventListener(menuItem, "command", onCommand);
                    this.getElementById("multiTreePopup").appendChild(menuItem);
                }
                this.getElementById("multiTreeTitle").setAttribute("value", this.getAttribute("title"));
                wCore.executeOnMethodExists(this.getElementById("searchResults"), 'hideColumns', function(xbl){
                	xbl.hideColumns(['scoreColumn', 'documentPath', 'modificationdateColumn', 'creationdateColumn', 'columnPicker']);
                });
            	this.getElementById("resetButton").setAttribute("disabled", true);
            ]]></constructor>

            <method name="getTreeDataByIndex">
				<parameter name="multitreeIndex" />
				<body><![CDATA[
					var treeData = null;
					for (var i = 0; i < this._trees.length; i++)
					{
					   if (this._trees[i].index == multitreeIndex)
					   {
					       treeData = this._trees[i];
					       break;
					   }
					}
					return treeData;
				]]></body>
			</method>

			<method name="setTreeDataByIndex">
				<parameter name="multitreeIndex" />
				<parameter name="data" />
				<parameter name="value" />
				<body><![CDATA[
					for (var i = 0; i < this._trees.length; i++)
					{
					   if (this._trees[i].index == multitreeIndex)
					   {
					       this._trees[i][data] = value;
					       break;
					   }
					}
				]]></body>
			</method>

            <method name="isOpened">
				<parameter name="multitreeIndex" />
				<body><![CDATA[
					var treeData = this.getTreeDataByIndex(multitreeIndex);
					if (treeData)
					{
					   return treeData.opened;
					}
					return false;
				]]></body>
			</method>

			<method name="getTreeIndexByModel">
				<parameter name="model" />
				<body><![CDATA[
					var index = -1;
					for (var i=0 ; i<this._trees.length && index == -1 ; i++)
					{
						if (in_array(model, this._trees[i].documentTypes))
						{
							index = i;
						}
					}
					return index;
				]]></body>
			</method>


			<method name="openTreeIndexByModel">
				<parameter name="model" />
				<body><![CDATA[
					var index = this.getTreeIndexByModel(model);
					if (index != -1)
					{
						return this.openTree(index);
					}
					return null;
				]]></body>
			</method>

<!--
 @deprecated: use getTreeIndexByModel
-->
			<method name="getIndexForModule">
				<parameter name="module" />
				<body><![CDATA[
					var index = -1;
					for (var i=0 ; i<this._trees.length && index == -1 ; i++)
					{
						if (this._trees[i].module == module)
						{
							index = i;
						}
					}
					return index;
				]]></body>
			</method>

<!--
 @deprecated: use openTreeIndexByModel
-->
            <method name="openTreeByModuleName">
				<parameter name="moduleName" />
				<body><![CDATA[
					var index = this.getIndexForModule(moduleName);
					if (index != -1)
					{
						return this.openTree(index);
					}
					return null;
				]]></body>
			</method>

			<method name="openTree">
				<parameter name="multitreeIndex" />
				<body><![CDATA[
				    try {
				 		if (!this.getElementById("multiTreeMessage").hasAttribute("collapsed"))
				 		{
				 			this.getElementById("multiTreeMessage").setAttribute("collapsed", "true");
				 			this.getElementById("searchButton").removeAttribute("disabled");
				 		}
    				    
    				    if (this.getElementById("multiTreeDeck").hasAttribute("collapsed"))
    				    {
    				    	this.getElementById("multiTreeDeck").removeAttribute("collapsed")
    				    }
    				    
    				    if (this.getElementById("deckSplitter").hasAttribute("collapsed"))
    				    {
    				    	this.getElementById("deckSplitter").removeAttribute("collapsed");
    				    }
    				    var treeData;
    				    if (this.isOpened(multitreeIndex))
    				    {
    				        treeData = this.getTreeDataByIndex(multitreeIndex);
    				        this.getElementById('multiTreeDeck').selectedIndex = treeData.deckIndex;
    				        this.getElementById('treeDeck').selectedIndex = treeData.deckIndex;
    				        this.getElementById("multiTreeTitle").setAttribute("value", treeData.label);
    				        this.getElementById("multiTreeButton").setAttribute("image", treeData.icon);
    				        var tree = this.getElementById('multiTreeDeck').selectedPanel.getElementsByTagName("wlist");
    				        this._currentTree = tree[0];
    				        this._currentTree._multitree = this;
    				    }
    				    else
    				    {
    				        var multitree = this;
                            treeData = this.getTreeDataByIndex(multitreeIndex);

    				        var treeBox = document.createElement('vbox');
    				        treeBox.setAttribute("flex", "1");

    				        var treeToolbar = document.createElement('wtoolbar');
    				        treeToolbar.setAttribute("id", treeData.id + "Toolbar");
    				        treeToolbar.setAttribute("collapsed", "true");
    				        treeToolbar.setAttribute("attachment", treeData.id);
    				        this.getElementById("multiTreeTitle").setAttribute("value", treeData.label);
    				        this.getElementById("multiTreeButton").setAttribute("image", treeData.icon);
    				        treeBox.appendChild(treeToolbar);

                            var tree = document.createElement('wtree');
                            for (var i = 0; i < this.attributes.length; i++)
                            {
                                switch (this.attributes[i].name)
                                {
                                    case "anonid":
                                    case "xmlns":
                                    case "xbl":
                                    case "id":
                                    case "title":
                                        break;
                                    default:
                                        tree.setAttribute(this.attributes[i].name, this.attributes[i].value);
                                        break;
                                }
                            }
                            tree.setAttribute("in-multi-tree", "true");
                            tree.setAttribute("id", treeData.id);
                            tree.setAttribute("flex", "1");
                            tree.setAttribute("hideheader", "true");
                            tree._multitreeIndex = multitreeIndex;
                            tree.__setupActions = function ()
                            {
                                this._availableActions = multitree.getAvailableActions(this._multitreeIndex);
                            }
            				tree.__setupColumns = function ()
                            {
                                this._availableColumns = multitree.getAvailableColumns(this._multitreeIndex);
                            }
            				tree.__setupDatasource = function ()
                            {
                                this._dataSource = multitree.getTreeDatasource(this._multitreeIndex);
                            }
                            tree._multitree = this;
                            tree._relatedBinding = this;
                            treeBox.appendChild(tree);
							this.getElementById('treeDeck').appendChild(treeBox);
							
							// "List" part
							treeBox = document.createElement('vbox');
    				        treeBox.setAttribute("flex", "1");
    				        
                            var _listDs = multitree.getListDatasource(multitreeIndex);

                            if (_listDs.components)
                            {
                                //var splitter = document.createElement('splitter');
                                //splitter.setAttribute("class", "multi-tree-splitter");
                                //treeBox.appendChild(splitter);

                                var list = document.createElement('wlist');
                                for (var i = 0; i < this.attributes.length; i++)
                                {
                                    switch (this.attributes[i].name)
                                    {
                                        case "anonid":
                                        case "xmlns":
                                        case "xbl":
                                        case "id":
                                        case "title":
                                            break;
                                        default:
                                            list.setAttribute(this.attributes[i].name, this.attributes[i].value);
                                            break;
                                    }
                                }
                                list.setAttribute("disablefilter", "true");
                                list.setAttribute("id", treeData.id + "List");
                                list.setAttribute("in-multi-tree", "true");
                                list.setAttribute("flex", "2");
                                list.setAttribute("attachment", treeData.id);
                                list.setAttribute("hideheader", "true");
                                treeBox.setAttribute("baseModule", treeData.module);
                                list._multitreeIndex = multitreeIndex;
                                list.__setupActions = function ()
                                {
                                    this._availableActions = multitree.getAvailableActions(this._multitreeIndex);
                                }
                				list.__setupColumns = function ()
                                {
                                    this._availableColumns = multitree.getAvailableColumns(this._multitreeIndex);
                                }
                				list.__setupDatasource = function ()
                                {
                                    this._dataSource = multitree.getListDatasource(this._multitreeIndex);
                                }
                                list._multitree = this;

                                list._relatedTree = tree;

                                treeBox.appendChild(list);

                                this._currentTree = list;
                            }
                            else
                            {
                                tree._relatedTree = null;

                                this._currentTree = tree;
                            }

                            this.setTreeDataByIndex(multitreeIndex, "opened", true);
                            this.setTreeDataByIndex(multitreeIndex, "deckIndex", this._deckIndex);
                            this.getElementById('multiTreeDeck').appendChild(treeBox);
                            this.getElementById('multiTreeDeck').setAttribute("selectedIndex", this._deckIndex);
                            this.getElementById('treeDeck').setAttribute("selectedIndex", this._deckIndex);
                            this._deckIndex++;

                            try
    				        {
    				            treeToolbar.hideRefresh();
    				        }
    				        catch (e)
    				        {
								wCore.error("wMultitree.openTree", [multitreeIndex], e);
    				        }
                        }

                        this._currentTreeName = treeData.module;
                        this.setAttribute('current-tree', this._currentTreeName);
                        if (this.isSearchToggled())
                        {
                        	this.search();
                        }
                    }
                    catch (e)
                    {
						wCore.error("wMultitree.openTree", [multitreeIndex], e);
                    }
                ]]></body>
			</method>

            <method name="getAvailableActions">
				<parameter name="multitreeIndex" />
				<body><![CDATA[
					return this._availableActions;
				]]></body>
			</method>

			<method name="getAvailableColumns">
				<parameter name="multitreeIndex" />
				<body><![CDATA[
					return this._availableColumns;
				]]></body>
			</method>

			<method name="getTreeDatasource">
				<parameter name="multitreeIndex" />
				<body><![CDATA[
			         return this._treeDataSources[multitreeIndex];
				]]></body>
			</method>

			<method name="getListDatasource">
				<parameter name="multitreeIndex" />
				<body><![CDATA[
			         return this._listDataSources[multitreeIndex];
				]]></body>
			</method>

			<method name="openPreviewPanel">
                <parameter name="listWidget" />
                <body><![CDATA[
                    if (this._currentTree && this._currentTree.refresh)
                    {
                        this._currentTree.openPreviewPanel();
                    }
                ]]>
                </body>
            </method>
			
			<method name="onSelect">
				<parameter name="listWidget" />
				<body><![CDATA[
					this.getElementById("searchResults").refresh(this.getSearchParameters());
				]]></body>
			</method>
            <method name="refresh">
                <parameter name="listWidget" />
                <body><![CDATA[
                    if (this._currentTree && this._currentTree.refresh)
                    {
                        this._currentTree.refresh();
                    }

                    if (this._currentTree._relatedTree && this._currentTree._relatedTree.refresh)
                    {
                        try
                        {
                            var selectedIndex = this._currentTree._relatedTree.tree.view.selection.currentIndex;
                            this._currentTree._relatedTree.selectByRow(selectedIndex - 1);
                        }
                        catch (e)
                        {
							wCore.error("wMultitree.refresh", [listWidget], e);
                        }

                        this._currentTree._relatedTree.refresh();
                    }
                    
                    this.getElementById("searchResults").refresh(this.getSearchParameters());
                ]]>
                </body>
            </method>

   			<method name="hide">
            	<body><![CDATA[
            		this.setAttribute('collapsed', 'true');
            		this.removeAttribute('current-tree');
            	]]></body>
            </method>

            <method name="show">
            	<body><![CDATA[
            		this.removeAttribute('collapsed');
                    this.setAttribute('current-tree', this._currentTreeName);
            	]]></body>
            </method>
                       
            <method name="toggleSearch">
          		<body><![CDATA[
	          		if (!this._currentTree)
	          		{
	          			return;
	          		}
	          		
          			if (this.getElementById("globalDeck").selectedIndex != 1)
          			{
          				this.getElementById("globalDeck").selectedIndex = 1;
          				//this.getElementById("globalDeck").setAttribute("flex", 4);
          			}
          			else
          			{
          				this.reset();
          				this.getElementById("globalDeck").selectedIndex = 0;
          				//this.getElementById("globalDeck").setAttribute("flex", 2);
          			}
          		]]></body>
            </method>
            
            <method name="isSearchToggled">
            	<body><![CDATA[
            		return this.getElementById("globalDeck").selectedIndex == 1;
          		]]></body>
            </method>
            <method name="setIsBusy">
				<parameter name="val" />
				<body><![CDATA[
					if (val == true)
					{
						this.getElementById("searchBox").setAttribute("class", "busy wsearchbox");	
					}
					else
					{
						this.getElementById("searchBox").setAttribute("class", "wsearchbox");
					}
				]]></body>
			</method>
			
            <field name="startSearchTimeout">null</field>
            
            <method name="search">
				<body><![CDATA[
					this.getElementById("resetButton").removeAttribute("disabled");
				
					var string = this.getElementById("searchText").value;
					if (string == "")
					{
						this.reset();
					}
					else
					{
						if (this.startSearchTimeout != null)
						{
							window.clearTimeout(this.startSearchTimeout);
							this.startSearchTimeout = null;
						}
						var xbl = this;
						xbl.startSearchTimeout = window.setTimeout(function(){
							xbl.getElementById("resetButton").removeAttribute("disabled");
							xbl.getElementById("searchResults").search(string, xbl.getSearchParameters(), xbl)
						}, 400);	
					}
				]]></body>
			</method>

			<method name="getSearchParameters">
				<body><![CDATA[
					var parameters = {};
					var selectedPanel = this.getElementById('multiTreeDeck').selectedPanel;
					if (selectedPanel != undefined)
					{
						if (selectedPanel.hasAttribute("baseModule"))
						{
							parameters['baseModule'] = selectedPanel.getAttribute("baseModule");
						}
						var tree = $('wtree', this.getElementById('treeDeck').selectedPanel).get(0);
						if (tree  && 'getSelectedComponents' in tree)
						{
           		 			var currentElements = tree.getSelectedComponents();
           		 			if (currentElements && currentElements.document != undefined)
           		 			{
           		 				parameters['parentId'] = currentElements.document[0].component.(@name=="id").toString();
           		 			}
							parameters['lang'] = this.getModule().getContextLang(tree);
						}
					}
					return parameters;
				]]></body>
			</method>

			
			<method name="reset">
				<body><![CDATA[
					this.getElementById("resetButton").setAttribute("disabled", true);
					this.getElementById("searchText").value = "";
					this.getElementById("searchResults").reset();
				]]></body>
			</method>

			<method name="onSearchOptionsChanged">
				<parameter name="parameters" />
				<body><![CDATA[
					this.getElementById("searchResults").refresh(this.getSearchParameters());
				]]></body>
			</method>

		</implementation>

		<xbl:content
			xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
			xmlns:xbl="http://www.mozilla.org/xbl">
			<vbox anonid="container" xbl:inherits="flex,width" class="change-toolbox-rsctree">
			    <toolbox class="change-toolbox-dark" style="height: 20px; padding-top: 0px;">
					<toolbar class="change-toolbar">
					    <toolbarbutton anonid="refreshButton" image="{IconsBase}/small/refresh.png" oncommand="refresh()" />
					    <toolbarbutton anonid="multiTreeButton" image="{IconsBase}/small/windows.png" oncommand="refresh()" type="menu">
							<menupopup anonid="multiTreePopup">
							</menupopup>
						</toolbarbutton>
						<toolbarbutton disabled="true" anonid="searchButton" image="{IconsBase}/small/view.png" oncommand="toggleSearch()" tooltiptext="&amp;modules.uixul.bo.general.ToggleSearchResourceModeEllipsis;" />
						<spacer flex="1" />
						<label class="toolbarLabel" anonid="multiTreeTitle" style="font-size: 1.3em;"/>
					</toolbar>
				</toolbox>
				<!--  -->
					<vbox flex="1">
						<groupbox anonid="multiTreeMessage">
					   		<caption><image src="{IconsBase}/small/information.png"/></caption>
		   			   		<description class="resourceTreeMessage" style="margin-bottom: 16px;">&amp;modules.generic.backoffice.ResourceTreeMessage;</description>
			        	</groupbox>
			        	<deck anonid="treeDeck" flex="1" />
			        	<splitter anonid="deckSplitter" class="multi-tree-splitter" collapsed="true"/>
						<deck anonid="globalDeck" selectedIndex="0"  flex="2">
	    					<deck anonid="multiTreeDeck"  collapsed="true" />
	    					<vbox flex="1" anonid="searchZone">
								<toolbar anonid="searchToolbar" orient="horizontal" dir="normal" style="background-color:#EEE; -moz-outline:1px solid #CCC; min-height:32px">
									<hbox flex="1" style="padding-top:3px">	
										<spacer flex="1" />
										<hbox anonid="searchBox" align="center" class="wsearchbox">
											<textbox style="-moz-appearance:none; max-height:18px; height:18px; border:none; padding:0; margin-top: 1px; font-size:8pt; font-weight:normal"  anonid="searchText" maxlength="100" width="134px" oninput="search()" tooltiptext="&amp;modules.uixul.bo.general.SearchResourcesBackofficeEllipsis;"/>
											<toolbarbutton anonid="resetButton" class="activity-stop" oncommand="toggleSearch()" style="margin-top:1px;" tooltiptext="&amp;modules.uixul.bo.general.BackToListModeEllipsis;"/>
										</hbox>
									</hbox>
								</toolbar>
								<wsearchresults anonid="searchResults" flex="1" disablecontextmenu="true"/>
							</vbox>
						</deck>
					</vbox> 
			</vbox>
	   </xbl:content>
	</binding>
</bindings>
