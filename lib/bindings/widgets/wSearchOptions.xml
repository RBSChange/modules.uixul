<?xml version="1.0" encoding="UTF-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="wSearchOptions">
		<implementation>
			<field name="_moduleElement">null</field>

			<constructor><![CDATA[
				// find the parent module object
				var parent = this;
				while (parent && this._moduleElement == null)
				{
					if (parent.tagName && parent.tagName == 'wmodule')
					{
						this._moduleElement = parent;
					}
					parent = parent.parentNode;
				}
				
				this.resetModuleOption();
				this.initModuleList();
			]]></constructor>

			<method name="getElementByAnonid">
				<parameter name="id" />
				<body><![CDATA[
					return document.getAnonymousElementByAttribute(this, "anonid", id);
				]]></body>
			</method>

			<method name="getModule">
				<body><![CDATA[
					return this._moduleElement;
				]]></body>
			</method>


			<method name="resetModuleOption">
				<body><![CDATA[
					var element = this.getElementByAnonid('menucontainer');
					wCore.debug('length: '+element.childNodes.length);
				   	for (var i = 0; i < element.childNodes.length; i++)
					{	
						var menuitem = element.childNodes[i];
						wCore.debug('tagName: '+menuitem.tagName);
						if (menuitem.tagName === 'xul:menuitem')
						{
							this.getElementByAnonid("moduleList").selectedItem =  menuitem;
							return;
						}
					}
				]]></body>
			</method>

			<method name="setModuleOption">
				<parameter name="moduleName" />
				<body><![CDATA[
					wCore.debug('wSearchOptions.setModuleOption ' + moduleName);
					var element = this.getElementByAnonid('menucontainer');
				   	for (var i = 0; i < element.childNodes.length; i++)
					{	
						var menuitem = element.childNodes[i];
						if (menuitem.tagName === 'xul:menuitem' && menuitem.getAttribute("value") == moduleName)
						{
							this.getElementByAnonid("moduleList").selectedItem =  menuitem;
							return;
						}
					}
					this.resetModuleOption();
				]]></body>
			</method>

			<method name="initModuleList">
				<body><![CDATA[
					var element = this.getElementByAnonid('menucontainer');
					var controller = getController();
					moduleName = "";
					for (var i = 0; i < element.childNodes.length; i++)
					{	
						var menuitem = element.childNodes[i];
						if (menuitem.tagName === 'xul:menuitem')
						{
							var moduleName = menuitem.getAttribute("value");
							if (moduleName !== "" && !controller.checkModuleAsRessource(moduleName))
							{
								menuitem.setAttribute('collapsed', 'true');							
							}
						}
					}
				]]></body>
			</method>

			<method name="getSearchParameters">
				<body><![CDATA[
					var moduleList = this.getElementByAnonid("moduleList");
					if (moduleList.selectedItem)
					{
						return {baseModule: moduleList.selectedItem.value};
					}
					return {};
				]]></body>
			</method>

			<method name="optionsChanged">
				<body><![CDATA[
					this.getModule().onSearchOptionsChanged(this.getSearchParameters());
				]]></body>
			</method>

			<method name="addOption">
				<body><![CDATA[
					var option = document.createElement("wsearchoption");
					this.appendChild(option);
				]]></body>
			</method>
		</implementation>
		<content>
			<xul:toolbox anonid="top-toolbox" orient="vertical" dir="normal" flex="1">
				<xul:toolbar flex="1" style="background-color: #EEE;outline: 1px solid #CCC">
					<xul:label value="${trans:m.uixul.bo.general.search.documentbelongsto,ucf,lab,attr}" style="padding-top:4px" />
					<xul:menulist anonid="moduleList" oncommand="optionsChanged()">
						<xul:menupopup anonid="menucontainer">
							<xul:menuitem label="${trans:m.uixul.bo.general.search.anymodule,ucf,attr}" value="" />
							{MODULESLIST}
						</xul:menupopup>
					</xul:menulist>
					<xul:spacer flex="1" />
				</xul:toolbar>
			</xul:toolbox>
			<children />
		</content>
	</binding>
</bindings>