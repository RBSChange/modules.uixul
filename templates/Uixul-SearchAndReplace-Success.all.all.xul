<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<tal:block>
	${cssInclusion}
	<window change:i18nattr="title &modules.uixul.bo.richtext.ReplaceTitle;" orient="vertical"
		    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" onload="init();">
	
		<script tal:replace="scriptInclusion" />
	
		<script type="text/javascript"><![CDATA[
		    var param = null;
		    
		    var storedSearch = [];
		    var storedReplace = [];
	
	        function init()
	        {
	            param = wToolkit.getDialogParam();
	            if (param.find)
	            {
	            	document.getElementById("search-input").value = param.find;
	            }
	            
	            var storageSearchItem = wToolkit.getStoredItem("richtextSearchItems");            
	            if (storageSearchItem)
	            {
	            	for (i in storageSearchItem)
	            	{
	            		storedSearch.push(storageSearchItem[i]);
	            	}
	            }
	            
	            var storageReplaceItem = wToolkit.getStoredItem("richtextReplaceItems");            
	            if (storageReplaceItem)
	            {
	            	for (i in storageReplaceItem)
	            	{
	            		storedReplace.push(storageReplaceItem[i]);
	            	}
	            }
	            
	            updateSearchField();            
	            updateReplaceField();
	        }
	
	        function doReplace(quiet, aBackwards)
	        {  
	        	var replacementString = trim(document.getElementById("replace-input").value);
	        	
	        	updateReplaceField(replacementString);
	        	
	        	var currentSelection = param.richtext.getCurrentSelection();
	       		currentSelection.range.deleteContents();
	       		var replacement = param.richtext.editorDocument.createTextNode(replacementString);
	       		currentSelection.range.insertNode(replacement);
				currentSelection.selection.removeAllRanges();
				currentSelection.range = param.richtext.editorDocument.createRange();
				currentSelection.range.setStart(replacement, 0);
	 			currentSelection.range.setEnd(replacement, replacementString.length);
	 			currentSelection.selection.addRange(currentSelection.range);
	 			if (aBackwards)
	 			{
	 				currentSelection.selection.collapseToStart();
	 			}
	 			else
	 			{
	 				currentSelection.selection.collapseToEnd();
	 			}
	
	            if (!quiet && 'updateStatus' in param.richtext)
	        	{
	        	    param.richtext._hasModifications = true;
	        		param.richtext.updateStatus(true);
	            }
	        }
	
	        function replaceAll()
	        {        
	           
	        	var inputString = trim(document.getElementById("search-input").value);
	
	        	var count = 0;
	
	        	if (inputString)
	        	{       
	        		updateSearchField(inputString);
	        					        		
	        		for (var i = 0; i < 2; i++)
	        		{
	        			var currentSelection = param.richtext.getCurrentSelection();
	    				currentSelection.selection.removeAllRanges();
	    			
			       		var found = true;
			       		
			       		if (i == 0)
			       		{
			       			var aBackwards = false;
			       		}
			       		else
			       		{
			       			var aBackwards = true;
			       		}
						var contwindow = (param.richtext.editorWindow) ? param.richtext.editorWindow : param.richtext.editor.contentWindow;
		        		while (found)
			       		{
			       			found = contwindow.find(inputString,
		                        document.getElementById("case-sensitive").checked,
		                        aBackwards, false, false, false, false);
		
				        	if (found)
				        	{
				        		doReplace(true, aBackwards);
				        		count++;
				        	}
			       		}
			       	}
	
		       		alert(count + ' ' + document.getElementById("alert").value);
					if ('updateStatus' in param.richtext)
					{
		       			param.richtext._hasModifications = true;
	       				param.richtext.updateStatus(true);
					}
	       		}
	        }
	
	        function doFind()
	        {
	           
			    disableReplace();
	
	        	var found = false;
	
	        	var inputString = trim(document.getElementById("search-input").value);
	
	        	if (inputString)
	        	{
	        		updateSearchField(inputString);
	        		var contwindow = (param.richtext.editorWindow) ? param.richtext.editorWindow : param.richtext.editor.contentWindow;
	        		found = contwindow.find(inputString,
	                    document.getElementById("case-sensitive").checked,
	                    false, true, false, false, false);
	        	}
	
	        	if (!found)
	        	{
	        		alert(document.getElementById("find-end").value);
	        		var currentSelection = param.richtext.getCurrentSelection();
	    			currentSelection.selection.removeAllRanges();
	        	}
	        	else
	        	{
	        		enableReplace();
	        	}
	        }
	
	        function enableReplace()
	        {
	        	document.getElementById("replace-and-find").removeAttribute("disabled");
	        	document.getElementById("replace").removeAttribute("disabled");
	        }
	
	        function disableReplace()
	        {
	        	document.getElementById("replace-and-find").setAttribute("disabled", "true");
	        	document.getElementById("replace").setAttribute("disabled", "true");
	        }
	        
	        function updateSearchField(string)
	        {
	        	if (string && storedSearch.indexOf(string) == -1)
	        	{
	        		storedSearch.push(string);
	        		wToolkit.setStoredItem("richtextSearchItems", storedSearch); 
	        	}
	        	
	        	var list = document.getElementById('search-input');
	 			list.removeAllItems();
	            for (var i in storedSearch)
	            {
	            	list.insertItemAt(0, storedSearch[i], storedSearch[i]);
	            }  	
	            if (string)
	        	{ 
	        		list.value = string;
	        	}
	        }
	        
	        function updateReplaceField(string)
	        {
	        	if (string && storedSearch.indexOf(string) == -1)
	        	{
	        		storedReplace.push(string);
	        		wToolkit.setStoredItem("richtextReplaceItems", storedReplace); 
	        	}
	        	
	        	var list = document.getElementById('replace-input');
	 			list.removeAllItems();
	            for (var i in storedReplace)
	            {
	            	list.insertItemAt(0, storedReplace[i], storedReplace[i]);
	            }   	
	            if (string)
	        	{ 
	        		list.value = string;
	        	}   	
	        }
	        
	        function clearHistory()
	        {
	        	wToolkit.setStoredItem("richtextSearchItems", []);
	      		wToolkit.setStoredItem("richtextReplaceItems", []);
	       		updateSearchField();
	       		updateReplaceField();
	        }        
		]]></script>
	
		<vbox id="container" flex="1">
			<hbox align="center">
				<spacer flex="1"/>
				<image change:img="icon/small/richtext/search-replace.png" />
				<label class="toolbarLabel" change:i18nattr="value &modules.uixul.bo.richtext.ReplaceTitle;" />
				<spacer flex="1"/>
			</hbox>
			<spacer flex="1"/>
			<grid>
				<columns>
					<column flex="1"/>
					<column flex="2"/>
				</columns>
				<rows>
					<row>
						<label change:i18nattr="value &modules.uixul.bo.richtext.FindLabel;" control="search-input"/>
						<menulist id="search-input" sizetopopup="none" editable="true">
	                      <menupopup>
	                        <menuitem label=""/>
	                      </menupopup>
	                    </menulist>					
					</row>
					<row>
						<label change:i18nattr="value &modules.uixul.bo.richtext.ReplaceWithLabel;" control="replace-input"/>
						<menulist id="replace-input" sizetopopup="none" editable="true">
	                      <menupopup>
	                        <menuitem label=""/>
	                      </menupopup>
	                    </menulist>	
					</row>
				</rows>
			</grid>
			<grid>
				<columns>
					<column flex="1"/>
					<column flex="1"/>
				</columns>
				<rows>
				    <row>
						<checkbox id="case-sensitive" change:i18nattr="label &modules.uixul.bo.richtext.CaseSensitive;" checked="false"/>
						<hbox align="center">
							<spacer flex="1"/>
							<toolbarbutton change:i18nattr="label &modules.uixul.bo.richtext.ClearHistory;" oncommand="clearHistory()"/>
						</hbox>
					</row>
					<row>
						<button id="find" change:i18nattr="label &modules.uixul.bo.richtext.Find;" oncommand="doFind()"/>
						<button id="replace-and-find" change:i18nattr="label &modules.uixul.bo.richtext.ReplaceAndFind;" disabled="true" oncommand="doReplace(); doFind()"/>
					</row>
					<row>
						<button id="replace" change:i18nattr="label &modules.uixul.bo.richtext.Replace;" disabled="true" oncommand="doReplace()"/>
						<button id="replace-all" change:i18nattr="label &modules.uixul.bo.richtext.ReplaceAll;" oncommand="replaceAll()"/>
					</row>
				</rows>
			</grid>
			<spacer flex="1"/>
			<label id="find-none" change:i18nattr="value &modules.uixul.bo.richtext.FindNoneEllipsis;" collapsed="true" />
			<label id="find-end" change:i18nattr="value &modules.uixul.bo.richtext.FindEndEllipsis;" collapsed="true" />
			<label id="alert" change:i18nattr="value &modules.uixul.bo.richtext.ReplaceAlert;" collapsed="true" />
		</vbox>
	</window>
</tal:block>